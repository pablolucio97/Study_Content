--------------------------CREATING AND USING TYPES---------------------------

//Types are created trough interfaces, interface  is an object with definitions 
//types to be used to format data.

//Examples:

//CREATING TYPES

interface IUsers{
  name: string,
  email: string
}



interface IMessages{
  subject: string[],
  body: string,
  attachment?: string[], //array of strings, use number[] to array of numbers, 
  //this can be optional
}

//USING TYPES
funciton sendMail(to: IUsers, message: IMessages){
  console.log(`Email with subject ${message.subject} was sented for ${to.name}.`)
}

---------------------------INHERITING INTERFACES------------------------------


interface Users1{
  name: string,
  age: number
}

interface Users2{
  users: Users1
}

const User : React.FC<Users2> = ({users}) => {
  return (
  <strong>Name: {users.name}</strong>
  <strong>Age: {users.age}</strong>
  )
}

---------------------CREATING INTERFACES FOR FUNCTIONS------------------------

interface FunctionInterface{
    onDoAnyThing: (anyArg: GlobalObject) => void;
}

---------------------CREATING INTERFACES FOR COMPONENTS-----------------------
Component file:

import React from 'react'

interface HeaderInterface{
    title: string,
    subtitle?: string,
    index: number
}

const Header: React.FC<HeaderInterface> = (props) => {
    return(
        <div>
            <h1>{props.title}</h1>
            <h4>{props.index}</h4>
        </div>
    )
}

export default Header

-----------------------------------------------------------------------------

Using the component:

import React from 'react';

import Header from './components/Header/index'

function App() {

  return (
    <div>
      <Header title='Ecolect' index={2}/>
    </div>
  );
}

export default App;


-------------------------------GENERAL TIPS-----------------------------------

At definning types for functions, objects, components and more, this types be-
came obligatoly when creating this functions, objects and etc.

------------------------------------------------------------------------------

Be carefull to distinc interfaces and types.

------------------------------------------------------------------------------

When using types in another file instead of the original file of the lib import,
you need to import the type for this parammeter. (Pass the mouse hover the para-
mmeter type in the original file to see your import to secondary file) Example:

Import {Request, Response} from 'express'

export default {
  async index(req: Request, res: Response)
	return res.json()
}

------------------------------------------------------------------------------

If item of the interface is optional, your renderization method should con-
tains options. Example: 

interface Users1{
  name: string,
  age: number,
  email?: string
}

<strong>Age: {users.email || 'Don has e-mail'}</strong>


------------------------------------------------------------------------------

Whenever create a new state to array or object, you need type it with an in-
terface.

------------------------------------------------------------------------------

Whenever using an external api of data in object format, the string value of 
the interface created should be the even of the external api.

