============================REACT COURSE=========================
============================INSTALLATION=========================

1)Install Node.js in your computer
2)On VS Code terminal, run this codes:
2.1) npx create-react-app name_of_project
2.2) cd name_of_project	
2.3) npm start
3) Go to folder of your project, go to the folder called "src"
and create a two files: "index.html" and "index.js".

==========================NPM COMMANDS===========================
npm start
Starts the development server.
------------------------------------------------------------------
npm run build
Bundles the app into static files for production.
------------------------------------------------------------------
npm test
Starts the test runner.
------------------------------------------------------------------
npm run eject
Removes this tool and copies build dependencies, configuration 
files and scripts into the app directory. If you do this, you 
can�t go back!

============================INTRODUCTION===========================

React is a JavaScript library created by Facebook. Is a tool for 
building UI (user interface) components.

Instead of manipulating the browser's DOM directly, React creates a 
virtual DOM in memory, where it does all the necessary manipulating, 
before making the changes in the browser DOM. React only changes 
what needs to be changed!

=========================GENERAL STRUCUTURE=========================

An application writed in React should follow the strucuture base:

1) Imports - Here we should import all the components that will are 
used in the application.

2) Variables declaration - Before right the imports, should decla-
re the variables. This can be objects with multiples properties 
or single values.

3) Cretate the compononent - Here we creating commonly the applica-
tion using the base syntax: class Nameofcomponent ... If an proper-
tie or state is needed to set, should to do this inside the cons-
tructor method.

4)If is necessary create one or various functions, this must be do-
ne before right the constructor method curly brasce is closed.

5)Render the component. All component should be renderized inside
a div tag. If you want, we can put the component to render putting
them inside the div tag. The properties or states also be renderi-
zed altogether with the component. Of this way:
<div>
  <Component example={data.feature}/>
</div>


==============================CLASSES===============================

---------------------CREATING AND USING CLASSES---------------------

A class is a type of function, but instead of using the keyword func-
ction to initiate it, we use the keyword class, and the properties 
are assigned inside a constructor() method.

Example:
class Car {
  constructor(name) {
    this.brand = name;
  }
}

Now you can create objects using the Car class:

mycar = new Car("Ford");


--------------------------METHODS IN CLASSES------------------------

Example: Creating and using a method named how "present":

<script>
class Car {
  constructor(name) {
    this.brand = name;
  }

  present() {
    return 'I have a ' + this.brand;
  }
}

mycar = new Car("Ford");
document.write(mycar.present());
</script>


----------------------------CLASS INHERITANCE------------------------

To crate a class inheritance, use the "extends" keyword. A class crea-
ted with a class inheritance inherits all the methods from another 
class.

The super() method refers to the parent class. By calling the super() 
method in the constructor method, we call the parent's constructor me-
thod and gets access to the parent's properties and methods.

Example:

<script>
class Car {
  constructor(name) {
    this.brand = name;
  }

  present() {
    return 'I have a ' + this.brand;
  }
}

class Model extends Car {
  constructor(name, mod) {
    super(name);
    this.model = mod;
  }  
  show() {
    return this.present() + ', it is a ' + this.model
  }
}

mycar = new Model("Ford", "Mustang");
document.write(mycar.show());
</script>

============================ARROW FUNCTIONS===========================

Arrow functions allow us to write shorter function syntax:

Without arrow function:

hello = function() {
  return "Hello World!";
}


With arrow function:

hello = () => {
  return "Hello World!";
}


Using a object with arrow function:

class Header {
  constructor() {
    this.color = "Red";
  }

//Arrow function:
  changeColor = () => {
    document.getElementById("demo").innerHTML += this;
  }
}

myheader = new Header();


//The window object calls the function:
window.addEventListener("load", myheader.changeColor);

//A button object calls the function:
document.getElementById("btn").addEventListener("click", 
myheader.changeColor);

==============================VARIABLES==============================

var outside of a function: it belongs to the global scope.

var inside of a function: it belongs to that function.

Diference between var and let: If you use var inside of a block, loop,  
the variable is still available outside of that block. If you use let 
inside of a block, loop, the variable is only available inside of that 
loop.

const: is a variable that once it has been created, its value can never 
change.

==========================REACT HTML RENDER============================

The ReactDOM.render() function takes two arguments, HTML code and an 
HTML element. The purpose of the function is to display the specified 
HTML code inside the specified HTML element.

The ReactDom.render() only display one element by time.	

Example 01: Display a paragraph inside a div with id 'root':	
ReactDOM.render(<p>Hello</p>, document.getElementById('root'));

Example 02: Display a table with assign a variable:
const myelement = (
  <table>
    <tr>
      <th>Name</th>
    </tr>
    <tr>
      <td>John</td>
    </tr>
    <tr>
      <td>Elsa</td>
    </tr>
  </table>
);

ReactDOM.render(myelement, document.getElementById('root'));


=================================JSX===================================

JSX is Javascript using XML syntax. JSX converts HTML tags into react 
elements. JSX allows write expressions inside curly braces { }, the ex-
pression can be a variable, property or any value valid in a Javascript
expression. All tags created in JSX must be closed.

Example01:
const myelement = const myelement = (
  <div>
    <h1>I am a Header.</h1>
    <h1>I am a Header too.</h1>
  </div>
);

ReactDOM.render(myelement, document.getElementById('root'));

==============================COMPONENTS================================

Components are independent and reusable bits of code. They serve the same 
purpose as JavaScript functions, but work in isolation and returns HTML 
via a render function. A component is a class. The created component must
has a render() method to display your content and should be declared in
the ReactDOM.render() has <Componentname />.

Example: Creating a component with a <h2> element:

import React from 'react';
import ReactDOM from 'react-dom';

class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
  }
}

ReactDOM.render(<Car />, document.getElementById('root'));

------------------------FUNCTIONS HOW COMPONENTS-------------------------

A component also be a function.

Example:

import React from 'react';
import ReactDOM from 'react-dom';

function Car() {
  return <h2>Hi, I am also a Car!</h2>;
}

ReactDOM.render(<Car />, document.getElementById('root'));

--------------------------COMPONENT CONSTRUCTOR--------------------------

The constructor function is where you initiate the component's properties.
The component properties should be kept in an object called state. The 
constructor function is also where you honor the inheritance of the 
parent component by including the super() statement, which executes the 
parent component's constructor function, and your component has access to 
all the functions of the parent component.

The state of a component can be any feature. The state must be declared
after the constructor method inside brackets.

Example: Setting the state "brand" of the component Car how "Ford".

import React from 'react';
import ReactDOM from 'react-dom';

class Car extends React.Component {
  constructor() {
    super();
    this.state = {brand: "Ford"};
  }
  render() {
    return <h2>I am a {this.state.brand} Car!</h2>;
  }
}

ReactDOM.render(<Car />, document.getElementById('root'));

-------------------------COMPONENTS IN COMPONENTS-------------------------

Example - The component Car inside the component Garage:

class Car extends React.Component {
  render() {
    return <h2>I am a Car!</h2>;
  }
}

class Garage extends React.Component {
  render() {
    return (
      <div>
      <h1>Who lives in my Gara	ge?</h1>
      <Car />
      </div>
    );
  }
}

-----------------------------COMPONENTS IN FILES--------------------------		
At create a new file is needed export this to file index.js. Us the state-
ment export default Nameofcomponent in the end of file and in the file in-
dex.js import the file using the statement import './Nameofcomponent.js';

IN THE FILE App.js:

import React from 'react';
import ReactDOM from 'react-dom';

class Car extends React.Component {
  render() {
    return <h2>Hi, I am a Car!</h2>;
   
}
}

export default Car;

IN THE FILE index.js:

import React from 'react';
import ReactDOM from 'react-dom';
import Car from './App.js';

ReactDOM.render(<Car />, document.getElementById('root'));

================================PROPS==================================

Props are like function arguments in JavaScript and attributes in 
HTML.  React Props only read the component. You will get an error if 
you try to change their value.

Adding a new prop to an component:

const propBrand = <Car brand="Ford" />;


Using this new prop in the component:

class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.brand}!</h1>;
  }
}

-----PASSING PROPS TO ANOTHER COMPONENT USING VARIABLES COMPONENTS-----

Props also allow pass data from one component to another, as parameters.

Example: Passing data variable from the component Garage to the component 
car.

class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.brand}!</h2>;
  }
}

class Garage extends React.Component {
  render() {
    const brandCar = "Ford";
    return (
      <div>
      <h1>Who lives in my garage?</h1>
      <Car brand={brandCar} />
      </div>
    );
  }
}

--PASSING PROPS TO ANOTHER COMPONENT USING OBJECTS VARIABLES COMPONENTS--

class Car extends React.Component {
  render() {
    return <h2>I am a {this.props.brand.model}!</h2>;
  }
}

class Garage extends React.Component {
  render() {
    const carinfo = {name: "Ford", model: "Mustang"};
    return (
      <div>
      <h1>Who lives in my garage?</h1>
      <Car brand={carinfo} />
      </div>
    );
  }
}

===============================STATES===================================

React components are a built-in state object. The state object is where 
you store property values that belongs to the component. When the state 
changes, the component re-renders. The state object is initialized in 
the constructor.

The state object can contain as many properties as you like.

----------------------CREATING THE STATE OBJECTS------------------------

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
}
-------------USING THE STATE OBJECTS OF THE EXAMPLE ABOVE----------------

 render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
      </div>
    );
  }

  ----------CHANGING THE STATE OBJECTS OF THE EXAMPLE ABOVE--------------

   changeColor = () => {
    this.setState({color: "blue"});
  }

     <button
          type="button"
          onClick={this.changeColor}
        >Change color</button>

Complete example:

class Car extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      brand: "Ford",
      model: "Mustang",
      color: "red",
      year: 1964
    };
  }
  changeColor = () => {
    this.setState({color: "blue"});
  }
  render() {
    return (
      <div>
        <h1>My {this.state.brand}</h1>
        <p>
          It is a {this.state.color}
          {this.state.model}
          from {this.state.year}.
        </p>
        <button
          type="button"
          onClick={this.changeColor}
        >Change color</button>
      </div>
    );
  }
}

============================LIFE CICLE================================

Each component in React has a lifecycle which you can monitor and mani-
pulate during its three main phases. The three phases are: Mounting, 
Updating, and Unmounting.

-----------------------------MOUNTING---------------------------------

Mounting means putting elements into the DOM. There is fours methods 
that are called when you are mounting a component: 

1º constructor(): Is called when the component is initialized. Here, 
we should to set up initial values and settings. This method alway be
called with the argument props and in the sequence, with the method 
super(props) to allow that the component inherit methods of your parent.

Example: 

 constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
---------------------------------------------------------------------

2º getDerivedStateFromProps(): This method is called right before ren-
dering elements in the DOM. Here, we should to set up state object ba-
sead on the initial props. It's taking the state with argument and re-
turn the state object changes.

Example:

  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }

   render() {
    return (
      <Header favcol="yellow"/>
    );
  }

---------------------------------------------------------------------

3º render(): Is always required and is the standard method to generate
output in the DOM.

Example:

render() {
    return (
      <h1>This is the content of the Header component</h1>
    );
  }

---------------------------------------------------------------------

4º componentDidMount(): This method is called after the component is
renderized. Is here that you can run statements when the element al-
ready in the DOM.
Example: 

  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 2000)
  }

------------------------------UPDATING---------------------------------

A component is updated whenever there is a change in the component's 
state or props. React has five built-in methods that gets called, in 
this order, when a component is updated:

1)getDerivedStateFromProps():  This is the first method that is called
 when a component gets updated. Here is the best place to set the sta-
 te object based on the initial props.

Example:

  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
---------------------------------------------------------------------

2) shouldComponentUpdate(): With this method you can return a boolean
value that specifies whether React should or not continue the rende-
ring. The default values is 'true'. This value stop of render and 'di-
sable' the functions binded at the component.

Example - Stop the component from rendering at any update:

  shouldComponentUpdate() {
    return true;
  }

  changeCar = () =>{
    this.setState({model: 'Focus'})
  }

  render(){
    return(
      <div>
  <p>I have a {this.state.model} from {this.state.year}.</p>
  <button type="button" onClick={this.changeCar}>Change car</button>
      </div>
    )
  }
}

---------------------------------------------------------------------

3º render(): When working, the render() method render the new value of
the component.

Example:

render() {
    return (
      <h1>This is the {this.state.new}.</h1>
    );
  }

---------------------------------------------------------------------

4º getSnapshotBeforeUpdate(): With this mehtod method you have access 
to the props and state before the update, meaning that even after the 
update, you can check what the values were before the update. This me-
thod requires also the method componentDidUpdate(), otherwhise you 
will receive an error.

5º componentDidUpdate(): This method is executed after the component 
is updated in the DOM. Always should be preceded of the 
getSnapshotBeforeUpdate() method.

Example: The example attend obligatorily at the two methods above.

import React from 'react';


class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  getSnapshotBeforeUpdate(prevProps, prevState) {
    document.getElementById("div1").innerHTML =
    "Before the update, the favorite was " + prevState.favoritecolor;
  }
  componentDidUpdate() {
    document.getElementById("div2").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <div id="div1"></div>
      <div id="div2"></div>
      </div>
    );
  }
}

export default Header;

-----------------------------UNMOUNTING---------------------------------

The unmounting is the phase where the component is removed from the DOM.
componentWillUnmount is the method that should be used when want to remove
a component from the DOM.

Example: 

  componentWillUnmount() {
    alert("The component named Header is about to be unmounted.");
  }

==============================EVENTS==================================

Events in React are like in HTML, but the diference is in the syntax,
React works with events wirted in camel case e inside curly braces.

Example: onClick={shoot} 

Example - Using a function by click event.

class Football extends React.Component {
  shoot = () => {
    alert("Great Shot!");
  }
  render() {
    return (
      <button onClick={this.shoot}>Take the shot!</button>
    );
  }
}

export default Football;

---------------------------THIS ON EVENTS------------------------------

The keyword this used in events represents the objects that are used in
the own method, which can be the global window object, a HTML button, or
 whatever. It's the cause that we should use arrow functions.

Example - Using the keyword this in the alert. Will return the object
alert of the browser.

class Football extends React.Component {
  shoot = () => {
    alert(this);
  }
  render() {
    return (
      <button onClick={this.shoot}>Take the shot!</button>
    );
  }
}

export default Football;

-----------------PASSING ARGUMENTS TO EVENTS FUNCTIONS------------------

class Football extends React.Component {
  shoot = (a) => {
    alert(a);
  }
  render() {
    return (
      <button onClick={() => this.shoot("Goal")}>Take the shot!</button>
    );
  }
}

export default Football;

===============================FORMS====================================

In HTML, form data is usually handled by the DOM, alreayd in React, the
handle occours by the components. When the data is handled by the compo-
nents, all the data is stored in the component state. You can control 
the changes by adding events handlers in the onChange attribute.

To access the value of a field, you must use the event.target.value syn-
tax.

Example: 

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = { username: '' };
  }
  myChangeHandler = (event) => {
    this.setState({username: event.target.value});
  }
  render() {
    return (
      <form>
      <h1>Hello {this.state.username}</h1>
      <p>Enter your name:</p>
      <input
        type='text'
        onChange={this.myChangeHandler}
      />
      </form>
    );
  }
}

export default Myform;

--------------------RENDERING A FORM WITH CONDITIONS-----------------------

If by example, you dont want display the h1 element until the user has 
done any input, you can add an if statement creating a condition inside 
the method render() how the example bellow: 

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = { username: '' };
  }
  myChangeHandler = (event) => {
    this.setState({username: event.target.value});
  }
  render() {
    let header = '';
    if (this.state.username) {
      header = <h1>Hello {this.state.username}</h1>;
    } else {
      header = '';
    }
    return (
      <form>
      {header}
      <p>Enter your name:</p>
      <input
        type='text'
        onChange={this.myChangeHandler}
      />
      </form>
    );
  }
}

export default Myform;

---------------------------SUBMTTING FORMS---------------------------

import React from 'react';

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = { username: '' };
  }
  mySubmitHandler = (event) => {
    event.preventDefault();
    alert("You are submitting " + this.state.username);
  }
  myChangeHandler = (event) => {
    this.setState({username: event.target.value});
  }
  render() {
    return (
      <form onSubmit={this.mySubmitHandler}>
      <h1>Hello {this.state.username}</h1>
      <p>Enter your name, and submit:</p>
      <input
        type='text'
        onChange={this.myChangeHandler}
      />
      <input
        type='submit'
      />
      </form>
    );
  }
}

export default MyForm;

-------------------------MULTIPLE INPUT FORMS---------------------------

To create multiple input forms you should give a name attribute to each 
input element. When you initialize the state of the constructor and re- 
turn them use the field names. To acces the state in this.setState method, 
use square brackets around the property name. 

Example - Form with three input field: 

import React from 'react'

class Form extends React.Component{
    constructor(props){
        super(props);
        this.state = {
            name: '',
            age: null,
            sex: ''
        }
    }

    myHandler = (event) => {
        let name = event.target.name;
        let age = event.target.value;
        let sex = event.target.vale;
        this.setState({[name]: age,sex})
    }
    render(){
        return(
            <div>
                <form>
                <p>Type your name:</p>
                <input  name ='username' onChange={this.myHandler} type='text'></input>
                <p>Whats your age? Type it.</p>
                <input name ='userage' onChange={this.myHandler} type='text'></input>
                <p>Type your sex:</p>
                <input name ='usersex' onChange={this.myHandler} type='text'></input>

                </form>
                <h3>Hello, {this.state.username}! Your age is of {this.state.userage} years. Your sex 
                is {this.state.usersex}.</h3>
            </div>
        )
    }
}

export default Form;

---------------VALIDATING FORMS WHILE THE USER IS TYPING----------------

import React from 'react'

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      age: null,
    };
  }
  myChangeHandler = (event) => {
    let nam = event.target.name;
    let val = event.target.value;
    if (nam === "age") {
      if (!Number(val)) {
        alert("Your age must be a number");
      


---GENERATING MESSAGE ERRORS WHILE THE USER TYPES - DON'T USING ALERT---

import React from 'react'

class Form extends React.Component{
    constructor(props){
        super(props);
        this.state = {
            name: '',
            age: null,
            error: ''
        }
    }

    Handler = (event) => {
        let username = event.target.name;
        let userage = event.target.value;
        let err = '';
        if(username === 'age'){
            if(userage !== '' && !Number(userage)){
                err = <strong>You should type a number</strong>
            }
        }
        this.setState({error: err});
        this.setState({[username]: userage})
    }
    render(){
        return(
            <div>
                <form>
                <p>Type your name:</p>
                <input type='text' name='name' onChange={this.Handler}></input>
                <p>Type your age:</p>
                <input type='text' name='age' onChange={this.Handler}></input>
                {this.state.error}
                </form>                

            </div>
        )
    }
}

export default Form;

-------------------------------TEXT AREA---------------------------------

import React from 'react'

class MyTextArea extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      values: 'It is my text area.'
    }
  }
  render(){
    return(
      <div>
        <form>
    <textarea>{this.state.values}</textarea>
        </form>
      </div>
    )
  }
}

export default MyTextArea;

-------------------------------SELECT BOX---------------------------------


import React from 'react';

class MyForm extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      mycar: 'Volvo'
    };
  }
  render() {
    return (
      <div>
      <form>
      <select value={this.state.mycar}>
        <option value="Ford">Ford</option>
        <option value="Volvo">Volvo</option>
        <option value="Fiat">Fiat</option>
      </select>
      </form>
    <p>The car choiced are {this.state.mycar}.</p>
      </div>
    );
  }
}

export default MyForm;

=================================CSS====================================

The two ways more commonly to applicate CSS in React is creating a vari-
able to guard the styles properties of the component or using an external 
CSS file.
 
 -------------------------CREATING A VARIABLE---------------------------

import React from 'react'

 class MyHeader extends React.Component {
  render() {
    const mystyle = {
      color: "white",
      backgroundColor: "DodgerBlue",
      padding: "10px",
      fontFamily: "Arial"
    };
    return (
      <div>
      <h1 style={mystyle}>Hello Style!</h1>
      <p>Add a little style!</p>
      </div>
    );
  }
}

export default MyHeader;

 ----------------------USING A EXTERNAL CSS FILE------------------------

 To use an external file enought import this in the index.js file.

import './Name_of_file.css';

=======================CREATING REACT APPLICATIONS======================

----------------------------DEFINING THE MOCK---------------------------

1)Defines the mock of the component imagining or drawing the final layout
of the application where each component should represents a information
or funcionality. Also think how will be used the props and the states of 
the components, sames components will be statics and others, dinamics. 

---------------------------CREATING COMPONENTS--------------------------

2)Creates the components always thinking rendering all components in the 
file App.js. One component can guard another components and be rendere-
rized by another component.

----------------------CREATING AND INERHITING PROPS---------------------

3) Creates a variables to sotre the components projects. When we are wor-
king with various components all data can be passed rought a object.

4) Pass the specific props to your components using the variable created
to the component inside the return() method. Each detrmined prop can be 
passed accessing the object properties. Be careful of mode how the props
are passed, think in the disposision of the components in the mock to 
don't have issues. Avoid duplicate components.

Obs: Props are created trough variables in the component code scope or 
directly in the component return() method. Any prop can be created and
acceesed by another component. You should alway create a variable in the 
render() method to extract the props of ther anothe component and use in
the return() method of the desired component.


============================GENERAL TIPS================================

Variables created relied to a component should be stay outside component
scope.

Props should by passed inside a variable and used by the or another com-
ponent trought this.props.props_name

Variables containing props should be declared before the component and 
exported containg the component. A single variable can store various ob-
jects properties (props).

Always declre the variables in the App.js component.

Always declare the variables before of create the component.

All time when go work with functions with evetns, shoul pass the argument
event for this function.

When crates a variables assigned at conditional satatement or a function,
this variables should be delcared in the return() method.

When is working with form inputs handler, notice thats the name of the in-
put field and the this.states are with same names.

To create forms elements, the value of the element goes in the state value
declared in the component constructor.

Avoid duplicate Components.

Use spread operator {...} to represents objects and avoid write very lines.
Spread operator can be used to represent objects thats represents props, 
this operator can't be used to represent state.

Use the practice 'extract' to pass the props of a component to another com-
ponent.

Use event.target.valueAsDate to render date input content.

The scope that is inside the main component is executed first 
than functions outside the component scope.

Use npm install autoprefixer@9.8.0 to fix css load errors.

Always the first element of a map return should be the prop key to identify
the list items.



























