==CREATING A THEME SWITCHER FOR REACT/REACT NATIVE USING STYLED COMPONENTS==

1)Install the styled components and your types. If you are using react, ins-
tall also the React Switcher to controle the theme toggle.

-------------------------------------------------------------------------

2)Create your global style using styled components in the src folder. 
Example:

import {createGlobalStyle} from 'styled-components'

export default createGlobalStyle `
    *{
        padding: 0;
        margin: 0;
    }

    body{
        background: ${props => props.theme.colors.background}
        color: #333;
    }
`
-------------------------------------------------------------------------

3)Create your themes files in a new themes folder, example: 

export default{
    title: 'dark',
    colors:{
        background: '#fff',
        text: '#333',
        primary: '#33ff',
        secondary: '#55ff'
    }
}

-------------------------------------------------------------------------

export default{
    title: 'light',
    colors:{
        background: '#fff',
        text: '#333',
        primary: '#33ff',
        secondary: '#55ff'
    }
}


-------------------------------------------------------------------------

4)Create the file of global types for styled-components named styled.d.ts 
inside the themes folder with the setttings: In sequence goes to the 
tsconfig.json and include the key "files" with the value of your new confi-
guration directory, example:


import 'styled-components'

declare module 'styled-components'{
    export interface DefaultTheme{
        title: string;
        colors:{
            background: string;
            text: string;
            primary: string;
            secondary: string;
        }
    }
}


------------------------------------------------------------------------

 "files" : [
    "src/styles/styled.d.ts"
  ]

------------------------------------------------------------------------

5) Crete a new folder named utils and a new hook to handle the theme state 
on localStorage:

import {useState, useEffect} from 'react'

function usePersistState(key: string, initialState: any) {
    const [themeState, setThemeState] = useState(() => {
        const storageValue = localStorage.getItem(key)
        if(storageValue){
            return JSON.parse(storageValue)
        }else{
            return initialState
        }
    })

    useEffect(() => {
        localStorage.setItem(key, JSON.stringify(themeState))
    },[key, themeState])

    return [themeState, setThemeState]

}

export default usePersistState


------------------------------------------------------------------------

6)Create a component with the React Switch to handle the theme:

import React, {useContext} from 'react'
import {Container} from '../Header/styles'
import {ThemeContext} from 'styled-components'
import GlobalStyle from '../../Globals'
import Switch from  'react-switch'



interface Props {
    toggleTheme():void
}

const Header : React.FC<Props> = ({ toggleTheme }) => {

    const {colors, title} = useContext(ThemeContext)

    return (
        <Container>
            <GlobalStyle/>
            <Switch
            onChange={toggleTheme}
            checked={false}
            checkedIcon={false}
            uncheckedIcon={false}
            height={15}
            width={40}
            handleDiameter={20}
            onColor={colors.primary}
            />
        </Container>
    )
}

export default Header

------------------------------------------------------------------------

7)Import and use the component in your application:

import React, {useState} from 'react';
import {ThemeProvider} from 'styled-components'

import Header from './components/Header/index'
import GlobalStyles from './Globals'

import light from './styles/themes/light'
import dark from './styles/themes/dark'

function App() {

  const [theme, setTheme] = useState(light)

  function handleTheme(){
    setTheme(theme.title === 'light' ? dark : light)
  }

  return (
    <ThemeProvider theme={theme}>
         <div className="main-container">
           <GlobalStyles/>
          <Header toggleTheme={handleTheme}/>
        </div>
    </ThemeProvider>
  );
}

export default App;





