
-------------------------ARROW FUNCTIONS----------------------------

Arrow functions allow uses properties of classes using the variable 
this outside the current escope.

The keys in an arrow function means the body of the function and 
the parentheses means the return of multiple lines and objects.

When an arrow function takes only parameter, the parentheses, re-
turn and keys doesn't needs. Example:

const myArray = [1,2,3,4,5,6]

arrayResult = myArray.map(item => item * 2)
.filter(item => item < 5)

console.log(arrayResult)

--------------------------DESTRUCTOR------------------------------

Use the desustructurezation to split data from objects and arrays. 
Example:

const myAdress = {
    street: 'Street One',
    number: 57,
    uf_city: {
        uf: 'Texas',
        city: 'Cansas'
    }
}

const {street, number, uf_city: {uf, city}} = myAdress

console.log(street)
console.log(number)
console.log(uf)
console.log(city)

------------------------REST OPERATOR-----------------------------

The rest operator is used to get the rest of a data. Example:

const myArray = [1,2,3,4,5,6]
[a,b, ...c] = myArray
console.log(c)

-----------------------SPREAD OPERATOR----------------------------

Spread operator is used to copy and merge equals structures.
Example:

const myArray = [1,2,3,4,5,6]
const usingSpread = [...myArray]
console.log(usingSpread)

---------------------------PROMISES-------------------------------

Promises are used to get data or do function waiting another 
task and should be used with try and catch block. Example:

const getAdress = async () => {

	try{
	const user = await api.get('users/pablo')	
	const adress = await api.get(`/users/adress/${users.id}`)
	}catch(error){
	console.log('Error: ' + error)	
	}	
}

---------------------------CLASSES--------------------------------

A class need a constructor method to declare your default value 
and a new instance to use this class.

Example: Creating a class of an array with a method that add a new
task.

class todoList {
  constructor(){
	this.todods = []		
  }

	addTodo(){
	 this.todos.push('New task')
	 console.log(this.todos)
  }
}

const MyTasks = new TodoList()

-----------------------------------------------------------------

Creating a new class  inheriting another class. Classes that i-
nherite another class, need a super() method to inherit the props 
of another class.

Example using the class above:

const todoList2 extends todoList{
  constructor(){
    super()  
  }
}

const MyTasks = new TodoList2()

-----------------------------------------------------------------

Creating a class with a static method.

Example:

class Calc {
  static sum(a,b){
    return a +b
 }
}


console.log(Calc.sum(1,2))


-----------------------TEMPLATE LITERALS-------------------------

Template literas is a shorcut for print messages with variables.
Example: `My names is ${name} and I'm working with ${language}`

----------------------OBJECT SHOR SYNTAX-------------------------

It's a shortcut for use variables in objects. Example:

const name = 'Pablo';
const age = 25;

const user = {
	name,
	age,
	enterprise: 'Rocketseat
}

-------------------------ASYNC AWAIT----------------------------

const myPromise =  () => new Promise((resolve, reject) => {
    setTimeout(() => {resolve('OK')}, 2000)
})

const runPromise = async () => {
     console.log(await myPromise())
     console.log(await myPromise())
     console.log(await myPromise())
     console.log(await myPromise())
 }

runPromise()
-------------------------GENERAL TIPS----------------------------

The variable this refer to current scope which is inserted.

Spread operators are useds after equals symbol and rest operators, 
before.

If an object has a even name to property and value, can be wrote 
only one. It is the short syntax.

When returning a a arrow function, use () to return html content
or {} to return javascript code.

To import a default component you don't need for {} in the import
statement, to import a component that doesn't default, you will 
need it.

Use the statement import * as myName to import all components in-
side a file js.	The variable 'myName' becames an object and to u-
se each component, is necessary declare object syntax.

