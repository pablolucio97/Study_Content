=====================GIT AND GITHUB COURSE=====================

-----------------------------GIT-------------------------------

Git is a version control system that bind the GitHub 
with your local enviroment code.Git is used to create local re-
positorys, this repository can be create using the command git.


----------------------------GITHUB-----------------------------

GitHub is the social network of code where the develo-
pers can create and update yours and codes of anothers
developes.

---------------------------------------------------------------

The changes in local repository are made by the command commit
mit and changes in remote repository are made by the command
push.

---CREATING AND COMMITING A PROJECT WITH GITHUB FOR DESKTOP--- 

Creating and using/changing (commiting)repository using GitHub 
for desktop:

1) Click in new repository, get a name and a description for 
this, always mark the option "Initialize this repository with 
a README", select the 'MIT license' and click in "Create reposi-
tory" (CTRL+Enter).

2)Click in "Publish repository" (CTRL+P) to send your local repo
sitory to your GitHub.

3)Click in "Open in Visual Studio Code" to open your local repo-
sitory folder in the Visual Studio Code. Working in your project
project with the GitHub for Desktop opened, you can se in 
the tab "Changes" all changes and differences of your pro-
ject.

4)To save your changes of the local repository to your remote 
repository (GitHub) type a description for your changes, click 
in "Commit to master" in sequence click in "Push origin".


----------------------CLONING A REPOSITORY---------------------

1)Navigates to desired repository in github.com, click in
'Clone or download' and click in 'Open with Desktop'.

2)In the GitHubDesktop choice a folder do clone the repostory
and click in Clone.

3)Is it'is a React/ReactNative project, add the paste node_modu-
les to the project and install the project dependecies to work
correctly.

---------------------USING MARKDOWN LANGUAGE--------------------
--------------------------TEXT STYLES---------------------------
*italic* __italic__
----------------------------------------------------------------
**bold** __bold__
----------------------------------------------------------------
_*mixed italic bold*_
----------------------------------------------------------------
~~strached~~
----------------------------------------------------------------
`marked text`
----------------------------------------------------------------
#New title level 1
##New title level 2
###New title level 3
--------------------------LIST STYLES---------------------------
*** new hr
----------------------------------------------------------------
1. Firt item
2. Second item
  1.First subitem
----------------------------------------------------------------
* First circle list item
* Second circle list item
   *First circle subitem
----------------------------------------------------------------
- [] Task item.
- [x] Task item realized.
----------------------------------------------------------------
[text](active link)
![text](innactive link)
------------------------------TABLE-----------------------------
Num|Name|Note|
---|---|---
1|Paul|9.5
2|John|8.7
-------------------------------CODE-----------------------------

```
const n1 = 1
const n2 = 2
if(2>1){
   console.log(1+2)
}
```
-------------------------------EMOJI----------------------------
:emoji_name:
all emojis: github.com/ikatyang/emoji-cheat-sheet
emojis in any input text: emojipedia.org

----------------------------MARK PEOPLES------------------------
@peoplename
> reply people

=================VISUAL STUDIO CODE FILE STATUS================

M: Modified - The file has modified.
U: Untracked - The file still doesn't pushed to GitHub.


=======================GIT HUB PROCESS=========================

-----------CREATING LOCAL REPOSITORY AND ADDING FILES----------

1) git init repository_name: create a new repository.
2) touch file_name: create a new file.
3) git add * or git add file_name.extension: add files 
to current repository.
4) git status: show all changes of the local files.
5) git commit -m "mesage": moves the changed local files 
to current local repository and register this commit 
taged by the message.

-------------TRACKING CHANGES IN THE LOCAL REPOSITORY----------

Tracking changes in the local repository

1) git log --oneline: show the hash of all branchs or use 
git log --graph: show a graphic of the commits.
The current branch is identified with the Head.
2) git checkout bash_code: track and return to the 
branch version.
3) git checkout file_name: discard the current changes 
and return to previous version of the files
4) git checkout master: undo and return the to the last 
modified branch. 

--------------UNDO CHANGES IN THE LOCAL REPOSITORY------------

git reset --hard Head: remove the current branch to 
don't be commited.

git reset --hard bash_code: undo the last commit of 
the current branch.



==========================MAIN COMMANDS========================

-----------------------SETTINGS-----------------------

git config --global user.name "[name]"

Set the name that your desire bined at your transitions
of commit.

-------------------------------------------------------

git config --global user.email "[email_adress]"

Set the email that your desire bined at your transi- 
tions of commit.

-------------------------------------------------------

git config --global color.ui auto

Set the color.

-------------------CREATING REPOSITORY-----------------

git init [name_of_project]

Creates a new local repository with a specific name.

-------------------------------------------------------

git clone [URL]

Downlaod the repository trhought the URL.

----------------------DOING CHANGES---------------------

git status

List all new or shifited files to be commiteds.

--------------------------------------------------------

git add [name_of_file]

Add new files at your project.

--------------------------------------------------------

git diff --staged

Shows the diference between selected files and yours la-
tests versions.

--------------------------------------------------------

git reset [name_of_file]

Unselect the file, but maintain your content.

--------------------------------------------------------

git commit -m "[message]"

Create a message explanating a new file add or changes.

------------------DOING CHANGES IN GROUP----------------

git branch

List all local branchs in the current repository.

---------------------------------------------------------

git branch [name_of_branch]

Creates a new branch

---------------------------------------------------------

git checkout [name_of_branch]

Exchange to a specific branch and refresh the work dire-
tory.

---------------------------------------------------------

git merge [branch]

Combines the history of the specific and current branch.

---------------------------------------------------------

git branch -d [name_of_branch]

Deletes the specific branch.

---------------------HANDLING FILES----------------------

git rm [name_of_file]

Removes the file of the diretory and select them to remove.

---------------------------------------------------------

git rm --cached [name_of_file]

Removes the file of the version control but maintain the 
file locally.

---------------------------------------------------------

git stash

Stores temply all files trackeds modifieds.

---------------------------------------------------------

git stash pop

Restore the recent files in stash.

---------------------ACESSING THE HISTORY-----------------

git log

List the history of version to the current branch.

----------------------------------------------------------

git log --folloe [name_of_file]

List the history of versions to a file, including changes 
of name.

---------------------------------------------------------

git diff [first_branch] [second_branch]

Shows the diference between the content of two branches.

---------------------------------------------------------

git show [commit]

Return changes of metadata and content to the specified 
commit.

---------------------------------------------------------

git reset [commit]

Undo all comits after '[commit]', preserving local chan-
ges.

---------------------------------------------------------

git reset --hard [commit]

Unrely all history and changes to the specified commit.

---------------------SYNCHRONIZING CHANGES----------------

git fetch [marker]

Download all history of a repository marker.

---------------------------------------------------------

git merge [marker]/[branch]

Combines the marker of branch in the local branch.

---------------------------------------------------------

git push [alias] [branch]

Send all commits of local branch to GitHub.

---------------------------------------------------------

git pull

Download the history of your GitHub files and incorporates
the changes by according whts is in the GitHub.

---------------------------------------------------------

Another functionalities


git branch: show the current branch of the project.
git diff: show the file changes before to commit




