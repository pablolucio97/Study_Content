Messageria: Messageria is Messaing System concept that is the method to communicate between different services asynchronously where multiple services can publish or listen to a message. Generally the Messageria concept is used to set the client free to do another process while the message sent is in the Messageria queue and it will listen by the server to be processed and further be returned to the client.

-----------

RabbitMQ is a tool to work with the Messageria concept. The RabbitMQ can be managed by docker and it provides an user interface to see channels, queues, exchanges and more. Each kind of amq.exchange is a different method.

-----------

Main amq Exchanges:

amq.direct: Direct exchange delivers messages to queues based on the routing key. It ensures that a message with a matching routing key is sent to the associated queue(s).

amq.fanout: Fanout exchange broadcasts messages to all queues that are bound to it. It ignores the routing key and delivers messages to all queues associated with the exchange.

amq.topic: Topic exchange routes messages to queues based on pattern matching between the routing key and the binding key. It allows for flexible routing based on wildcards and patterns.

amq.headers: Headers exchange routes messages based on message header attributes instead of the routing key. It provides more complex routing by examining headers instead of the content.

amq.match: Match exchange performs content-based routing by matching the message content to pre-defined rules. It allows for more advanced filtering and routing based on message attributes.


1) Create and run a new rabbitmq image using Docker through the command 
"docker run -d --hostname my-rabbit --name your-container-name -p 5672:5672 
-p 15762:15672 -e RABBITMQ_DEFAULT_USER=your-login -e 
RABBITMQ_DEFAULT_PASS=your-password rabbitmq:3-management"

--------------------

2) Access the RabbitMQ panel through the url http://localhost:15762 (maybe can be necessary access as incognito), click on "Queues" tab and so click on "Add new queue" provide a name for your queue, and click on "Add queueu/Save". You new queue must appears on your queue's list.

--------------------

3) Create a directory to store a new server to publish your messages. Enter inside this directory 
run npm init -y to initialize the project, and install amqplib, express, and so install typescript,
ts-node-dev and @types/amqplib as development dependency. (Check if you have dotenv installed too).

4) Run docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' your-container  to get your ip and create the Rabbit url to connect with your Rabbit server. Your environment must 
look like: RABBIT_URL=amqp://pablo:abc123@172.17.0.2. If you have connection problems try to use 
the default localhost address, example: RABBIT_URL=amqp://pablo:abc123@127.0.0.1

5) Check the code on 