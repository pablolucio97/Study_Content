============CONFIGURING AND VALIDATING ENVIRONMENT VARIABLES WITH ZOD AND DOTENV============

Zod is useful to define an object formatting and check if this value is valid.

1) Install the zod running yarn add zod.

-----------------------

2) Inside src folder, create a new folder named as env and a index file inside it. This
file must import the zod, define an object containing the formation expected, do the safe
parse of this object,assign a variable to this parse, check if has success in the parse
process and then assign the parse in another variable exporting it. Example:

import { z as Zod } from 'zod'

const envSchema = Zod.object({
    DATABASE_URL: Zod.string(),
    PORT: Zod.number().default(3333),
    NODE_ENV: Zod.enum(['production', 'development', 'test']).default('production')

})

const _env = envSchema.safeParse(process.env)

if(_env.success === false){
    console.error('❗ Invalid environment variable', _env.error.format)
    throw new Error('❗ Invalid environment variable')
}

export const env = _env.data

-----------------------

3) Define the value of your variable environments in your default .env file. Ex:

DATABASE_URL="./db/app.db"
NODE_ENV="development"

-----------------------

4) Import the dotenv and your parse verification to use your it in your application. Ex:

import 'dotenv/config'
import { env } from './env'
import { knex as knexSetup, Knex } from 'knex'

export const config: Knex.Config = {
  client: 'sqlite',
  connection: {
    filename: env.DATABASE_URL,
  },
  useNullAsDefault: true,
  migrations: {
    extension: 'ts',
    directory: './db/migrations',
  },
}

export const knex = knexSetup(config)
