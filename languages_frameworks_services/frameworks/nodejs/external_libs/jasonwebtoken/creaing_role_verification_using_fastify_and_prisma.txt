===========CREATING ROLE VERIFICATION MIDDLEWARE USING FASTIFY AND PRISMA==========

1) Alter or add the role property to your entity on Prisma schema file. Example:

enum Role {
  ADMIN
  MEMBER
}
model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String
  role          Role @default(MEMBER)
  created_at    DateTime @default(now())

  checkins Checkin[]
  checkin_id String?

  @@map("users")
}

---------------------

2) Run npx prisma migrate dev to prisma record your entity changes on the schema.

---------------------

3) Add the payload key into the fastify-jwt.d.ts File. Example:

import '@fastify/jwt'

declare module '@fastify/jwt' {
  export interface FastifyJWT {
    user: {
      sub: string,
      role: 'ADMIN' | 'MEMBER'
    }
  }
}

---------------------

4) In your authenticate user controller file, add the key role on token and refresh
token payloads. Example:

import { AppError } from '@/errors/AppError'
import { makeAuthenticateUserUseCase } from '@/factories/makeAuthenticateUserUseCase'
import { FastifyReply, FastifyRequest } from 'fastify'
import { z as zod } from 'zod'

const userRegistrationSchema = zod.object({
    email: zod.string().email(),
    password: zod.string().min(6),
})

export async function authenticateUserController(
    req: FastifyRequest,
    rep: FastifyReply
) {
    const { email, password } = userRegistrationSchema.parse(req.body)
    try {
        const authenticateUserUseCase = makeAuthenticateUserUseCase()

        const user = await authenticateUserUseCase.execute({
            email,
            password,
        })
        //CREATING JWT TOKEN BASED ON user.id INFO
        const token = await rep.jwtSign(
            {
                role: user.role
            },
            {
                sign: {
                    sub: user.id,
                },
            }
        )

        const refreshToken = await rep.jwtSign(
            {
                role: user.role
            },
            {
                sign: {
                    sub: user.id,
                    expiresIn: '7d',
                },
            }
        )

        return rep
            .setCookie('refreshToken', refreshToken, {
                path: '/', // ROUTES HAS ACCESS TO READ THE COOKIE
                secure: true, // COOKIE IS ENCRYPTED BY HTTPS, FRONT-END CAN READ IT
                sameSite: true, //AVAILABLE ONLY IN THE DOMAIN (LOCALHOST OR PRODURL)
                httpOnly: true, //AVAILABLE OLY IN THE REQUEST CONTEXT, NOT WILL BE STORED IN BROWSER
            })
            .status(200)
            .send({ token })
    } catch (error) {
        if (error instanceof AppError) {
            return rep.status(403).send({
                message: error.message,
            })
        }
        throw error
    }
}


---------------------

5) Authenticate with member and admin users and compare it payload on https://jwt.io

---------------------

6) Create the verifyUserRole middleware to check the user role and conced access only for 
admin users. Example:

import { FastifyRequest, FastifyReply } from 'fastify'

export function verifyUserRole(roleToVerify: 'ADMIN' | 'USER') {
    return async (req: FastifyRequest, rep: FastifyReply) => {
        const { role } = req.user
        if (role !== roleToVerify) {
            return rep
            .status(401)
            .send({ message: 'You have no permission to access this resource.' })
        }
    }
}

---------------------

7) Add the verifyUserRole middleware to your route you want to constrain only for admins. Ex:

import { FastifyInstance } from 'fastify'
import { createGymController } from '../controllers/gyms/createGym'

import { verifyJwt } from '@/http/middlewares/verify-jwt'
import { verifyUserRole } from '@/http/middlewares/verify-user-role'

export async function gymsRoutes(app: FastifyInstance) {
    //calls the authentication jwt middleware at request event
    app.addHook('onRequest', verifyJwt)
    //calls the verifyUserRole middleware checking if user is admin
    app.post('/gyms/create', { onRequest: [verifyUserRole('ADMIN')] }, createGymController)
}
