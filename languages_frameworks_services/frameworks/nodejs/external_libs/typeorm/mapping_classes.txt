--------------------------------DOING CLASS MAPPER---------------------------------

Mapper is a common technique useful to return to the final user only the data he 
really need to see.

1) Create the ResponseDTO interface inside modules/your_module/dtos

-----------------------

2) Inside modules/your_module, create a new folder named "mapper" and inside this 
a new file (ex UserMap) containing a class with a static method that return the 
desired response format. Example:

import { IUserResponseDTO } from "../dtos/IUserResponseDTO";
import { User } from "../infra/typeorm/entities/user";

class UserMap {
    // static allows to use the method without instance the class
    static toDTO({
        id,
        email,
        name,
        avatar,
        driver_license
    }: User): IUserResponseDTO {
        return {
            id,
            email,
            name,
            avatar,
            driver_license
        }
    }
}

export { UserMap }

-----------------------

3) In your useCase class that should return the desired format import the mapper and
use the mapper method to return the desire format. Example:

import { IUserResponseDTO } from '@modules/accounts/dtos/IUserResponseDTO';
import { UserMap } from '@modules/accounts/mapper/UserMap';
import { IUsersRepository } from "@modules/accounts/repositories/IUserRepository";
import { inject, injectable } from "tsyringe";



@injectable()
class ProfileUserUseCase {
  constructor(
    @inject("UsersRepository")
    private usersRepository: IUsersRepository
  ) {}
  async execute(id: string): Promise<IUserResponseDTO> {
    const user = await this.usersRepository.findById(id);

    //return the response formatted
    return UserMap.toDTO(user);
  }
}

export { ProfileUserUseCase };