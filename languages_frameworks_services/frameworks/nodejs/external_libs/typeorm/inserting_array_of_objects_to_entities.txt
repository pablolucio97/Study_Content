==================INSERTING AN ARRAY OF OBJECTS TO AN ENTITY====================

1) Add the column that will store the array of objects to your migration, this
column need be jsonb type. Example:

import {MigrationInterface, QueryRunner, TableColumn} from "typeorm";

export class AddItemsToOrder1674299260171 implements MigrationInterface {

    public async up(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.addColumn('orders', new TableColumn({
            name: 'items',
            type: 'jsonb',
            isNullable: true
        }))
    }

    public async down(queryRunner: QueryRunner): Promise<void> {
        await queryRunner.dropColumn('orders', 'items')
    }

}

-------------


2) In your entity declare this column as "jsonb" referencing to the
array of these objects. Example:

@Column("jsonb", {nullable: true})
items: IItem[]

-------------

3) Requires these props on your useCase and controller. Pass
it normally to the Insomnia/Postman. Examples:

import { inject, injectable } from 'tsyringe'
import { IOrdersRepository } from '../../repositories/interfaces/orders'
import { IOrder } from '../../repositories/interfaces/order'

@injectable()
export class CreateOrderUsecase {
    constructor(
        @inject('OrdersRepository')
        private ordersRepository: IOrdersRepository
    ) { }

    async execute({
        client_id,
        client_name,
        client_cpf,
        client_cnpj,
        rent_date_start,
        rent_date_return,
        voucher_code,
        total,
        items
    }: IOrder): Promise<void> {
        await this.ordersRepository.create({
            client_id,
            client_name,
            client_cpf,
            client_cnpj,
            rent_date_start,
            rent_date_return,
            voucher_code,
            total,
            items
        })
    }
}

--------------

import { Request, Response } from 'express'
import { container } from 'tsyringe'
import { CreateOrderUsecase } from './CreateOrderUsecase'

export class CreateOrderController {
    async handle(req: Request, res: Response): Promise<Response> {
        const { client_id,
            client_name,
            client_cpf,
            client_cnpj,
            rent_date_start,
            rent_date_return,
            voucher_code,
            total,
            items
        } = req.body
        const createOrderUsecase = container.resolve(CreateOrderUsecase)
        await createOrderUsecase.execute({
            client_id,
            client_name,
            client_cpf,
            client_cnpj,
            rent_date_start,
            rent_date_return,
            voucher_code,
            total,
            items
        })
        return res.status(201).json({
            "message": "Order created with success" })
    }
}