---------------------------PERFORMING TRANSACTIONS--------------------------------

Transactions are useful to grant two or more database operations will be executed 
successfully otherwise will be undone. A Prisma transaction can be sequential 
(locks the database whereas the operations inside the transaction is running) or 
interactive (doesn't locks the database).

In the example bellow, an interactive transaction will perform user and post 
inserting on the database, if something gets wrong (like trying to create a new 
post with a user.id that doesn't exist') transaction will perform a rollback. 
Example:

import { prisma } from '../../../../database/prisma'
import { CreateUserDTO, CreatePostDTO } from '../../../../dtos/userDto'
import { AppError } from '../../../../errors/AppError'


export class CreatePostWithUserUseCase {
    async execute(userData: CreateUserDTO, postData: CreatePostDTO) {

        const { name, email } = userData
        const { title, content } = postData
        let createdUser;
        let createdPost;

        await prisma.$transaction(async (tx) => {
            createdUser = await tx.users.create({
                data:{
                    name,
                    email
                }
            })

            createdPost = await tx.posts.create({
                data:{
                    title,
                    content,
                    id_user: createdUser.id
                }
            })
        })

        return createdPost

    }
}

------------------

The following query returns all posts that match the provided filter as well as 
a count of all posts:

const [posts, totalPosts] = await prisma.$transaction([
  prisma.post.findMany({ where: { title: { contains: 'prisma' } } }),
  prisma.post.count(),
])