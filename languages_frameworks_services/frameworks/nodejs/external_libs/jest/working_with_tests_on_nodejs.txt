========================WORKING WITH TESTS ON NODEJS==========================

------------------------TYPES OF TESTS AND CONCEPTS---------------------------

Unity tests: Are tests that tests only a single function, class, or component 
separated from the application. If this function or component is integrated or 
depends of actions bonded with features of the application, it receives the 
name of Mock.

Integration tests: This type of test will your backend flow. Flow ex:

routes => controllers => useCases => repository
repository => useCases => controllers => routes

Test Driven Development (TDD): Is a methodology (not a kind of test) of wri-
ting test before to create your application.


------------------TESING ON NODEJS WITH JEST AND TYPEORM----------------------

1) Run yarn add jest@26.6.3  ts-jest@26.5.4 @types/jest@26.0.21 @types/mocha 
-D.

--------------------

2) Run yarn jest --init and answer the questions, Jest will create a jest.
config.ts file in your application root. Edit this file to be like this:

export default {
    bail: true,
    clearMocks: true,
    coverageProvider: "v8",
    preset: 'ts-jest',
    testEnvironment: "node",
    testMatch: ["**/*.spec.ts"],
};

--------------------

3) In you modules/useCases/useCaseActionFolder create a new file named as 
YourUseCase.spec.ts (ex: CreateUserUseCase.spec.ts) and write your test. Ex:

--------------------

4) Run yarn test to run your test

===============TESTING REPOSITORY CLASSES WITH TYPEORM AND JEST===============

1) Create a class repostory to work with data in memory inside modules/reposi-
tories. This class should work with the entity data format and to contain all 
methods to test. Ex:

import { Category } from "../../entities/Category";
import { ICategoriesRepository, ICreateCategoryDTO } from "../ICategoriesRe-
pository";

class CategoriesRepositoryInMemory implements ICategoriesRepository {

    categories: Category[] = []

    async create({ name, description }: ICreateCategoryDTO):Promise<void> {
        const category = new Category()
        Object.assign(category, { name, description })
        this.categories.push(category)
    }

    async list(): Promise<Category[]> {
        return this.categories
    }

    async findByName(name: string): Promise<Category> {
        const category = this.categories.find(c => c.name === name);
        return category
    }

}

export { CategoriesRepositoryInMemory }

-----------------------

2) In your useCaseTest file, instance the type of your method and the 
repository base type and put these inside a beforeEach function returning 
a new instance of these classes and then write your test. Example:

import { CategoriesRepositoryInMemory } from "../../repositories/in-memory
-tests
/CategoriesRepositoryInMemory"
import { CreateCategoryUseCase } from "./CreateCategoryUseCase"

let createCategoryUseCase: CreateCategoryUseCase
let categoriesRepositoryInMemory: CategoriesRepositoryInMemory

describe('CreateCategory', () => {

    beforeEach(() => {
        categoriesRepositoryInMemory = new CategoriesRepositoryInMemory()
        createCategoryUseCase = new CreateCategoryUseCase(
	categoriesRepositoryInMemory)
    })


    it('should be able to create a new category', async () => {

        const category = { name: 'Pablo', description: 'Some person' }

        await createCategoryUseCase
            .execute(category)

        const createdCategory = await categoriesRepositoryInMemory
            .findByName(category.name)

        expect(createdCategory).toHaveProperty('id')
    })

})

--------------------------TEST JEST EXAMPLES-----------------------------------

    it('should be able to create a token', async () => {

        const fakeUser = {
            name: 'Jhon',
            username: 'jhon',
            email: 'jhon@gmail.com',
            password: '12345',
            driver_license: '12345'
        }

        await createUserUseCase.execute(fakeUser)

        const result = await authenticateUserUseCase.execute({
            email: fakeUser.email,
            password: fakeUser.password
        })

        expect(result).toHaveProperty('token')
    })

    it('should not be able to authenticate a none existent user ', 
    async () => {
        await expect(
            authenticateUserUseCase.execute({
                email: 'some@gmail.com',
                password: '123',
            }),
        ).rejects.toEqual(new AppError('User does not exists'));;
    });

    it('should not be able to authenticate a with wrong password', 
        () => {
	     const fakeUser = {
                name: 'Jhon',
                username: 'jhon',
                email: 'jhon@gmail.com',
                password: '12345',
                driver_license: '12345'
            }

            await createUserUseCase.execute(fakeUser)

        await expect(  await authenticateUserUseCase
                .execute({ email: fakeUser.email, password: 'incorrect' })
	.rejects.toEqual(new AppError('Wrong password'));
    })


------------------

(testing email sending)

import { UsersRepositoryInMemory } from "@modules/accounts/repositories/in-memory-tests/UsersRepositoryInMemory";
import { DateProvider } from "@shared/container/providers/DateProvider/implementations/DayJSDateProvider";
import { AppError } from "@shared/errors/AppError";
import { SendForgottenPasswordMailUseCase } from "./SendForgottenPasswordMailUseCase";

let sendForgotPasswordMailUseCase: SendForgottenPasswordMailUseCase;
let usersRepositoryInMemory: UsersRepositoryInMemory;
let dateProvider: DateProvider;
let usersTokensRepositoryInMemory: UsersTokensRepositoryInMemory;
let mailProvider: MailProviderInMemory;

describe("Send Forgot Mail", () => {
  beforeEach(() => {
    usersRepositoryInMemory = new UsersRepositoryInMemory();
    dateProvider = new DateProvider();
    usersTokensRepositoryInMemory = new UsersTokensRepositoryInMemory();
    mailProvider = new MailProviderInMemory();

    sendForgotPasswordMailUseCase = new SendForgottenPasswordMailUseCase(
      usersRepositoryInMemory,
      usersTokensRepositoryInMemory,
      dateProvider,
      mailProvider
    );
  });

  it("should be able to send a forgot password mail to user", async () => {
    const sendMail = spyOn(mailProvider, "sendMail");

    await usersRepositoryInMemory.create({
      driver_license: "664168",
      email: "avzonbop@ospo.pr",
      name: "Blanche Curry",
      password: "1234",
    });

    await sendForgotPasswordMailUseCase.execute("avzonbop@ospo.pr");

    expect(sendMail).toHaveBeenCalled();
  });

  it("should not be able to send an email if user does not exists", async () => {
    await expect(
      sendForgotPasswordMailUseCase.execute("ka@uj.gr")
    ).rejects.toEqual(new AppError("User does not exists!"));
  });

  it("should be able to create an users token", async () => {
    const generateTokenMail = spyOn(usersTokensRepositoryInMemory, "create");

    usersRepositoryInMemory.create({
      driver_license: "787330",
      email: "abome@regrog.ee",
      name: "Leon Perkins",
      password: "1234",
    });

    await sendForgotPasswordMailUseCase.execute("abome@regrog.ee");

    expect(generateTokenMail).toBeCalled();
  });
});


-------------------------------GENERAL TIPS------------------------------------

Use the method spyOn of Jest to expies if an method of a class has been called, 
it's useful for deal with third libraries, like library for send e-mails.

You can to add the flag --runInBand --detectOpenHandles in the test scripts to 
run it sequentially and avoid a test breaks because a previous test result.

Don't work with databases on unity tests, create a new epoitory with an empty
arrayto simulate tests.




