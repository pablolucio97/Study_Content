======================WORKING WTH COOKIES ON FASTIFY=========================

Cookies are a information that can be read in the response of the request, 
and are useful to identify who is sending a request still this user is not 
authenticated and share context between applications using the user browser 
or client.

1) Run yarn add @fastify/cookie

------

2) Import and use the cookie from  @fastify/cookie in your server.ts file. 
This importation must come before your routes usage. Ex: 

import cookie from '@fastify/cookie'
import fastify from 'fastify'

const app = fastify()

app.register(cookie)

app.register(transactionsRoutes, {
  prefix: 'transactions'
})

------

3) On your route check if the cookie exist, otherwise create it through 
rep.cookie passing a name, the value and an object configuration containing
the routes can read the cookie and its maxAge. Ex:

export async function transactionsRoutes(app: FastifyInstance) {
    app.post('/', async (req, rep) => {

        //SCHEMA FOR ZOD REQUEST BODY VALIDATION
        const createTransactionBodySchema = Zod.object({
            title: Zod.string(),
            amount: Zod.number(),
            type: Zod.enum(['credit', 'debit'])
        })

        //VALIDATES IF THE RECEIVED BODY IS VALID, OTHERWISE THROWS AN ERROR
        const { title, amount, type } = createTransactionBodySchema.parse(req.body)

        //READ sessionID
        let sessionId = req.cookies.sessionId

        if(!sessionId) {
            // IF sessionId DOESN'T EXISTS ASSIGN A randomUUID() TO IT
            sessionId = randomUUID()
            // RETURNS ON RESPONSE A NEW COOKIE NAMED AS sessionId READABLE FOR ALL ROUTES
            rep.cookie('sessionId', sessionId, {
                path: '/',
                maxAge: 1000 * 60 * 60 * 24 * 7 // 7 DAYS
            })
        }

        //INSERTS A NEW TRANSACTION INTO TRANSACTIONS
        await knex('transactions').insert({
            id: randomUUID(),
            title,
            //INSERT THE AMOUNT VALUE AS CREDIT OR DEBIT
            amount: type === 'credit' ? amount : amount * -1,
            session_id: sessionId
        })

        return rep.status(201).send()
    })

}

--------

4) Create a middleware to check if the sessionId exists inside req.cookies and return an error 
case afirmativie, otherwise app follows its flow. Example:

import { FastifyRequest, FastifyReply } from 'fastify'

export async function checkSessionIdExists(req: FastifyRequest, rep: FastifyReply) {
    const sessionId = req.cookies.sessionId

    if (!sessionId) {
        return rep.status(401).send({
            error: 'Unauthorized'
        })
    }
}

--------

5) In your route, pass an object as second param and pass a property called "preHandler" and pass
your middleware inside the array. Do a filter to your operation be filtred by the sessionId. Ex:

import { checkSessionIdExists } from "middlewares/checkSessionIdExists"

    app.get('/total', {
        preHandler: [checkSessionIdExists]
    }, async (req) => {
        const { sessionId } = req.cookies
        //GET THE SUM OF ALL TRANSACTIONS
        const totalTransactions = await knex('transactions')
            .where('session_id', sessionId)
            .sum('amount', { as: 'amount' }).first()
        return { totalTransactions }
    })

