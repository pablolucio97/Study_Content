===========================DOMAIN DRIVEN DESIGN CONCEPTS==============================

- Domain: The domain refers to a set of fundamental concepts, rules, processes, and 
behaviors for a specific business or application, crucial for developing software t
hat meets business needs.

Ex: In an e-commerce application, the domain includes concepts like customers, 
orders, and products, each with its rules and behaviors, such as placing an order or 
adding a new product.

---------------------------------

- Domain Experts: It's a people that works in the business you're developing a 
system and has a big understood of the business.

Ex: A receptionist from a hospital or hotel.

---------------------------------

- Use cases: Use cases describe the functional requirements of a system,
 illustrating specific interactions between the user and the system. 

 Ex: In an e-commerce application, we have createOrder use case and listUserOrders 
 use case.

---------------------------------

- Aggregates: An Aggregate is like a family of related objects in a software 
system, treated as a single unit. An aggregate is executable together with the 
root entity.

Ex: In a blogging platform, a ‘Post’ aggregate might include entities like 
‘Comments’ and ‘Tags’, with the ‘Post’ being the aggregate root, ensuring 
consistency across all related comments and tags.

Ex2: Considering a ‘ShoppingCart’ in an online store as an aggregate. The 
‘ShoppingCart’ is the aggregate root, and the items in the cart are the related 
objects. You interact with the items through the ‘ShoppingCart’, ensuring that 
the actions like adding or removing items are consistent and the total price is 
correctly calculated.

---------------------------------

WatchedList: WatchedList is a collection of data that depends on another info 
to be correctly handle on the database. Example: At editing a post in a forum,
this post can contains attachments that are an array of objects, so we need 
map information for create/delete/update operations for each attachment.

---------------------------------

- Ubique language: Ubiquitous language is a technique involving a common language 
understood by both developers and domain experts to describe and understand domain 
concepts and processes. It should be incorporated into the software’s source code 
and related documents.

In a healthcare app, developers and healthcare professionals might use terms 
like “Patient”, “Appointment”, and “Prescription” to have a shared understanding 
of the domain concepts.

---------------------------------

- Value Objects: Are properties of an entity that contains it own business rules.
This property should be represented by another class. Ex: the structure a 
slug.

Ex: In a travel app, a ‘Location’ could be a value object, defined by attributes 
like latitude and longitude, without needing a unique identifier.

---------------------------------

- Entities: Entities are domain objects representing crucial business concepts.
Entities represent the main abstractions of the domain, and their correct modeling 
ensures the software accurately reflects business rules and behaviors.

Ex: In a banking application, an entity could be a ‘Customer’ with a unique
 customer ID, having behaviors like opening an account or making transactions.

---------------------------------

- Subdomains (bounded context):

Bounded Context is a technique for defining explicit boundaries around a set of 
domain models, separating specific domain models with their own rules, terms, and 
boundaries from others within the same system. It helps avoid confusion between 
different business concepts, reduces system complexity, and allows each context 
to have its own architecture, design patterns, and technologies.

Ex: In a school management system, you might have a ‘Grading’ bounded context with 
its rules and terms about grading students, and a separate ‘Attendance’ bounded 
context with its rules and terms about tracking student attendance. Each context 
operates independently but can communicate with others when needed.

---------------------------------

- Domain events:

A domain event is an asynchronous notification indicating that something significant 
has occurred within the system's domain. It allows different parts of the system to 
be notified and updated when significant changes occur in the domain

Ex: In an online auction system, a ‘BidPlaced’ event could be triggered when a 
bid is placed, notifying other parts of the system to update the current highest 
bid and inform other bidders.

------------------------------GENERAL TIPS--------------------------------------

At developing a new system, the development flow must be: Entity => Repository 
=> UseCase => Controller => Routes => Server.

The coder is not the domain expert. Listen to the real domains experts of the 
business you'll develop the software.

You need couple conversations to get the domain's expert pains and develop a 
good system.

You need to think and develop your system on layers where the internal layers 
(entities and use cases) are independent of external context (controllers).

Create a readme.md listing all domain's expert pains to know witch entities 
and use cases your application needs.

Sometimes a entity is not a table in the database, but an object to understand
well the code.

Do not use the same use case for two different entities because rules can 
change and you'll have conflict in the future.

Our system core (entities and use cases) needs repositories to connect to
the external world assigning contracts containing the methods needed for each 
use case.

If you're developing a system will be used on web (and not mobile) you need 
to provide a slug for each entity (do not use the entity id).
















