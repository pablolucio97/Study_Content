==================================NODE COURSE===================================

Node is an open source platform that allow execution of the JavaScript on the 
Server side. It was built using V8 + LIBUV and other modules. The Node is sin-
gle thread, but this unique thread is the event loop that is responsible for 
listen to and redistribute the functions inside the call stack to be executed 
on another 4 threads, that allow that the functions can be executed asynchro-
nously.Node has with native modules, like Https, FS, Dns, Buffer and others.


-------------------CUSTOMING ERRORS ON NODEJS APPLICATIONS----------------------

1) Install the express-async-errors running yarn add express-async-errors.

--------------------

2) Inside the src folder, create a new folder named as errors and inside this, 
create a file named as AppError and inside this export a class named as AppError 
passing a message and a statusCode as properties. Example:

export class AppError{
    public readonly message: string
    public readonly statusCode: number;

    constructor(message: string, statusCode = 400){
        this.message = message;
        this.statusCode = statusCode;
    }
}


--------------------

3) In your application uses the AppError class to deal with errors. Example:

if (userAlreadyExists) {
    throw new AppError('User already exists', 401);
}

--------------------

4) In the server.ts file import the express-async-errors and before app.listen,
define a custom middleare to deal with all errors on your application. Example:

import express, { json, NextFunction } from 'express';
import 'express-async-errors'

import { AppError } from "./errors/AppError";

const app = express();

app.use(json())

app.use((
    err: Error,
    req: express.Request,
    res: express.Response,
    next: NextFunction
) => {

    if (err instanceof AppError) {
        return res.status(err.statusCode).json({
            message: err.message
        })
    }

    return res.status(500).json({
        status: 500,
        message: `Internal server error: ${err.message}`
    })

})

app.listen('3333', () => {
    console.log('listening on 3333');
})

---------------------------------STREAM----------------------------------------

Stream is the techinic of handling big files and process small pieces of 
theses files (chunks) and use these chunks according the application needs 
before the entire file is available.

Type of streams:

Readable stream: Are streams where the back-end receive data in small pieces 
from the front-end. Ex: Front-end is uploading a file to the server or 
reading a file from the database.

Writables stream: Are streams where the back-end sent the data in small pieces 
to the front-end. Ex: Streams platform like Twitch server chunks of a video 
that are loading by the browser or doing an insertion into a database.

Using Streams


import { Readable } from "node:stream";

class OneToHundredStream extends Readable {
  index = 1;
  //_read() method is required in a Readable class
  _read() {
    const i = this.index++;
    setTimeout(() => {
      if (i > 100) {
	//push here refers to Readable class
        this.push(null);
      } else {
	//Buffer only accepts strings
        const buff = Buffer.from(String(i));
	//Every chunk should be in Buffer format
        this.push(buff);
      }
    }, 100);
  }
}

new OneToHundredStream().pipe(process.stdout);


-------------------------------------------------------------------------------

Stateless application: Doesn't save anythiing in memory. Use databases.

Statefull application: Use the computer memory to save data and refresh the 
memory value at server restarting. Use arrays to store data.

-------------------------------------------------------------------------------

At working with Nodejs, the server can not return a response as an array. The 
response must be a string or an object (like JSON).

-------------------------------------------------------------------------------

Set the header response as content type Application/json to your response 
return the data like a JSON structure. Ex:

http.createServer((req, res) => {
	const myData = queryResult
	return res.setheader('Content-type' , 'application/json')
	.end(JSON.stringify(myData)
})

-------------------------------------------------------------------------------

Everything a user type into a NodeJs terminal is a process.stdin that will be 
processed and returned as process.stdout.

