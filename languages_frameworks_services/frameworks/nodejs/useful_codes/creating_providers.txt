----------------------CREATING PROVIDERS TO USE IN YOUR APPLICATION----------------------

At working with databases, isn't a good practice put third libs together with your use-
Cases and controllers, for this sort your proivders (works like utils) separately. Ex:

1) Inside shared/container, create a new folder named as providers and inside this a new 
folder for your library name and inside this an interface for your implementation. Ex:


interface IDateProvider {
    compareInHours(start_date: Date, end_date: Date): number;
    convertToUTC(date: Date): string;
    dateNow(): Date;
}

export { IDateProvider }

--------------

2) Inside shared/container/providers, create a folder named as implementations and insi-
this create a new file named as YourLibraryNameProvider.ts containing the implementation 
and logic of your provider. Ex:

import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'

dayjs.extend(utc)

import { IDateProvider } from "../IDateProvider";

class DayJSDateProvider implements IDateProvider {
    dateNow(): Date {
        return dayjs().toDate();
    }
    
    compareInHours(start_date: Date, end_date: Date): number {
        const end_date_utc = this.convertToUTC(end_date);
        const start_date_utc = this.convertToUTC(start_date);
        return dayjs(end_date_utc).diff(start_date_utc, 'hours');
    }

    convertToUTC(date: Date): string {
       return dayjs(date).utc().local().format()
    }

}

export { DayJSDateProvider }


--------------

3) In your application, in the specific useCase, initialize this provider inside your 
constructor method. Example:

import { IDateProvider } from "@shared/container/providers/DateProvider/IDateProvider";

class CreateRentalUseCase {

    constructor(
        private dateProvider: IDateProvider
    ) { }

    async execute({
        car_id,
        user_id,
        expect_return_date
    }: IRequest): Promise<Rental> {

        const dateNow = this.dateProvider
	  .dateNow()
        const compare = this.dateProvider
	  .compareInHours(dateNow, expect_return_date)

        const rental = await this.rentalsRepository.create({
            user_id,
            car_id,
            expect_return_date
        })

        return rental
    }
}

export { CreateRentalUseCase }
