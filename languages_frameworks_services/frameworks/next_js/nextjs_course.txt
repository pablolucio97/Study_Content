===============================NEXT JS=======================================

------------------------------DEFINITION-------------------------------------

Next.js is a React framework that is used to handle the user interaction
with the back-end where the Next renderizes a html page for the user by 
accordgin with your requests instead of an SPA. The final appication done 
with next can be deployed by SSG, SSR or ISR.

-------------------------------CONCEPTS--------------------------------------

SSG:
Static Site Generation: In this method, the files of the application after 
having been built are available for the client statically through a server.
Used with getStaticProps function, requires getStaticPaths if as a dynamic.

-----------------------------------------------------------------------------

SSR:
Server Side Generation. In this approach, the Next rebuild your application 
rendering again for the client with the new changes.
Used with getServerSideProps function, don't be used together with getStatic-
Props or getStaticPaths.

-----------------------------------------------------------------------------

ISG:
Incremental Static Generation. In this method, have a built of your project 
in the Next server thus is possible to rerendering the application after a 
time programmed.

------------------------CREATING A NEW NEXT PROJECT--------------------------

1) Run the command yarn create next-app name-of-application.

2) Install the typescript and your depenecies:
yarn add typescript @types/react @types/react-dom @types/node -D

3)Rename the files _app.js and index.js to _app.tsx and index.tsx inside 
the folder pages.

4)If there is, remove the importation of globalstyles.css file and delete it.

5)Run yarn dev to start the application.

6)If you will to use Styled Components, run yarn add styled-components.

7)Install the Babel for Styled components runnig babel-plugin-styled-components 
and create a .babelrc in the root of the project with settings:

{
  "presets": ["next/babel"],
  "plugins": ["styled-components"]
}

8) Replace the content of the files _app and _document.js to the content of
the correspondent files on the repo https://github.com/vercel/next.js/tree/
canary/examples/with-styled-components. Rename the files app.js and index.js 
to .tsx and maintain _document.js.


--------------------------PROJECT FOLDER STRUCTURE---------------------------

project-folder/node_modules|.next|public > favicon | src > pages|compo-
nents|styles

------------------------------MAIN DEFAULT FILES-----------------------------

_app.tsx: Is where the global style is added and return the main compo-
nent of the application.
index.tsx: Is the default file read by the browser. Here you put your 
components and pages.
_document.tsx: Stores the statics scripts like link tags and scripts fo-
llowing the HMTL default pattern.

Examples:

_app file:


import '../styles/global.css'

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp

-----------------------------------------------------------------------------

index file:

import MyComponent from '../components/MyComponent'


export default function Home() {
  return (
    <div className='container'>
          <MyComponent />
    </div>
  )
}


-----------------------------------------------------------------------------

_document file:

import Document, { Html, Head, Main, NextScript } from 'next/document'

export default class MyDocument extends Document {
    render() {
        return (
            <Html>
                <Head>
                 <link rel="preconnect" href="https://fonts.gstatic.com" />
                 <link href="https://fonts.googleapis.com/css2?family=Inter
                 :wght@300;400;500;600&family=Rajdhani:wght@600&display=swap"
                    rel="stylesheet" />
                </Head>
                <body>
                    <Main />
                    <NextScript />
                </body>
            </Html>
        )
    }
}


-------------CONSUMING BACKEND DATA TROUGHT GETSERVERSIDEPROPS - SSR-------------

The function getServerSideProps is used to available backend data for the client 
each time the application is loaded.

1) Declares the getServerSideProps function returning the props always inside an
object named props:

export async function getServerSideProps(){
  const response = await fetch('http://localhost:3333/episodes')
  const data = await response.json()

  return {
    props: {
      episodes: data
    }
  }

}

------------------------

2)Consume the backend data trought the props in component:

export default function Home(props) {

  return (
    <div>
      <h1>Next and React</h1>
      <p>Hello from Next</p>
      {console.log(props.episodes)}
    </div>
  )
}


-------------CONSUMING BACKEND DATA TROUGHT GETSTATICPROPS - SSG---------------

The function getStaticProps is used to available backend data trought static 
HMTL for the client  with a interval ms time programed in the 'revalidate' ob-
ject prop. This resource only works in production mode, you need to generate the
build your application.

1) Declares the getSyaticProps function returning the props always inside an
object named props with the revalidate time value:

export async function getStaticProps(){
  const response = await fetch('http://localhost:3333/episodes')
  const data = await response.json()

  return {
    props: {
      episodes: data
    },
    revalidate: 60 * 60 * 8
    
  }

}

------------------HANDLING DYNAMIC ROUTES WITH GETSTATICPATHS---------------------

The method getStaticPaths is a router handler of dynamic routes thats return an o-
bject ordering how the next should to render your HTML pages to build. This recei-
ves  paths and fallback (required props). Example: Inside the file [slug].tsx:

export const getStaticProps = async () => {
    return{
    paths:[
        {
            params: {slug: 'posts'}
        }
    ]
}

--------------------------------------------------------------------------------

2) Consume the backend data trought the props in component:

export default function Home(props) {

  return (
    <div>
      <h1>Next and React</h1>
      <p>Hello from Next</p>
      {console.log(props.episodes)}
    </div>
  )
}

3) Generates the build of your application turning-off the server, executing 
yarn build and reopening your app trought yarn start.


------------------------------USING NEXT IMAGES--------------------------------

The resource of Images in Next is useful to reduce the image size from consu-
ming and rederezing more performaticly returning images.webp instead of .png
or other format.

1)Create the file next.config.js in the root of your project with the config:

module.exports = {
  reactStrictMode: true,
  images: {
    domains: ['youtube-clone-next-videos-bucket.s3.sa-east-1.amazonaws.com'],
    deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  },
}


--------------------------------------------------------------------------------

2)Import and use in your component:

import Image from 'next/image'

export default function Home() {
  
  return (
    <div>
      <section> 
        <Image 
        width={192}
        height={192}
        src='test.png'
        alt='Some test'
        objectFit='contain'
        layout='intrinsic'
        />
      </section>
      </div>
    )
    
--------------------------------------------------------------------------------

3)Restart the server.

---------------------------DOING NAVIAGATION IN NEXT-----------------------------

Primarily the Next always try to search a route that is inside the pages folder,
if not exists, the next render the content of the [slug] file (if exists) or a 
404 page (if [slug] doesn't exists).

Naviagation without slug:

1)Put the files that will be navigated in your application inside the folder pa-
ges.

--------------------------------------------------------------------------------

Naviagation with slug:

1)Create a folder with the route name will be navigated in your application inside 
the folder pages. Ex: episodes.

--------------------------------------------------------------------------------
2)Inside the folder episodes create a new file named [slug].tsx. In this file, all 
params passed in url query will be available for consume.

--------------------------------------------------------------------------------

3)Import and use the useRouter of the next in this new file:

import React from 'react'

import {useRouter} from 'next/router'

export default function Episode() {

    const router = useRouter()

    return (
        <div>
            <p>Hello from Episode</p>
            <p>{router.query.slug}</p>
        </div>
    )
}
--------------------------------------------------------------------------------

4)Import and use the Link from Next to naviagte to the url slug ex:

import Link from 'next/link'

<Link href={`/episodes/${episode.id}`}>
    <a>{episode.title}</a>
</Link>

----------------------GETTING HOOKS VALUE OUTSIDE COMPONENTS-----------------------

To use hooks values inside functions outside the component you should to receive a
param in this function and access the hook value trought destructurezation of  pa-
ram.params, example:

export const getStaticProps: GetStaticProps = async (ctx) => {

    const {slug} = ctx.params

    const { data } = await api.get(`episodes/${slug}`)

    return {
        props: {
            revalidate: 60 * 60 * 24, //24hrs
        }
    }
}

----------------------------GENERATING STATIC SITES-------------------------------

1)After your site is finished, run  yarn next build to create the build of your pro-
ject. The next will generates a log for your build (here your need a server to see
your application).

2)In the package.json create a new command: "export" : "next export".

3)Run the new command npm run export to export your static page to a new folder na-
med "out" (here your don't need a server).

4)You can open your file locally.

-----------------------------EXPORTING YOUR PROJECT-------------------------------

At exporting your project you will get the static files of each page of your pro-
ject which you can store it in another server or use it without need a server or
localhost. You can't export your pages when fallback is true. Proccess:

1) Create the script of expor in your packge.json adding in scripts the code:
"export": "next export".

2)Inside the file .next.config.js, added a new prop images with the next loader 
config:

  images: {
    loader: "imgix",
    path: "https://noop/",
  }
  
3)Run your build with the code yarn run build and starts your application with
 yarn run star.
 
4)Run yarn run export for export your project.

-------------------GETTING DATA FROM STATIC PROPS WITH TYPESCRIPT----------------

The getStaticProps is used for get/provide data for pages that are indexed in the
pages folder. Example:

1)Create a getStaticProps function to get/provide the data for your component 
returnnig an object named "props":

export const getStaticProps : GetStaticProps = () => {
    return{
        props:{
            name: 'Pablo'
        }
    }

}


--------------------------

2)Consume it in your component:


import { GetStaticPaths, GetStaticProps } from "next";


type Naming = {
    name: string
}

export default function Home({name} : Naming){
    return(
        <p>Hello, {name}</p>
    )
}

-----------GETTING DATA FROM STATIC PROPS IN DYNAMIC FILES WITH TYPESCRIPT------------

The getStaticProps is used together with getStaticPaths for get/provide data for 
pages that aren't indexed in the pages folder. Slugs. In this case, the data will 
only available on "challenges" route. Example:


1)Create a getStaticProps function to get/provide the data for your page 
returnnig an object named "props":

export const getStaticProps : GetStaticProps = () => {
    return{
        props:{
            name: 'Pablo'
        }
    }

}

--------------------------

2)Create a getStaticPaths function to get/provide the data for your component 
returnnig an object named "props":

export const getStaticPaths : GetStaticPaths = () => {
    return{
        paths: [{
            params: {
                slug : 'challenges'
            }
        }],
        fallback: false
    }
}

--------------------------

3)Consume it in your component:

export default function Slug({name} : Naming){
    return(
        <p>Hello, {name}</p>
    )
}


-------GENERATING STATIC PAGES TROUGHT DYNAMIC FILES BASED ON API RESOURCES-------

In this example, static pages are available according the number of users that
there are on the API. Each page is provided accessing the user id trought the rou-
te endpoint.


1)Create a folder with the route name that you want to render dynamiclly with the
[end-point].tsx file that you will use to access the dynamic resource. Exmaple:
create a folder named users with a file [id].tsx.

2)Do the request inside the getStaticProps function and return the response for 
your component:

export async function getStaticProps(context) {

    const response = await axios.get('https://jsonplaceholder.typicode.com/users', {
        params: { id: context.params.id }
    })
    
    const user = await response.data[0]

    return {
        props: {
            user: user
        }
    }
}

3) Defines which api resource will allow acess to your routes returning the prop
as the end-point of a path. In this case was returned an array of paths where the
id is the end-point:

export async function getStaticPaths() {

    const response = await axios.get('https://jsonplaceholder.typicode.com/users')
    const users = await response.data

    const paths = users.map((user) => {
        return {params: {id: String(user.id)}}
    })

    return {
        paths,
        fallback: false

    }
}


---------------------------

4)Consume the prop exported from getStaticProps in your component:

export default function Users({ user }) {

    return (
        <div>
            <h1>Hello from users</h1>
            <h3>Current user: {user.id}</h3>
       
        </div>
    )
}

-------------------ACCESSING DYNAMIC ROUTES BASED ON CURRENT PROP------------------


1) Define the resource to provide:

export async function getStaticProps(){

    const response = await Axios.get('https://jsonplaceholder.typicode.com/users')
    const data = await response.data

    return{
        props:{
            data
        }
    }
}

-----------------------------

2) Do a map from the data received and access the route referent the user renderized 
(you should to have a folder with the name of the route end-point, in this case, a 
folder named users):

import Axios from "axios"
import Link from 'next/link'

export default function Users({data}){
return(
    <div>
        <h1>Hello from Users.</h1>
        {data.map(user => (
        <Link key={user.id} href='users/[id]' as={`/users/${user.id}`} passHref>
            <p>{user.name}</p>
        </Link>
        ))}
    </div>
    )
}


-------------RENDERING LOADING COMPONENTS ACCORDING THE FALLBACK VALUE------------

1) Define the getStaticProps and getStaticProps functions:

export const getStaticProps : GetStaticProps = () => {
    return{
        props:{}
    }

}

export const getStaticPaths : GetStaticPaths = () => {
    return{
        paths: [{
            params: {
                slug : 'any'
            }
        }],
        fallback: true
    }
}

-----------------------------

2) In your Slug component, import the prop isFallback from the useRouter() hook 
and use it to render conditionally your loading:

import { GetStaticPaths, GetStaticProps } from "next";
import { useRouter } from "next/dist/client/router";
import NotFound404 from "./404";

export default function Slug(){
   const {isFallback} = useRouter()
   if(isFallback){
       return(
           <div>
               <h1>Loading...</h1>
           </div>
       )
   }
   return <NotFound404/>
}

-----------------------------USING NEXT PROGRESS BAR-------------------------------

Next ProgressBar is a feature used for give feedback for the user 
when a page is loading.

1) Install the NextProgress running yarn add nextjs-progressbar.

2) Import and use it in your _app.tsx file. Example:

import React from 'react'
import NextNprogress from 'nextjs-progressbar'

export default function App({ Component, pageProps }) {
  return (
    <>
        <NextNprogress
          color="#29D"
          startPosition={0.3}
          stopDelayMs={200}
          height={3}
          showOnShallow={true}
        />
        <Component {...pageProps} />
    </>
  )
}

-----------------------------TYPING NEXT FUNCTIONS-------------------------------

Examples:

import axios from 'axios'
import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType } from 'next'

type User = {
    id: string;
    name: string;
}

type UserProps = {
    user?: User;
}

export default function Users({ user } : 
    InferGetStaticPropsType<typeof getStaticProps >) {
    

    return (
        <div>
            <h1>Hello from users</h1>
            <h3>Current user: {user.name}</h3>
        </div>
    )
}

export const getStaticProps : GetStaticProps<UserProps> = async (context) => {
    ...
}

export const getStaticPaths : GetStaticPaths = async () => {
    ...
}

------------------------USING DYAMIC FUNCTION IMPORTER----------------------------

Use the dynamic function to do imports of packs that need to interact with the 
window. Example:

import dynamic from 'next/dynamic'

const Chart = dynamic(() => import('react-apexcharts'), {
    ssr: false
})


---------------------------------GENERAL TIPS-------------------------------------

Storing your project assets on the public folder your files can be used in your
app without need imports.

Next uses files .modules.scss or .modules.css that constrains a style be used 
only in a unique component avoiding conflicts with another class with the same 
name in the application.

Components that will appear in whole applicaiton shoul to be stored in the 
_app.tsx.

Use getStaticProps for render static sites. If you pages are statics, you don't
need a server.

You should make request apis inside the getStaticProps, use fetch, return a json
and export it as prop.

Use trailingSlahs: true in next.config.json file for enables the next navigate 
between intern links after the page is build. This option creates a folder for 
each file and rename the current file to index turning the file readble for the 
server.

The next router system will try load files that math with the url, case negative 
it will lead slug files or finally show 404 page.

On NextJS, React components should be exported only with "export default function" 
format.

Use router.isFallback props from the useRouter hook to return and reder a loading 
component while isFallback is true. It should be used with fallback:true in 
getStaticPaths function.

When fallback is true, you can't export your pages. Only with fallback:true is 
possible to use the revalidate and access the prop isFallback from router from 
the useRouter() hook.

Using a file .env.example you can send it to GitHub and works with a example how 
to fill a .env file in your application.

If a user is in an page that has an action that requires authentication and the 
user does the authentication, redirect the user for the previous page instead of. Ex:

const redirect = router.query?.redirect || '/'
router.push(redirect as string)

You can create a folder with a endpoint name to acess slugs from it. The route 
resources can be acess trought router.query.name_of_your_slug file.

getStaticProps is a function to pass your backend props to front-end whereas 
getStaticPaths is a function to handle routes on dynamic files.

When you use dynamic routes, rename the name of the dynamic folder as same name
of another static page file if you want to share even props.

You can to use 4 types of environment variables: .env, .env.local, .env.produc-
tion and .env.development where the .env is the default. The .env is where the 
system will to search for values if don't find in the others .env files. Use 
different .env file according the stage of your project.

Don't import the css files inside the _doucment,tsx file. Import the global.scss
in app.tsx.

Use dynamic titles importing the head in each page of the application.

You can use next functions (getServerProsp, getStaticProps and etc...) in page
files. If a component need a prop from getServerProsp by example, it should be
receive from a parent page file.

The function getStaticProps should be used in static pages with universal con-
tent,  getServerSideProps in dynamic calls like if an user is logged. Client
side calls (useEffect for data fetching) should be used in actions that no ne-
eds indexation.

At working with React and Next, you can consume data from getServerSideProps,
getStaticProps and useEffect. You should to think and defines each call. A 
blog by example should has your post loaded from getStaticProps and each user
comments with useEffect.

The content and functionalities of back-end in NextJS works in serverless af-
ter the deploy (Vercel, Netlify, etc).

There are different types of authentication (NextAuth, JWT, OAuth and etc), 
you should define the authentication type according to your application. For
simples applications, you can use NextAuth.

Use JSON.stringify(your_data, null, 2) to turn cascade objects more redable,
(use in objects that containds nested arrays).

Always format your data from third API's before consuming it in your compo-
nent. Do it in Next functions (getServerSideProps or getStaticProps).

All page that is generated with getStaticProps is not protected. If you want

You can chose which pages will be generated at build passing inside the params
of paths your desired page/slug. Example:

export const getStaticPaths = () => {
    return {
        paths: [
            {params: { slug: 'my_desired_pagename/slug_to_be_static_built'}}
        ],
        fallback: 'blocking'
    }
}

Avoid to use fallback:true because it not is the ideal for SEO. The fallback:
false returns 404 page if the page don't be generated at the moment and fall-
back:blocking does the same of the fallback:true, but does it in the back-end
and should be used for load future pages.

GetStaticPaths only can be used inside dinamic pages/files (pages/files with pa-
rametrization) [slug].tsx.

The Next mounts your HTML page through the Next server, and it doesn't' has ac-
cess to the window object, thus, this throws an error in the application 
'window is not defined'. You should repair this error using the dynamic function 
from the next.


Import the regenerator-runtime from runtime (import "regenerator-runtime/runtime")
inside the [...nextauth].ts file to improve your app performance score.


