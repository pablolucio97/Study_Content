=====================NEXTJS AND MONGOGB CRUD EXAMPLE=========================

1)Create a new cluster and a new database in the https://cloud.mongodb.com. 
Connect your cluster with your application storing the secret URI and create
a new database inside your cluster to create future collections.

-----------------------

2) Install the mongodb and @types/mongodb and axios.

-----------------------

3) Configure your axios based on your api folder. Example:

import  axios from 'axios';

export const api = axios.create({
    baseURL: 'http://localhost:3000/api'
})

-----------------------

4) Create the MongoClient instance in a file inside the services folder and 
exports an async function named connectDb(). Example:

import { Db, MongoClient } from "mongodb";

interface ConnectType{
  dbConnect: Db;
  client: MongoClient
}

const uri = process.env.MONGODB_URI;
const dbName = process.env.MONGODB_DB

const client = new MongoClient(uri, {
  // @ts-ignore: Unreachable code error
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

export default async function connectDb() : Promise<ConnectType> {
  await client.connect();
  const dbConnect = client.db(dbName);
  return { dbConnect, client };
}


--------------------

5) Write your CRUD. Example:

Example:

import { NextApiRequest, NextApiResponse } from "next";
import connectDb from "../../services/mongo";
import connectToDatabase from "../../services/mongo";
import { getSession } from "next-auth/client";

connectToDatabase();

export default async (
  req: NextApiRequest,
  res: NextApiResponse
): Promise<void> => {
  const { dbConnect } = await connectDb();

  switch (req.method) {
    case "POST":
      try {
        const session = await getSession({ req });
        const {
          id,
          title,
          thumbnail,
          freetogame_profile_url,
          short_description,
        } = req.body;
        const hasFavorite = await dbConnect
          .collection("users")
          .findOne({ favorites: { id } });
        res.json({ error: "Game already exists in your lib." });
        if (!hasFavorite) {
          const response = await dbConnect.collection("users").updateOne(
            { email: session.user.email },
            {
              $push: {
                favorites: {
                  id,
                  title,
                  thumbnail,
                  freetogame_profile_url,
                  short_description,
                },
                upsert: true,
              },
            }
          );
          res.status(200).json({ success: true, data: response });
        }
      } catch (error) {
        console.error(error);
      }
      break;
    case "GET":
      try {
        const session = await getSession({ req });
        const favorites = await dbConnect
          .collection("users")
          .findOne({ email: session.user.email });
        res.status(200).json({ favorites });
      } catch (error) {
        console.log(error);
      }
      break;
    case "DELETE":
      try {
        const { id } = req.body;
        const session = await getSession({ req });
        const deletedFavorite = await dbConnect.collection("users").updateOne(
          { email: session.user.email },
          {
            $pull: {
              favorites: { id },
            },
          }
        );
        res.status(200).json(deletedFavorite);
      } catch (error) {
        console.log(error);
      }
      break;
    default:
  }
};


_______________

6) Access your CRUD operations according desired in your application. Example:

    //POST
    async function newFavorite(id, title, freetogame_profile_url, thumbnail, short_description) {
        try {
            await api.post('/favorites', { id, title, freetogame_profile_url, thumbnail, short_description })
            .then((res) => {
               console.log(res)
            })
        } catch (error) {
            console.log(error)
        }
    }

    //GET
        async function getFavorites() {
        const { data } = await api.get('/favorites')
        const favorites = data
        setFavoriteGames(favorites)
    }

    //DELETE
   async function removeFavorite(id) {
        //@ts-ignore
        await api.delete('/favorites', { data: { id: id } }).then((res) => {
            console.log(res)
        })
    }



--------------------------------GENERAL TIPS--------------------------------------

All CRUD operations in NextJS should be done in the api/yourroute folder.

Desctrucuture {req} from getSession({req}) to have access of the current session
data at server side.