--------------------------MAIN REACT PATTERNS---------------------------


-------------------

--- Destructuring objs props Pattern 

let person = { name: "chantastic" };
let { name } = person;

-------------------

--- Destructuring arrays Pattern 

let things = ["one", "two"];
let [first, second] = things;

-------------------

--- JSX rest spread Pattern 

This patterns provides all resting object's properties of an object. 
It's useful for getting all elements properties when creating a proxy
component. Example:

import { CSSProperties, InputHTMLAttributes, ReactNode } from 'react';

import { Container, IconContainer, Input } from './styles';

interface Props { }

export interface EmailInputProps extends InputHTMLAttributes<Props> {
    inputStyle?: CSSProperties;
    inputClassName?: string;
    icon?: ReactNode;
}

export const EmailInput = ({
    inputStyle,
    inputClassName,
    icon,
    ...rest
}: EmailInputProps) => {
    return (
            <Input
                style={inputStyle}
                className={inputClassName}
                type='email'
                required
                {...rest}
            />
    )
}

-------------------

--- Spread merge arrays Pattern 

This pattern is useful for concatening arrays or altering an object 
maintaining all other object props. Examples:

const letters  = ['a', 'b', 'c']

let allLetters = []

allLetters = [...letters, ...allLetters]

-------------------

--- Spread merge objs Pattern 

This pattern is useful for concatening arrays or altering an object 
maintaining all other object props. Examples:

const persons = [
    {
        name: 'Pablo',
        isDeveloper: true
    },
       {
        name: 'Fulan',
        isDeveloper: false
    },
       {
        name: 'Cyclan',
        isDeveloper: false
    },
]

const allMarried = persons
  .map( p => p.isDeveloper ? p : {...p, isDeveloper: true})

-------------------

--- JSX Conditional rendering Pattern 

Useful for render React elements according to expected results. 
Examples:

{
  condition && <span>Rendered when `truthy`</span>;
}

---

{
  condition || <span>Rendered when `falsy`</span>;
}


---

{
  condition ? (
    <span>Rendered when `truthy`</span>
  ) : (
    <span>Rendered when `falsy`</span>
  );
}



-------------------

--- Function as Children Pattern 

Pattern where a function is renderized as a ReactElement. 
Example:

const ChildrenComponent = () => (
    <div>Children</div>
)

export default function ParentComponent() {
  return ChildrenComponent
}

-------------------

--- Proxy Component Pattern

Pattern of creating components that will be used repeated times through 
the application.

import { CSSProperties, InputHTMLAttributes, ReactNode } from 'react';
import { Input } from './styles';

export const EmailInput = () => {
    return (
        <Input
            type='email'
            required
        />
    )
}


-------------------

--- Controlled Input Pattern

This pattern uses the own  event handler to update the state of an in-
put. The problem with this pattern is that a new renderization happens 
at each input changes. Example:

import React, { useState } from 'react';

export function Input() {

    const [name, setName] = useState('')

    return (
        <input
            onChange={e => setName(e.current.value)}
        />
    )
}

--- Uncontrolled Input Pattern

This pattern is applied when we're using third libs like "React Hook 
Form" to control our inputs.

-------------------

--- High Order Component Pattern

This pattern is applied when we're using states and props from 


-------------------

--- State Hoisting Pattern


---------------------------REACT STRATEGIES-----------------------------

Hook useEffect with conditionals for re-rendering on only specific si-
tuations.

SetTimout with boolean loading for wait for handling requests.

Conditional render calling all renderFunctions on JSX.


----------------MAIN REACT PROBLEMS AND POSSIBLE SOLUTIONS--------------

Update a state based on previous state rather that current state:

- Do a shallow copy of the state using spread operator and then update
the state.

- Use a callback function to update the state. 
Ex: prevState => setState(prevState).

------------

Don't view the expected result of a function, just after a new render:

- Force a new render calling this function inside useEffect() based on 
strong conditionals for this function be called only in a quite speci-
fic situation.

------------

Unsatisfactory renderization or side effects:

- Check the useEffects hooks conditionals and dependence array.

- Check the useEffects hooks execution order.

- If possible, refact your code reducing the amount of states in your 
application.

- If you're working with data that is handled by the front-end, avoid 
to put it in separated screens, always is possible, handle the data 
from the same state.

Avoid creating a state for everything. React state keeps a track of the
data. The more states you use, the more data you have to keep track of 
acorss your application.

Use the hook useRef for handle imperatively html and native elements 
like Inputs, TextInputs, CheckBox, and so on.




