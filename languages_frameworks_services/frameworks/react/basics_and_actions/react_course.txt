If have some library in your package.json with "^" it's  means that the dependecy is 
the most recent and can change with time. If you desires that the lib don't updated 
remove  the "^" character. Ex: "some-cool-lib": "^0.4.2" => "some-cool-lib": "0.4.2".

--------------------------------------------------------------------------------------

Have and organize your constants for entire app. Have constants for messages, numbers, 
data and colors. Have an modularizated app

--------------------------------------------------------------------------------------

Use the memo from React when you have pure components or, components that re-renders 
too many times or the component is too big.


--------------------------------------------------------------------------------------

You can acces input's value directly passing the prop `name` for it. 

Example:

<input type="text" name="test">

function handleInput(e: FormEvent){
  const newValue = e.target.test.value
  setValue([...values, newValue])
}

--------------------------------------------------------------------------------------

React uses declarative programation to handle states whereas Vanilla JavaScript uses 
imperative programation. 

Example declarative programation:

function handleInputChange(e: FormEvent){
  const inputCurrentValue = e.target.test.value
  setInputValue(inputCurrentValue)
  setInputValue('')
}


<input type="text"
 value={inputValue}
 onChange={handleInputChange}
 name='test'
 />

-------

Example imperative programation:

const input = document.getElementById('test')
let myName = ''

function handleInput(){
    myName = input.value
    console.log(myName)
}


--------------------------------------------------------------------------------------

Prefer to write a function isolatedly and pass this function on your button or ano-
ther component istead of call the function directly in the component by performance 
and ligibility reasons.


--------------------------------------------------------------------------------------

Always tells TypeScript which element is triggering an envent. 

Example (an input inside a form):

function handleInputChange(e: FormEvent<HTMLInputElement>){
  //your code
} 

<form>
  <input onChange{handleInputChange}/>
</form>


--------------------------------------------------------------------------------------

You can use a trick of pass a state to a component key to force a new render changing 
the state linked to this key.

--------------------------------------------------------------------------------------

Always as possible, isolates all logics of your code, for fetching data e etc. Use ho-
oks for it. Ex: useFetch, useCopyToClipboard and others.

--------------------------------------------------------------------------------------

Check if its really needed to create a new state is necessary, sometimes you can use variables 
to store a value.

--------------------------------------------------------------------------------------

At using fetch Api to handle requests, you must grant your application send the 
method, headers and the body (in string format). Ex:

 async function handleSignUp({ name, email, password }: FormDataProps) {
    setLoading(true)
    try {
      await fetch('http://localhost:3333/users', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, email, password })
      })
        .then(res => res.json())
        .then(data => console.log(data))
    } catch (error) {
      console.log(error)
      setLoading(false)
    } finally {
      setLoading(false)
    }
  }

--------------------------------------------------------------------------------------

Do not create Inputs components with a fixed ref. Create exporting as forwardedRef to 
allow the ref be manipulated according the application needs.

--------------------------------------------------------------------------------------

To use context functions or hooks in files that are not returning a React function 
(.tsx files) you need to create a function in your context/hook that returns another 
function to be used in this not .tsx file.

--------------------------------------------------------------------------------------

The major difference between useLayoutEffect and useEffect is that useLayoutEffect 
will block the browser from painting until your code inside useLayoutEffect completes 
and useEffect doesn't.

