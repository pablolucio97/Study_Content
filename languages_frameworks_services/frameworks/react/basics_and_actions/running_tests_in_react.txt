=====================WORKING WITH TESTS IN REACT/NEXT=========================

-----------------------TYPES OF TESTS AND CONCEPTS----------------------------

Unity tests: Are tests that tests only a single function, class, or component 
separated from the application. If this function or component is integrated or 
depends of actions bonded with features of the application, it receives the 
name of Mock.

Automatizated tests: 

Test Driven Development (TDD): Is the practice of write test before to create 
your application.

Integration tests: This type of test will to test the integration of a compo-
nent with another or another functionality.

E2E (end to end) tests: Are tests that tests each point of the flow of an ac-
tion.



----------------------------DOING UNITY TESTS---------------------------------

1)Install the Jest and the React Testing Library running: 
yarn add jest jest-dom @testing-library/jest-dom @testing-library/dom 
@testing-library/react babel-jest identity-obj-proxy ts-jest -D  


------------------------------------------------------------------------------

2)In the root of your project, create a new file named jest.config.js with the
configs:

module.exports={
    testPathIgnorePatterns: ["/node_modules", "/.next"],
    setupFilesAfterEnv: ["<rootDir>/src/tests/setupTest.ts"],
    trasform: {
        "^.+\\.(js|jsx|ts|tsx)$" : "<rootDir>/node_modules/babel-jest"
    },
    moduleNameMapper: {
        "\\.(css|scss|saas)$" : "identity-obj-proxy"
    },
    testEnvironment: 'jsdom'
}
------------------------------------------------------------------------------

3)Create a new folder named tests and inside this a new setupTest.ts file 
with the statements:

import '@testing-library/jest-dom'
import '@testing-library/jest-dom/extend-expect';

------------------------------------------------------------------------------

4)In the root of your project, create a new file named babel.config.js with the
configs:

module.exports={
    presets: ['next/babel']
}

------------------------------------------------------------------------------

5)Create a folder named test with your test file_name.spec.tsx and write your 
test. 

Exmaple 01: In this example has three tests to check functionalities rely to 
Button component.

import {fireEvent, render, screen} from '@testing-library/react'
import {Button} from './index'

describe('<Button/>', () => {
    it('should render the button with the text', () => {
        render(<Button text='load more'/>)
        const button = screen.getByRole('button', {name: /load more/i})
        expect(button).toBeInTheDocument();
        //passed
    })

    it('should call a function when button receiveis a click', () => {
        const fn = jest.fn()
        render(<Button text='load more' onClick={fn}/>)
        const button2 = screen.getByRole('button', {name: /load more/i})
        fireEvent.click(button2)
        fireEvent.click(button2)
        expect(fn).toHaveBeenCalledTimes(2);
        //passed
    })

    it('should be disabled when disabled is true', () => {
        render(<Button text='load more' disabled={true}/>)
        const button3 = screen.getByRole('button', {name: /load more/i})
        expect(button3).toBeDisabled()
        //passed
    })
})

----------------------------

Example 02: Tests if a component is rendered correctly and has a class:

import { render, screen } from '@testing-library/react'
import ActiveLink from '.'

jest.mock('next/router', () => {
    return {
        useRouter() {
            return {
                asPath: '/'
            }
        }
    }
})

describe('ActiveLink component', () => {
    it('active link should renders correctly', () => {
        const { debug, getByText } = render(
            <ActiveLink
                activeClassName='active'
                href='/'
            >
                <p>OK!</p>
            </ActiveLink>
        )
        debug()
        expect(screen.getByText('OK!')).toBeInTheDocument()
    })
    
    it('active link is receiving the href attribute string', () => {
        render(
            <ActiveLink
                activeClassName='active'
                href='/'
            >
                <p>OK!</p>
            </ActiveLink>
        )
        expect(screen.getByText('OK!')).toHaveClass('active')
    })
    
})


_____________________

Example 03. In this example w'll to test if the application is returning the Sign-
InButton component correctly according to the useSession value. The mocked function
will be used to return value of useSession mock in each situation, example:

import {render, screen} from '@testing-library/react'
import {SignInButton} from './index'
import {useSession} from 'next-auth/client'
import {mocked} from 'ts-jest/utils'

jest.mock('next-auth/client')

describe('SignInButton', () => {
  it('should render the button to login if the user is not logged', () => {

    const useSessionMocked = mocked(useSession)

    useSessionMocked.mockReturnValueOnce([null, false])

    render(
        <SignInButton/>
    )
    expect(screen.getByText('SignIn with GitHub')).toBeInTheDocument()
  })

  it('should render the button to logout with the user named if user is logged', () => {
    const useSessionMocked = mocked(useSession)
    useSessionMocked.mockReturnValueOnce([
        {user: {name: 'John Doe', email: 'johndoe@eamil.com'}, expires: 'fake-expires'}
        , false])
      render(
          <SignInButton />
      )
      expect(screen.getByText('John Doe')).toBeInTheDocument()
  })

})

-----------------------------ASYNC TESTS--------------------------------------

Async tests in React, using the Testing React Library is useful to check if a 
component or function exists or has been called after a time. It should be 
done using the waitFor() method inside an async function. Example:


describe('Async', () => {
    it('Should wait for the button render ad find this element', async () => {
        render(
            <Async />
            )
           await waitFor(() => {
              return expect(screen.getByText('Button')).toBeInTheDocument()
          })
    })
})


------------------------------------------------------------------------------

6)Run yarn test to run your tests. If your package.json file don't has a test
script, use "test": "jest --watch".


-----------------------CHECKING THE COVERAGE TESTS %--------------------------

1) Run the command yarn test -- --watchAll='false' --coverage

2)In the browser or in the console your can check the % of covarege of your 
whole application.

----------------------MOCKING TESTS REQUESTS WITH MWS-------------------------

Mock Service Worker (MSW) is a library for simulating and mock various tests re-
quests trought handlers that intercepts the requests.

1) Install the MSW: yarn add -D msw

------------------------------------------------------------------------------

2) Import the msw dependencies:

import { rest } from 'msw';
import { setupServer } from 'msw/node';

------------------------------------------------------------------------------

3) Define your handlers for requests:

const handlers = [
  rest.get('https://jsonplaceholder.typicode.com/posts',
  async (req, res, ctx) => {
  return res(ctx.json([
      {
        userId: 1,
        id: 1,
        title: 'title1',
        body: 'body1'
      },
      {
        userId: 2,
        id: 2,
        title: 'title2',
        body: 'body2'
      },
      {
        userId: 3,
        id: 3,
        title: 'title3',
        body: 'body3'
      },
  ]))

  }),

  rest.get('https://jsonplaceholder.typicode.com/photos', 
  async (req, res, ctx) => {
    return res(ctx.json([
        {
          url: 'img1.png',
        },
        {
          url: 'img2.png',
        },

        {
          url: 'img3.png',
        },
    ]))

    })
];

------------------------------------------------------------------------------

4) Start, configure and use the server in your test:

const server = setupServer(...handlers);

describe('testing the home render', () => {

  beforeAll(() => {
    server.listen();
  })

  afterEach(() => {
    server.resetHandlers()
  })

  afterAll(() => {
    server.close()
  })

  it('should render post by accordinh the requests', async () => {
    render(<Home />);
    const noMorePosts = screen.getByText('NÃ£o existem posts =(');
    screen.debug();
    await waitForElementToBeRemoved(noMorePosts);
  });
});



------------------------------GENERAL TIPS-------------------------------------

Use tests on fake databases to tests, send e-mails and crud operatios.

Use coverage to check how much your component is coveraged of tests.

Always write test thinking on accessibility.

You shoult to run tests always thinking in what you want to happen.

Check to expect.assertions() when working with async tests.

Some components that the user don't will to interact with it, not need tests.

Use the describe() method to categorize your tests of your current component.

use jest.mock() to simulate actions and extract props that your component depends 
in the real file of the application. 

Use the mocked() function from ts-jest to return different value of mock at each 
situation. Useful for checking conditional render.

Be careful with data conversion in tests, you should verify if the data has been 
converted and expect it as result.

The toEqual(expect.objectContaining({})) method requires that the values passed 
should be strictly equal to the value expected.

You can get the element passing the data-testid='my-component1' prop to the com-
ponent and getting it in the test through the getByTestId() method.

If you didn't found an element, you can use the screen.logTestingPlaygroundURL() 
method to open the Testing Playground in the browser and see the available ways 
to find your component in tests.

Put your tests together with the file of the component or page in the even folder 
to avoid conflicts at test coverage.