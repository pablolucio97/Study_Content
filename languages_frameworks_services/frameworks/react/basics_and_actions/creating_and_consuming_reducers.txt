======================CREATING AND CONSUMING REDUCERS======================

1) Create a new folder named as "reducers" insde your "src" folder. Inside 
this, create another folder to your reducer, ex: "cycles".

---------------------

2) Acoording to example, inside the "cycles" folder, create a new file na-
med "actions" containing your all actions. Each eaction is a function that
should return a type (and a payload if needs a parameter). Example:

export interface Cycle {
	id: string;
	startDate: Date;
	finishedDate?: Date;
}

export const ADD_NEW_CYCLE = 'ADD_NEW_CYCLE'
export const FINISH_CURRENT_CYCLE = 'FINISH_CURRENT_CYCLE'


export function addNewCycleAction(newCycle: Cycle) {
	return {
		type: ADD_NEW_CYCLE,
		payload: {
			newCycle
		}
	}
}

export function markCurrentCycleAsFinishedAction() {
	return {
		type: FINISH_CURRENT_CYCLE
	}
}

---------------------

3) Inside the "reducers" folder, create a new file named as "reducers" ex-
porting a function containing two arguments: state (your  reducer initial 
state) and action (the string that describes your action), and run condi-
tions to execute a code according each action type. Example (in this e-
xample we're using immer to handle React state):

import { produce } from "immer"

export function cyclesReducer(state: CyclesStateReducer, action: any) {

	switch (action.type) {
	case "ADD_NEW_CYCLE":
		return produce(state, draft => {
			draft.cycles.push(action.payload.newCycle)
			draft.activeCycleId = action.payload.newCycle.id
		})

	case "FINISH_CURRENT_CYCLE": {
		const currentCycleIndex = state.cycles
			.findIndex(cycle => {
				return cycle.id === state.activeCycleId
			})

		if (currentCycleIndex < 0) {
			return state
		}

		return produce(state, draft => {
			draft.activeCycleId = null
			draft.cycles[currentCycleIndex].finishedDate = new Date()
		})
	}
	default:
		return state
	}
}

---------------------

4) In your application import the reducer function and the useReducer from 
React. Assing the state and the dispatch inside an array to the useReducer 
passing the reducer function as first argument, the initial state values as 
second argument and a function to get the cur-rent reduce value as third 
argument. In your application, everything needs to handle the reducer, must
be inside a function that calls the dispatch method that calls the function 
imported from the actions file. Generally the reducer functions are used in 
a context, so your need to export the function that call the dispatch in 
your context, to provide for your whole application.

In this example, the third argument of useReducer is used to get current re-
ducer value from the localStorage. Example.

//USING THE REDUCER

import { useReducer } from "react";
import { cyclesReducer } from "../reducers/reducers"

const [cyclesState, dispatch] = useReducer(cyclesReducer, {
    cycles: [],
    activeCycleId: null
}, () => {
    const storedState = localStorage
        .getItem("@ignite-timer:cyclesState-1.0.0")

    if (storedState) {
        return JSON.parse(storedState)
    }
})

--------

//ALTERING VALUES ON useReducer

import {
     addNewCycleAction, 
     markCurrentCycleAsFinishedAction 
} from "../reducers/cycles/actions";

function addNewCycleAction() {

    const newCycle: Cycle = {
        id,
        task: data.task,
        minutesAmount: data.minutesAmount,
        startDate: new Date()
    }

    dispatch(addNewCycleAction(newCycle))
}

function markCurrentCycleAsFinished() {
    dispatch(markCurrentCycleAsFinishedAction())
}


