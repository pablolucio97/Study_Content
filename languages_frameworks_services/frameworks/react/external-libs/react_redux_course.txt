------------------------------------CONCEPTS---------------------------------------

redux: Is a wide library can be used in React, Angular, Vue, and Vanilla projects.
Is used to store all states of your aplication in a single core (store) allowing 
each component use them when necessary. The states in the store are only for rea-
ding, one can manage the states only through the actions through the reducers (pu-
re functions that doing the action in your state). The main difference between
Redux and ContextApi is that Redux is designed for handle global contexts whereas 
ContextApi for isolated contexts. Using Redux, all components will comunicate 
with the store of the Redux and not between itselves.

store: Core where all states are hosted and available for all application (needs 
a provider). It's imutable, but allow evolutions.

--------

reducers: Are pure functions triggering events in the application to manager the 
states in the store without any side effects. Example:

const initialState = {...}

function exemploReducer1(state = initialState, action) {
	switch(action.type) {
		case ‘TYPE_1’ :
			return { ...state, data: action.payload.data };
		default:
			return state;
                }
}

--------

actions: Are the set of data of the application to manager the state in the store 
inside the reducers. At clicking in a button, the user triggers an action that 
will be processed by a reducer and reflect on the store. Example:

{ 
    type: “TIPO_DO_EVENTO”,
    payload: {
	// dados associados a essa action
         }
}

-------------------------USING REACT REDUX ON LEGACY PROJECTS----------------------

1) Install the redux, react-redux and @reduxjs/toolkit in your application running 
the command yarn add redux react-redux @reduxjs/toolkit.

------------------------

2) Create a folder named store, and inside this, a new folder named reducers. In-
side the reducers folder, create your first reducer containing your initial state
and a function containing an action for your reducer. Example:

const INITIAL_STATE = {
    activePerson: { name: 'Someone' },
    persons: [
        { name: 'Pablo', age: 27 },
        { name: 'Camila', age: 27 }
    ]
}

export default function person(state = INITIAL_STATE, action) {

    if (action.type === 'SET_PERSON_AS_ACTIVE') {
        return { ...state, activePerson: action.person }
    }


    return state
}

------------------------

3) Still in the reducers folder, create a new index.js file importing the combi-
neReducers from redux, importing each reducer of your application, and exporting 
all reducers of your application inside the combineReducers method. Example:

import { combineReducers } from 'redux'

import person from './person'

export default combineReducers({
    person,
})

------------------------

4) Inside the store folder, create a new folder named actions and inside this 
create a index.js exporting your actions by function. Example:

export function togglePerson(person){
    return{
        type: 'SET_PERSON_AS_ACTIVE',
        person
    }
}

------------------------

5) Still on store folder, create a store.js file importing configureStore from 
@reduxjs/toolkit and your rootReducer. Create a new store variable passing your 
rootReducer as the reducer and export it.

import {configureStore} from '@reduxjs/toolkit'

import rootReducer from './reducers'

const store = configureStore({
    reducer: rootReducer
})

export default store

------------------------

6) In your application, import the connect from react-redux to connect your com-
ponent with the redux state and import the bindActionCreators from redux to bind 
your actions with synthetic events of your component. Create two functions to 
pass to the connect method (mapStateToProps and mapDispatchToProps) acessing the
keys of your store and pass it as props to your component. Example:

import React from 'react'
import { connect } from 'react-redux'
import { bindActionCreators } from 'redux'

import * as PersonActions from '../../store/actions'

const List = ({ persons, togglePerson }) => {
    return (
        <ul>
            {persons.map(person => (
                <div style={{ display: 'flex' }}>
                    <li key={person.name}>{person.name} : {person.age}</li>
                    <button onClick={() => togglePerson(person)}>
                        Define as active
                    </button>
                </div>
            ))}
        </ul>
    )
}

const mapStateToProps = state => ({
    persons: state.person.persons
})

const mapDispatchToProps = dispatch => (
    bindActionCreators(PersonActions, dispatch)
)


export default connect(mapStateToProps, mapDispatchToProps)(List)



react-redux:

Provider
useDispatch
useSelector

-------

@reduxjs/toolkit:

configureStore,
createSlice 

-------

redux-persist

PersistGate
persistReducer


Redux-saga;

Redux-thunk;

