===========================INTERCEPTING SERVER RESPONSES================================

The server you application is consuming data can return specifics or generics message 
errors, use the interceptors from Axios together an AppError class to intercept the 
error response from back-end and return a message from specifc and another to generic 
back-end treated errors. Ex:

1) Create your AppError class inside your utils folder containing a constructor
containing your message. Ex:

export class AppError {
    message: string;
    constructor(message: string) {
        this.message = message
    }
}

--------------------

2) On services/api.ts file, intercept the requests in your app. The first param return 
the end-point data without errors, and the second one treats the error. Example:

import { AppError } from '@utils/AppError'
import axios from 'axios'

const api = axios.create({
    baseURL: 'http://localhost:3333'
})


api.interceptors.response.use(response => response, error => {
    if(error.response && error.response.data){
        return Promise.reject(new AppError(error.response.data.message))
    }else{
        return Promise.reject(new AppError(error))
    }
})

export { api }

--------------------

3) In your application, on the catch block from trycatch block, check if the error
is an instance of your class AppError and return the specific message case yes or
your generic otherwise. Example:

async function handleSignUp({ name, email, password }: FormDataProps) {
    setLoading(true)
    try {
      await api.post('/users', { name, email, password })
    } catch (error) {
      const isAppError = error instanceof AppError
      const messageError = isAppError ? error.message : 
	'NÃ£o foi possivel conectar ao servidor.'
	Alert.alert('Error', messageError)
    } finally {
      setLoading(false)
    }
  }

