======ADDING FORM VALITIONS WITH REACT HOOK FORM AND ZOD RESOLVER======

1) Run yarn add react-hook-form @hookform/resolver zod to install the 
React Hook Form, the resolvers and the Zod for validations.

________________

2) Create your validation scheme importing * as zod and the zodResol-
ver and creating a new type to type your resolver according to your o-
bject validation type. Example


import { zodResolver } from "@hookform/resolvers/zod"
import * as zod from "zod"

const newCycleFormValidationScheme = zod.object({
	task: zod.string().min(1, "Informe a tarefa"),
	minutesAmount: zod.number().min(5).max(60)
})

type FormData = zod.infer<typeof newCycleFormValidationScheme>

________________

3) Import the useForm from 'react-hook-form' and desustructure regis-
rer, watch, handleSubmit and reset from useForm and pass an object as
argument to useForm containing the your resolver with the validation 
type and an object with the default values. Example:

const { register, watch, handleSubmit, reset } = useForm<FormData>({
    resolver: zodResolver(newCycleFormValidationScheme),
    defaultValues: {
        task: "",
        minutesAmount: 0
    }
})

________________

4) Create variables to watch each input of your application and con-
trol the submit button based in these variables rules. Example:

const task = watch("task")
const minutesCounter = watch("minutesAmount")
const isDisabledBtn = !task || !minutesCounter

<StartCountdownButton disabled={isDisabledBtn} type="submit">
    Começar
</StartCountdownButton>

________________

5) Pass for each input of your form the function register with all 
possible returns of this function (through spread operator) passing 
the name of the field that this input controls as argument, you can 
to pass an object of configuration as second parameter. Example:

<TaskInput
    type="text"
    id='task'
    placeholder='Inicie uma tarefa'
    list="task-suggestions"
    {...register("task")}
/>

<MinutesAmountInput
    type="number"
    id='minutesAmount'
    placeholder='00'
    min={0}
    max={60}
    step={5}
    {...register("minutesAmount", { valueAsNumber: true })}
/>
________________

6) Write the function that will be called in your form and call
this function inside the handleSumit function from the useForm ho-.
ok. Example:

function handleCreateNewCycle(data: NewCycleFormData) {
    console.log(data)
    reset()
}

<form action="" onSubmit={handleSubmit(handleCreateNewCycle)}>
    <InputsContainer>
        <label htmlFor="task">Vou trabalhar em</label>
        <TaskInput
            type="text"
            id='task'
            placeholder='Inicie uma tarefa'
            list="task-suggestions"
            {...register("task")}
        />
        <MinutesAmountInput
            type="number"
            id='minutesAmount'
            placeholder='00'
            min={0}
            max={60}
            step={5}
            {...register("minutesAmount", { valueAsNumber: true })}
        />
    </InputsContainer>
    <StartCountdownButton disabled={isDisabledBtn} type="submit">
        <Play size={24} />
        Começar
    </StartCountdownButton>
</form>