===============USING STORYBOOK TO DOCUMENTE REACT COMPONENTS===============

1) Run npx storybook init in your project to install the Storybook on your
project. Run also yarn add ts-loader -D to avoid conflicts.

------------------


2) In your file .stories main.js include the code below to support Styled
Components inside the prop "addons" on your project:

'@react-theming/storybook-addon'

------

Final code example:

module.exports = {
  "stories": [
    "../src/**/*.stories.mdx",
    "../src/**/*.stories.@(js|jsx|ts|tsx)",
  ],
  "addons": [
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@storybook/addon-interactions",
    '@react-theming/storybook-addon'
  ],
  "framework": "@storybook/react",
  "core": {
    "builder": "@storybook/builder-webpack5"
  }
}


------------------

3) In your file .stories preview.js export a decorator returning a func-
tion wrapping the Styled Components Theme Provider with your theme and
GlobalStyles. Example:

export const decorators = [
  (Story) => (
    <ThemeProvider theme={theme}>
      <Story />
      <GlobalStyle />
    </ThemeProvider>
  )
]

-----

Final code example:

import { ThemeProvider } from "styled-components"
import { GlobalStyle } from '../src/styles/global-style'
import { theme } from '../src/themes/theme'

export const parameters = {
  actions: { argTypesRegex: "^on[A-Z].*" },
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/,
    },
  },
}

export const decorators = [
  (Story) => (
    <ThemeProvider theme={theme}>
      <Story />
      <GlobalStyle />
    </ThemeProvider>
  )
]

------------------

4) Run yarn storybook to start the Storybook locally in your broswer and 
see your pannel containing your documented components with their stories.

------------------

5) In the folder of your component, create YourComponent.stoories.tsx
file containing your component and their stories. Example:

import React from 'react'
import { Text } from './'
import { ComponentMeta, ComponentStory } from '@storybook/react'

export default {
    title: 'Text',
    component: Text
} as ComponentMeta<typeof Text>

export const Primary: ComponentStory<typeof Text> = () => {
    return (
        <Text
            content='Example'
        />
    )
}

export const Secondary: ComponentStory<typeof Text> = () => {
    const theme = useTheme()
    return (
        <Text
            content='Example'
            style={{ color: theme.colors.primary }}
        />
    )
}


------------------DOCUMENTING A SET OF COMPONENTS EXAMPLE-----------------

import { ComponentMeta, ComponentStory } from '@storybook/react'
import { ReactNode } from 'react';
import { Text as TextComponent } from './Text'
import { Title as TitleComponent } from './Title'
import { SubTitle as SubTitleComponent } from './SubTitle'
import { GradientText as GradientTextComponent } from './GradientText'

interface ContainerProps {
    children: ReactNode;
}

const Container = ({ children }: ContainerProps) => {
    return (
        <>
            {children}
        </>
    )
}

export const Text: ComponentStory<typeof TextComponent> = () => {
    return (
        <TextComponent
            content='This is the Text component'
        />
    )
}

export const SubTitle: ComponentStory<typeof SubTitleComponent> = () => {
    return (
        <SubTitleComponent
            content='This is the SubTitle component'
        />
    )
}

export const Title: ComponentStory<typeof TitleComponent> = () => {
    return (
        <TitleComponent
            content='This is the TitleComponent component'
        />
    )
}

export const GradientText: ComponentStory<typeof GradientTextComponent> = () => {
    return (
        <GradientTextComponent
            content='This is the GradientTextComponent'
            direction='right-to-left'
            primaryColor='cyan'
            secondaryColor='red'
            textType='text'
        />
    )
}

Text.argTypes = {
    content: {
        name: 'content',
        description: 'Text to be displayed',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'string' },
            defaultValue: { summary: '' },
        },
    },
    style: {
        name: 'style',
        description: 'CSS Styles',
        table: {
            type: { summary: 'CSS Properties' },
        }

    },
}

Title.argTypes = {
    content: {
        name: 'content',
        description: 'Text to be displayed',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'string' },
            defaultValue: { summary: '' },
        },
    },
    style: {
        name: 'style',
        description: 'CSS Styles',
        table: {
            type: { summary: 'CSS Properties' },
        }

    },
}

SubTitle.argTypes = {
    content: {
        name: 'content',
        description: 'Text to be displayed',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'string' },
            defaultValue: { summary: '' },
        },
    },
    style: {
        name: 'style',
        description: 'CSS Styles',
        table: {
            type: { summary: 'CSS Properties' },
        }

    },
}

GradientText.argTypes = {
    content: {
        name: 'content',
        description: 'Text to be displayed',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'string' },
        },
    },
    primaryColor: {
        name: 'primaryColor',
        description: 'Start gradient color',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'string' },
        },
    },
    secondaryColor: {
        name: 'secondaryColor',
        description: 'Final gradient color',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'string' },
        },
    },
    direction: {
        name: 'direction',
        description: 'Gradient direction',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'left-to-right | right-to-left | top-to-bottom | bottom-to-top' },
            defaultValue: { summary: 'left-to-right' },
        },
    },
    textType: {
        name: 'textType',
        description: 'HTML element type to render the GradientText',
        type: { name: 'string', required: true },
        table: {
            type: { summary: 'text | title | subtitle' },
            defaultValue: { summary: 'text' },
        },
    },
    style: {
        name: 'style',
        description: 'CSS Styles',
        table: {
            type: { summary: 'CSS Properties' },
        }

    }
}



export default {
    title: 'Typography',
    component: Container,
} as ComponentMeta<typeof Container>






