================================REDUX COURSE=================================

Redux must be used when your application need to manage complex states to
avoiding perform troubles when using ContextAPI.

----------------------------FLOW ARCHITECTURE---------------------------------

Flow architecture is the architecture Redux works on that allows us to manage
complex global states in our application.

Actions: Are actions are triggered by a function and the actions carries the
data to the reducer (the global state). An action must be an unique string to
be able to be identified.

Reducer: Is a isolated piece of the global state handler linked to a data. 
Example: CartReducer, AuthReducer. Its works like a listener waiting to listen 
to the actions and alter specific data in your global state according to your 
action type.

To know something have been changed in our context, we need to connect our
component with the respective reducer and this specific reducer will tell our
component that something has changed in our context. We can connect several
components to our reducer.

Middlewares (Redux Saga): Does the data verification before to run some
action.

1) Install the Redux and the React Redux running yarn add react-redux redux
   redux-devtools-extension immer.

----------------

2) Create a new folder named as "store", inside it, "modules", inside it a 
   new folder with your reducer name, inside it, create a new actions.ts file 
   containing your actions. For each functionality (ex: add a product to cart,
   split this funcionality to action_request, action_success, and action_failu-
   re) Example:

   import { IProduct } from './types'

    export function addProductToCardRequest(product: IProduct) {
        return {
            type: 'ADD_PRODUCT_TO_CARD_REQUEST',
            payload: {
                product
            }
        }
    }

    export function addProductToCardSuccess(product: IProduct) {
        return {
            type: 'ADD_PRODUCT_TO_CARD_SUCCESS',
            payload: {
                product
            }
        }
    }

    export function addProductToCardFailure(productId: string) {
        return {
            type: 'ADD_PRODUCT_TO_CARD_FAILURE',
            payload: {
                productId
            }
        }
    }

----------------

3) Inside your reducer folder, create a new reducer.ts file exporting your 
   reducer function. Declare also your interfaces in a separated file. A reducer 
   is a function returning your state data. Always assign your initial state to 
   a variable. Control the action type trough a switch, use the produce from immer 
   to work with state drafts. Trigger only the success action to garantee Redux 
   will call this action only if the check is passing. Example:

    import { Reducer } from "redux";
    import produce from 'immer'
    import { ICartState } from "./types";

    const INITIAL_STATE: ICartState = {
        items: [],
        failedStockCheck: []
    }

    const cart: Reducer<ICartState> = (state = INITIAL_STATE, action) => {

        return produce(state, draft => {
            switch (action.type) {
                case 'ADD_PRODUCT_TO_CART_SUCCESS': {
                    const { product } = action.payload

                    //CHECKS IF PRODUCT ALREADY IS IN CART AND INCREASES THE QUANTITY
                    //OTHERWISE ONLY ADD TO CART NORMALLY

                    const productCartIndex = draft.items
                        .findIndex(item => item.product.id === product.id)

                    if (productCartIndex >= 0) {
                        draft.items[productCartIndex].quantity++
                    } else {
                        draft.items.push({
                            product,
                            quantity: 1
                        })
                    }
                }
                    break
                case 'ADD_PRODUCT_TO_CART_FAILURE':{
                    draft.failedStockCheck.push(action.payload.productId)
                    break
                }
                default: {
                    return draft
                }
            }
        })


    }


    export default cart;


----------------

4) Inside the "modules" folder. create a new file named as "rootReducer", im-
port the combineReducers from redux and export a function containing all yours 
reducers. Example:

import { combineReducers } from 'redux';
import cart from './cart/reducer';

export default combineReducers({
    cart,
})

----------------

5) Inside the "modules" folder create a new index file importing createStore 
from redux and your rootReducer. Export your store passing your rootReducer
as parameter to createStore function. Example:

import { createStore } from 'redux'
import {composeWithDevTools} from 'redux-devtools-extension'
import { ICartState } from './modules/cart/types';
import rootReducer from './modules/rootReducer';

export interface IState{
    cart: ICartState;
}

const store = createStore(rootReducer, composeWithDevTools())

export default store;

----------------

6) In your application, in the component will communicate with Redux, import 
the useSelector from 'react-redux' type it with your redux state type and 
with the data you want to return, assign it to a variable and consume this 
variable in your code/component. Example:

import React from 'react'
import { useSelector } from 'react-redux'
import { IState } from '../../store'
import { ICartItem } from '../../store/modules/cart/types'

export function Cart() {

    //YOU CAN TYPE THE STATE RETURN AS SECOND PARAM FROM GENERIC
    const cart = useSelector<IState, ICartItem[]>(state => state.cart.items)    

    return (
        <div>
          {cart.map(item => (
                <tr key={item.product.id}>
                    <td>{item.product.title}</td>
                    <td>{item.product.price}</td>
                    <td>{item.quantity}</td>
                </tr>
            ))}
        </div>
    )
}


------------------APPLYING MIDDLEWARES WITH REDUX SAGA-----------------------

1) Install the Redux Saga running yarn add redux-saga.

-----------------

2) On your redux module, create a new file named as sagas.ts, import all and 
takeLatest from 'redux-saga/effects', write your middleware function, and ex-
port default the all method from 'redux' passing an array containing the ta-
keLatest that must contain the action and the function middleware. Example:

import { AxiosResponse } from 'axios'
import { all, takeLatest, select, call, put } from 'redux-saga/effects'
//@ts-ignore
import { IState } from '../../index.ts'
//@ts-ignore
import { addProductToCartRequest, addProductToCartSuccess } from './actions.ts'
//@ts-ignore
import { api } from './../../../services/api.ts';

type CheckProductStockRequest = ReturnType<typeof addProductToCartRequest>

interface IStockResponse {
    id: number;
    quantity: number;
}

//IT'S A GENERATOR, WORKS LIKE AS ASYNC AWAIT FUNCTION WHERE THE YIELD IS THE AWAIT
function* checkProductsStock({ payload }: CheckProductStockRequest) {

    const { product } = payload

    const currentQuantity: number = yield select((state: IState) => {
        return state.cart.items.find(item => item.product.id === product.id)?.quantity ?? 0;
    })

    const availableStockResponse: AxiosResponse<IStockResponse> =
        //THE CALL METHOD IS USED TO WORKS WITH HTTP REQUEST ON SAGA
        yield call(api.get, `/stock/${product.id}`)


    if (availableStockResponse.data.quantity > currentQuantity) {
        // THE PUT METHOD TRIIGERS AN ACTION
        yield put(addProductToCartSuccess(product))
    } else {
        yield put(addProductToCartFailure(product.id))
    }
}

export default all([
    takeLatest('ADD_PRODUCT_TO_CART_REQUEST', checkProductsStock)
])

-----------------

3) On the modules folder, create a new file named as rootSaga.ts, import all 
from 'redux-saga/effects', import your sagas.ts default exportation, and then 
declare a generator (generator are async functions after conversion) returning 
your module. Example:


import { all } from 'redux-saga/effects'

//@ts-ignore
import cart from './cart/sagas.ts'

export default function* rootSaga(){
    return yield all([
        cart
    ])
}

-----------------

4) On your index.ts inside the store folder, import the createSagaMiddleware 
from 'redux-saga', assign a variable calling this function, create a variable 
to store your middlewares array, import the applyMiddleware from redux, pass  
your middleware arrays as param for the applyMiddleware function, import your 
rootSaga, and call the method run from your variable that's appointing to the 
createSagaMiddleware() passing your rootSaga. Example:

import { applyMiddleware, createStore } from 'redux'
import createSagaMiddleware from 'redux-saga'
import { composeWithDevTools } from 'redux-devtools-extension'
//@ts-ignore
import { ICartState } from './modules/cart/types.ts';
//@ts-ignore
import rootReducer from './modules/rootReducer.ts';
//@ts-ignore
import rootSaga from './modules/rootSaga.ts';

export interface IState {
    cart: ICartState;
}

const sagaMiddleware = createSagaMiddleware();

const middlewares = [sagaMiddleware]

const store = createStore(rootReducer, composeWithDevTools(
    applyMiddleware(...middlewares)
))

sagaMiddleware.run(rootSaga)

export default store;

==============================GENERAL TIPS===================================

All actions on Redux must export an object containing the type and payload.

Likewise React, on Redux, you can't to violate the state immutability, hence
use a third lib to work with the state, like immer.

At using the product function from immer, you must work and return the draft 
that can be gotten as second parameter.

Trigger only the success action in the reducer to garantee Redux will call this 
action only if the check is passing.

Every Saga method must work with the yield keyword.

Maintain all your actions types inside a TypeScript Enum, export it and use in 
your actions file.

Be careful with the state typing checking if the data is write and read correc-
tly in the payload according the state typing.



