========================USING REACT QUERY========================

React query is useful to do data fetching return more resour-
ces that allow controlling better your application and using 
a cache to avoid unnecessary queries.

1) Install the React Query running yarn add react-query.

-------------------------

2) In the services folder create a new file named queryClient.ts
exporting an instance of the queryClient. Example:

import { QueryClient } from "react-query";

export const queryClient = new QueryClient();

-------------------------

3) Inside your app.tsx file, provide the QueryClientProvider
with a client to use the query as a conspan and to control 
each query, the ReactQueryDevtools. Ex:

import { AppProps } from 'next/app'
import {QueryClientProvider} from 'react-query'
import {queryClient} from '../../services/queryClient'
import { ReactQueryDevtools } from 'react-query/devtools'

const queryClient = new QueryClient()

function MyApp({ Component, pageProps }: AppProps) {
    return (
      <QueryClientProvider client={queryClient}>
        <Component {...pageProps} />
        <ReactQueryDevtools/>
      </QueryClientProvider>
    )
}

export default MyApp

-------------------------

4) Inside your application import the hook useQuery from the 
React Query and define your query destructuring data, isLoad-
ing and error to control your query. Example:


import { useQuery } from 'react-query'

export default function UserList() {

       const { data, isLoading, error } = useQuery('users', async () => {
        const response = await fetch('http://localhost:3000/api/users')
        const data = await response.json()

        const users = data.users.map(user => {
            return {
                id: user.id,
                name: user.name,
                email: user.email,
                createdAt: new Date(user.createdAt).toLocaleDateString('pt-BR', {
                    day: '2-digit',
                    month: 'long',
                    year: 'numeric'
                }),
            }
        })

        return users
    },
        {
            staleTime: 5000
        }
    )

    return (
        <>
            {isLoading ? (
                <div justify="center">
                    <Spinner />
                </div>
            ) : error ? (
                <div>
                    <span>Falha ao carregar dados dos usuários</span>
                </div>
            ) : (
                <>
                    <table colorScheme='whiteAlpha'>
                        <thead>
                            <tr>
                                <th px={['4', '4', '6']} color='gray.300' width='8'>
                                    <Checkdiv colorScheme='pink' />
                                </th>
                                <th>Usuário</th>
                                {isWideScreen && <th>Data de cadastro</th>}
                            </tr>
                        </thead>
                        <tbody>
                            {data.map(user => (
                            <tr key={user.id}>
                                <td>
                                    <div>
                                        <span fontWeight='bold'>{user.name}</span>
                                        <span fontSize='sm' color='gray.300'>{user.email}</span>
                                    </div>
                                </td>
                                {isWideScreen && <td>{user.createdAt}</td>}
                            </tr>
                            ))}
                        </tbody>
                    </table>
                </>
            )}
        </>
    )
}



--------------------------------DOING INFINITE QUERIES----------------------------------

https://randomuser.me/api/?page=1&results=10


1) Define an async function receiving the param pageParam to fetch your data. 

const fetchUsers = async ({ pageParam = 1 }) => {
    const res = await fetch(`https://randomuser.me/api/?page=${pageParam}&results=10`);
    return res.json();
} 

Obs: The api must has pagination resource (you can check it, if the api return an 
array of objects data or some another properties usually on top JSON file).


------------------------


2) Import the  useInfiniteQuery  from react-query, destructure data, isLoading, isEr-
ror, fetchNextPage, isFetchingNextPage and isFetching from useInfiniteQuery passing 
a key, the function responsible for fetch data and an object with the prop getNextPa-
geParam that is a callback funcion returning the logic for pagination (the param of 
this callback is the own data itself). Ex:

import { useInfiniteQuery } from "react-query"

const fetchUsers = async ({ pageParam = 1 }) => {
    const res = await fetch(`https://randomuser.me/api/?page=${pageParam}&results=10`);
    return res.json();
} 

 const {
        data,
        isLoading,
        isError,
        error,
        fetchNextPage,
        isFetchingNextPage,
        isFetching
    } = useInfiniteQuery("users", fetchUsers, {
        getNextPageParam: (currentPage) => {
            return currentPage.info.page + 1
        }
    });


------------------------

3) You can render your application now checking the valitions from isLoading, isError,
isFetching and so on. Complete code example:

import { useInfiniteQuery } from "react-query";

const fetchUsers = async ({ pageParam = 1 }) => {
    const res = await fetch(`https://randomuser.me/api/?page=${pageParam}&results=10`);
    return res.json();
}


export default function InfinityQuery() {
    const {
        data,
        isLoading,
        isError,
        error,
        fetchNextPage,
        isFetchingNextPage,
        isFetching
    } = useInfiniteQuery("users", fetchUsers, {
        getNextPageParam: (currentPage) => {
            return currentPage.info.page + 1
        }
    });

    if (isLoading) {
        return <h2>Loading...</h2>
    }

    if (isError) {
        //@ts-ignore
        return <h2>{error.message}</h2>
    }


    return (
        <>
            <h2>Infinite Scroll View</h2>
            <div className="card">
                {data?.pages.map(page =>
                    //@ts-ignore
                    page.results.map(user => (
                        <p key={user.email}>{user.email}</p>
                    ))
                )}
            </div>
            <div className='btn-container'>
                <button onClick={() => fetchNextPage()}>Load More</button>
            </div>
            <div>{isFetching && !isFetchingNextPage ? 'Fetching...' : null}</div>
        </>
    );
}



------------------------------GENERAL TIPS---------------------------------

If you're working with NextJS and is facing with the CORS blocking
policy error, do your request through the server.

Is recomended to do data prefetch only with data that providers of your 
application. Avoid to prefetch URL from third API's.

