====================USING MIRAGEJS TO PROVIDE DATA==================

MirageJS is useful to provide fake data while the application is 
building and turning the development experience more real.

1) Install the MirageJS library using yarn add miragejs -D.

---------------------

2)Create a new folder/file named mirage/index.ts inside the service 
folder with a function to invoke a new mirage server. In this func-
tion you should define your Model thought Model.extend({}) method,
define your routes inside the routes(){} function and return your 
server. 

If you will use seeds, install the faker trought yarn add faker 
@types/faker -D and import it. Define the factories and seed 
functions passing the faker to provide data for you. Ex:

import { createServer, Factory, Model } from "miragejs";
import faker from "faker";

type User = {
  name: string;
  email: string;
  created_at: string;
};

export function makeServer() {
  const server = createServer({
    models: {
      user: Model.extend<Partial<User>>({}),
    },

    factories: {
      user: Factory.extend({
        name() {
          return faker.name.firstName().toLowerCase;
        },
        email() {
          return faker.internet.email().toLowerCase();
        },
        createdAt() {
            return faker.date.recent(10)
        },
      }),
    },

    seeds(server){
        server.createList('user', 200)
    },

    routes() {
      this.namespace = "api";
      this.timing = 750;
      this.get("/users");
      this.post("/users");
      this.namespace = "";
      this.passthrough();
    },
  });

  return server;

---------------------

3) In your app.tsx file verify if the current environment is dev-
lopemnt and invoke your MirageServer. Ex: 

import { AppProps } from 'next/app'
import { makeServer } from '../services/mirage'


if(process.env.NODE_ENV === 'development') {
    makeServer()
}


function MyApp({ Component, pageProps }: AppProps) {
    return (
        <>
         <Component {...pageProps} />
        </>
    )
}

export default MyApp

---------------------

4) You can consume the data in your application mapping a state.