========================USING REACT QUERY========================

React query is useful to do data fetching return more resour-
ces that allow controlling better your application and using 
a cache to avoid unnecessary queries.

1) Install the React Query running yarn add react-query.

-------------------------

2) In the services folder create a new file named queryClient.ts
exporting an instance of the queryClient. Example:

import { QueryClient } from "react-query";

export const queryClient = new QueryClient();

-------------------------

3) Inside your app.tsx file, provide the QueryClientProvider
with a client to use the query as a conspan and to control 
each query, the ReactQueryDevtools. Ex:

import { AppProps } from 'next/app'
import {QueryClientProvider} from 'react-query'
import {queryClient} from '../../services/queryClient'
import { ReactQueryDevtools } from 'react-query/devtools'

const queryClient = new QueryClient()

function MyApp({ Component, pageProps }: AppProps) {
    return (
      <QueryClientProvider client={queryClient}>
        <Component {...pageProps} />
        <ReactQueryDevtools/>
      </QueryClientProvider>
    )
}

export default MyApp

-------------------------

4) Inside your application import the hook useQuery from the 
React Query and define your query destructuring data, isLoad-
ing and error to control your query. Example:


import { useQuery } from 'react-query'

export default function UserList() {

       const { data, isLoading, error } = useQuery('users', async () => {
        const response = await fetch('http://localhost:3000/api/users')
        const data = await response.json()

        const users = data.users.map(user => {
            return {
                id: user.id,
                name: user.name,
                email: user.email,
                createdAt: new Date(user.createdAt).toLocaleDateString('pt-BR', {
                    day: '2-digit',
                    month: 'long',
                    year: 'numeric'
                }),
            }
        })

        return users
    },
        {
            staleTime: 5000
        }
    )

    return (
        <>
            {isLoading ? (
                <div justify="center">
                    <Spinner />
                </div>
            ) : error ? (
                <div>
                    <span>Falha ao carregar dados dos usuários</span>
                </div>
            ) : (
                <>
                    <table colorScheme='whiteAlpha'>
                        <thead>
                            <tr>
                                <th px={['4', '4', '6']} color='gray.300' width='8'>
                                    <Checkdiv colorScheme='pink' />
                                </th>
                                <th>Usuário</th>
                                {isWideScreen && <th>Data de cadastro</th>}
                            </tr>
                        </thead>
                        <tbody>
                            {data.map(user => (
                            <tr key={user.id}>
                                <td>
                                    <div>
                                        <span fontWeight='bold'>{user.name}</span>
                                        <span fontSize='sm' color='gray.300'>{user.email}</span>
                                    </div>
                                </td>
                                {isWideScreen && <td>{user.createdAt}</td>}
                            </tr>
                            ))}
                        </tbody>
                    </table>
                </>
            )}
        </>
    )
}

---------------USING REACT QUERY WITH NEXTJS----------------


3) Create a file containing a hook and a function to handle 
your query. The function should do the fetch and return 
your data formated or not. The hook should receive a param 
named options typed as UseQueryOptions and return it as an 
object options in the third param of the useQuery. Example:

import { useQuery, UseQueryOptions } from 'react-query'
import {api} from '../services/api'
import {gameTypes} from '../types/gameCardTypes'

export const getGames = async () => {
     const { data } = await api.get<gameTypes[]>('/games')
    const games = data.map(game => {
        return {
            id: game.id,
            thumbnail: game.thumbnail,
            freetogame_profile_url: game.freetogame_profile_url
        }
    })

    return games

}

export function useGamesList(options: UseQueryOptions){
    return useQuery('games', () => getGames(),{
        ...options
    })
}

---------------------------

4) In your application, call the function inside your SSR 
function and return it, consume this prop in your com-
ponent and call your hook passing the prop from SSR as
initialData. Example:



import GameCard from '../components/GameCard'
import { GetStaticProps } from 'next'
import { getGames, useGamesList } from '../hooks/useGamesList'


export default function Games({ games }) {

    const { data, error, isLoading } = useGamesList({ initialData: games }

    return (
        <>
            <main>
                {data.map(game => (
                    <GameCard
                        key={game.id}
                        id={game.id}
                        freetogame_profile_url={game.freetogame_profile_url}
                        thumbnail={game.thumbnail}
                    />
                ))}
            </main>
        </>
    )
}

export const getStaticProps: GetStaticProps = async () => {

    const games = await getGames()

    return {
        props: {
            games
        }
    }
}


---------------------DOING DATA PREFETCH WITH NEXTJS------------------------

1)Import the queryClient from services/queryClient and write an async func-
tion to call the handlePrefetch method passsing the query key, the prefetch 
key and the fuction to do the prefetch. Example:

import {queryClient} from '../services/queryClient'

export async function handlePrefetchGame(gameId: number){
    await queryClient.prefetchQuery(['game', gameId], async () => {
        const response = await api.get(`/games/${gameId}`)
        return response.data
    });
}

----------------------

2) Call the function at user hovering over an element:

<button onMouseEnter={handlePrefetchUser(user.id)}>See user<button/>


---------------------

------------------------------GENERAL TIPS---------------------------------

If you're working with NextJS and is facing with the CORS blocking
policy error, do your request through the server.

Is recomended to do data prefetch only with data that providers of your 
application. Avoid to prefetch URL from third API's.

