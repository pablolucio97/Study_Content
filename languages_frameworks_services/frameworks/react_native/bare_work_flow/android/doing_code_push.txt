==========================DOING CODE PUSH OTA=============================

Code Push OTA means updating over the air and consists in sending your 
app updates directly to the end-user without going to stores. The new re-
sources will be available only if your app already has been downloaded and 
it doesn't changes native code on your app. All updates will be installed 
on thein the second plan while the user uses the app.

1) Run react-native-code-push to install de Code Push. And install also 
the app center cli running yarn add appcenter-cli

-----------------------

2) In android/settings.gradle add the importations at the file end:

include ':app', ':react-native-code-push'
project(':react-native-code-push').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-code-push/android/app')

-----------------------

3) In android/app/settings.gradle, after the project.ext.react array, import 
the lines: 

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

-----------------------

4) In android/app/src/main/java/com/yourpackagename/MainAplication.java add the 
importation of the codePush and add the CodePush.getJSBundleFile() method. Your
file should likes as:

import com.microsoft.codepush.react.CodePush;

public class MainApplication extends Application implements ReactApplication {

    private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {
        ...

        // 2. Override the getJSBundleFile method in order to let
        // the CodePush runtime determine where to get the JS
        // bundle location from on each app start
        @Override
        protected String getJSBundleFile() {
            return CodePush.getJSBundleFile();
        }
    };
}

-----------------------


5) In android/app/build.gradle add the lines between the 3 dots as below:

android {
    ...
    buildTypes {
        debug {
            ...
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            resValue "string", "CodePushDeploymentKey", '""'
            ...
        }

        releaseStaging {
            ...
            resValue "string", "CodePushDeploymentKey", '"<INSERT_STAGING_KEY>"'

            // Note: It is a good idea to provide matchingFallbacks for the new buildType you create to prevent build issues
            // Add the following line if not already there
            matchingFallbacks = ['release']
            ...
        }

        release {
            ...
            resValue "string", "CodePushDeploymentKey", '"<INSERT_PRODUCTION_KEY>"'
            ...
        }
    }
    ...
}

-----------------------

6) Log in your App Center account, click in your project, "Distribute", "Code push", 
"Create standard deployments" and click in the fix icon and copy yours Production 
and Staging keys and paste your Code Push keys in android/app/build.gradle as bellow.

android {
    ...
    buildTypes {
        debug {
            ...
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            resValue "string", "CodePushDeploymentKey", '""'
            ...
        }

        releaseStaging {
            ...
            resValue "string", "CodePushDeploymentKey", '"<ceRi24Tyz3amm-BFDwKIcDVoLVLthmL29Bk_W>"'

            // Note: It is a good idea to provide matchingFallbacks for the new buildType you create to prevent build issues
            // Add the following line if not already there
            matchingFallbacks = ['release']
            ...
        }

        release {
            ...
            resValue "string", "CodePushDeploymentKey", '"<42x_aWRd3d6MizVPXarC2rPlFR0scG1iNphGu>"'
            ...
        }
    }
    ...
}

-----------------------

7) Import the codePush and wrap your app on the codePush passing an object 
with the checkFrequency prop. You should also execute an useEffect to use 
codePush.sync method to sync the changes. Example:

import React from 'react';
import codePush from 'react-native-code-push'

export function App(){

     useEffect(() => {
        codePush.sync({
        installMode: codePush.InstallMode.IMMEDIATE
      })
  },[])


    return (
        <Home/>
    );
}

export default codePush({
  checkFrequency: codePush.CheckFrequency.ON_APP_RESUME
})(App)

-----------------------

8) After loged in your AppCenter account on the web, login in your appcenter 
account by the terminal running appcenter login and get the acess from web to 
proced with login.

-----------------------

9) Run appcenter codepush release-react -a yourorganizationcamelcasename -d 
Production to launch your new code push. In your AppCenter dashboard your can
view your CodePush and check it at opening your app twice.




REFERENCES: https://github.com/microsoft/react-native-code-push/blob/master/docs/setup-android.md#plugin-installation-and-configuration-for-react-native-060-version-and-above-android