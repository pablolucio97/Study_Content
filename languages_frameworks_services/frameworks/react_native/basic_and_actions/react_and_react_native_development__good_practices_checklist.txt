==============REACT AND NATIVE DEVELOPMENT GOOD PRACTICES CHECKLIST================

---------------------------DEVELOPMENT CHECKLIST-------------------------------

Use image placeholders for avatars when doesn't exist a configured avatar.

Use the prop ListEmptyComponent on FlatList to render secondary component when 
there is no data to feed the FlatList.

Check if all inputs are cleared after inputted the data.

Check for console.log before committing.

Save from Figma each image you will use in your application in the 3 sizes ex:
(logo.png, logo@2x.png, logo@3x.png) and import it ex(logo.png) to React  
Native adjust automatically the best image size.

Use the prop ListEmptyComponent on FlatList to render secondary component when 
there is no data to feed the FlatList.

At styling components use min and max height/width to avoid layout shift.

Use css from styled components (css helper) to avoid declaring theme repeated 
times.

Check if your ScrollView list and FlatList are rendering conditional style 
when the list is empty through the prop contentContainerStyle.

Check if each input in your forms have the prop name and id to be easily 
tracked in a form.


-----------------------PERFORMANCE CHECKLIST AND TIPS--------------------------


Use FlatList instead of ScrollView because FlatList will render each item 
only the user scroll the screen and ScrollView will render all items at first 
render.

Use a unique item key for each ScrollView, FlatList, and map return because it
help React to quickly find for the specific element.

Use the syntax setArray( prevState => [...prevState, newEl]) to get the 
previous content and concatenate new items to this array because it creates a 
shallow copy of the current array state and don't alters the array directly 
respecting also the principle of immutability that will cost less processing.

Use the syntax setArray(prevState => prevState.filter( el => ! el)) to remove 
an item from an array.

Because SetState is an async operation, in some cases react will print the 
previous state instead of your desired current state. To get the current state 
your can use ref or use the library react-usestateref.

