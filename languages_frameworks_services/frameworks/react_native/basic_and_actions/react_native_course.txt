=====================REACT NATIVE COURSE=======================

====================INSTALLINGS ON WINDOWS=====================

------------INSTALLING THE REACT USING CHOCOLATEY--------------

1)Open your Command Prompt on Windows and one of the two codes:
%systemroot%\System32\WindowsPowerShell\v1.0\powershell.exe -No
Profile -ExecutionPolicy Bypass -Command "((new-object net.webcli
ent).DownloadFile('https://chocolatey.org/install.ps1','%DIR%ins
tall.ps1'))" or: %systemroot%\System32\WindowsPowerShell\v1.0\po
wershell.exe -NoProfile -ExecutionPolicy Bypass -Command "& 
'%DIR%install.ps1' %*"

2)Run the follow code: choco install -y nodejs.install python2 
jdk8. Test it using the code node -v. This will be the version
of the Node.

3)Run the follow code: npm install -g react-native-cli

-----------------INSTALLING THE ANDROID STUDIO------------------

1)Go to the website: https://developer.android.com/studio and cli-
ck in Donwlod Android Studio.

2)Install the Android Studio. When arrives in the download compo-
nets page, select the 

---------------------CREATING A NEW PROJECT---------------------

1)Open the emulator and run your device choiced.

2)Run the code: npx react-native init name_of_project

3)Run the code: cd name_of_project

4)Run the code: npx react-native run-android

5)To create a new React Native project using typescript, run:

npx react-native init MyApp --template react-native-template-
typescript

===========================CONCEPTS=============================

--------------------The React Native Role-----------------------

The function of React NAtive: Without React Native, in mobile 
devices, the code is written in Swift to Mac generating .ipa fi-
le and Kotlin to Android generating .apk file. With React Nati-
ve, the code is written in React Native to both SO's. React Na-
tive doesn't convert the code to native language of device, but 
the devices understand the javascript code to run it.

-----------------------Class Component--------------------------

Are the components create by class format, these components uses
the constructor method in your scope.

---------------------Function Component-------------------------

Are the components created by function format, these components
doesn't uses the constructor method, are availeable to uses Hooks
and receive parammeters.


=========================GENERAL TIPS============================

Async events are the events thats depends of the user action, e-
xample: onPress, onTouch etc... and when this events is appointing
to objects of the class components, should linked by the bind().

------------------------------------------------------------------

At using arrow functions in TextInput or another elements to change
the state, the value passed as parameters even be the same of the
state value.

------------------------------------------------------------------

To declare variables to styling, import, and uses StylesSheet, this
show automatically the style options during the build styles pro-
cess.

------------------------------------------------------------------

Objects don't be renderized in components like text in React Nati-
ve.

------------------------------------------------------------------

Don't pass functions to renders components when using stackNaviga-
tor to navigate between screens.

------------------------------------------------------------------

The scope that is inside the main component is executed first 
than functions outside the component scope.

------------------------------------------------------------------

All components in react native come with display flex by default.

------------------------------------------------------------------

Use the component RectButton from react-native-gesturehandle inste-
ad of TouchableOpacity component.

------------------------------------------------------------------

Use FlatList component to render long lists. Only use the array.map 
in short renderization because FlatList is more performatic with 
React Native and only renders items on user view field. Example:

<FlatList
    data={skills}
    keyExtractor={item => item}
    renderItem={({ item }) => (
        <SkillCard
        key={item}
        content={item}
    />
    )}
/>

------------------------------------------------------------------

Use TouchableWithoutFeedback with prop onPress={Keyboard.dismiss} 
wrapping your whole screen to dismiss the keyboard automatically 
when the user taps over the interface.

------------------------------------------------------------------

Use async/await to handle functions that will communicate with 
write and read of files. Ex: Async storage, local storage e etc.

------------------------------------------------------------------

Use the function uuuid() from react-native-uuid lib to generate 
id to data of your application.

------------------------------------------------------------------

You need not link positions when using React Native. You can pass 
a position as absolute directly in the component and set the po-
sition.

------------------------------------------------------------------

Use the useFoucsEffect from '@react-navigation/native' together 
with useCallback when working with data that need being renderi-
zed, like a list of items from API and states to refresh automa-
tically at exchanging of a screen. Example:

    useFocusEffect(useCallback(() => {
        loadTransactions()
    }, []))
  }

------------------------------------------------------------------

Use ActivityIndicator with a loading state to wait for data fe-
tching at working with data fetch or storagement.

------------------------------------------------------------------

Use UI Avatars api to generate an Image Letter Avatar at working 
with authentication in IOS, because Apple don't provide user pho-
to.

photo: 
`https://ui-avatars.com/api/?name=${user.fullName!.givenName!}`

------------------------------------------------------------------

If you're using Json Server with Expo and React Native, use your 
ip as default url. Ex: "server" : "json-server src/services/ser-
ver.json --host 192.168.2.128 --port 3333",

------------------------------------------------------------------

Use your object typing directly in the flatlist in the Styled 
Component to force the Flatlist component to recognize your typing. 
Example:

import { CarProps } from "../../types/cars";

export const CarList = styled(FlatList as new 
(props : FlatListProps<CarProps>) => 
FlatList<CarProps>)`
padding: 24px;
`
-----------------------------------------------------------------

Disable the swipe back on IOS and phisical back button on android 
in your Home screen disabling the gesture in options in the 
routes.tsx file for IOS and using an useEffect() to listen hard-
wareBackPress. Examples:

IOS:

   <Screen name='Home' component={Home}
    options={
     { gestureEnabled: false }
    }
 />

-----------

Android:

  useEffect(() => {
    BackHandler.addEventListener('hardwareBackPress', () => {
      return true
    })
  })

-----------------------------------------------------------------

Type components that receives a defined list of names with the o-
riginal typing your component prop as typeof the original compo-
nent through React.ComponentProps<> to use this list late. 

Example:

import React from 'react';
import { Feather } from '@expo/vector-icons'
import { TextInputProps } from 'react-native';

interface Props extends TextInputProps {
    iconName: React.ComponentProps<typeof Feather>['name']
}

export function Input({ iconName }: Props) {
    return (
        <>
            <Feather
                name={iconName}
                size={24}
            />
        </>
    )
}

-----------------------------------------------------------------

Use KeyboardAvoidingView from React Native wrapping your applica-
tion with eneblad and behavior='position' to improve user experi-
ence at typing in inputs.

-----------------------------------------------------------------

If you have some problem with a lib installation, try to link it 
manually running yarn react-native link the-lib-name.

-----------------------------------------------------------------

Convert the string to number at working with number directly on 
InputText. Ex: onChangeText={value => setQuantity(Number(value))}