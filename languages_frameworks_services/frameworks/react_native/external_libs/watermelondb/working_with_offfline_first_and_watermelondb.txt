==================WORKING WITH OFFLINE FIRST AND WATERMWLONDB==================

To work with offline first, you will need of an external API providing a data-
base that will be consumed in your application and the Watermelondb will handle
the data according your internet connection.

Definitions:

Model: It's the representation of the object between the database and the app.
Schema: Is the representation of the table/model in the database. Is initia-
lized when the database is empty.

----------------------CREATING DATABASE, MODELS AND SCHEMAS--------------------

1) Run yarn add @nozbe/watermelondb and yarn add @babel/plugin-proposal-de-
corators -D to install the watermwlondb and your dependencies.

-----------------------

2) In your tsconfig.json file enable the experimentalDecorators. Example:

{
  "compilerOptions": {
    "experimentalDecorators": true
  },
  "extends": "expo/tsconfig.base",
}


-----------------------

3) In the root of your application create a new folder named database/model/
your_model_name.ts with your content example:


import {Model} from '@nozbe/watermelondb'
import {field} from '@nozbe/watermelondb/decorators'

class User extends Model {
    static table = 'users'

    @field('user_id')
    user_id: string;
    
    @field('name')
    name: string;
    
    @field('email')
    email: string;
    
    @field('driver_license')
    driver_license: string;
    
    @field('avatar')
    avatar: string;

    @field('token')
    token: string;
    
}

-----------------------

4) Inside database folder, create a new folder named schema with your
schemaFile.ts. Example:

import { tableSchema } from "@nozbe/watermelondb";

const userSchema = tableSchema({
  name: "users",
  columns: [
    {
      name: "user_id",
      type: "string",
    },
    {
      name: "name",
      type: "string",
    },
    {
      name: "email",
      type: "string",
    },
    {
      name: "driver_license",
      type: "string",
    },
    {
      name: "avatar",
      type: "string",
    },
    {
      name: "token",
      type: "string",
    },
  ],
});

export { userSchema };

-----------------------

5) Inside the schema folder, create a new file named index.ts with appSchema
importation from "@nobelz/watermelondb" and yours schema already created, pass
it inside the tables array and export the schemas. Example:

import { appSchema } from '@nozbe/watermelondb'
import {userSchema} from './userSchema'

const schemas = appSchema({
    version: 1,
    tables: [
        userSchema
    ]
})

export {schemas}

-----------------------


6) Inside the database folder, create a new file index.ts exporting your database
configured with the adapter and the modelClass. Example:


import { Database } from "@nozbe/watermelondb";
import SQLiteAdapter from "@nozbe/watermelondb/adapters/sqlite";

import { schemas } from "./schema";
import { User } from "./model/Users";

const adapter = new SQLiteAdapter({
  schema: schemas,
});

export const database = new Database({
  adapter,
  modelClasses: [User]
});


-----------------------

7) In your application consume the data that comes from the database. Example:

import {database}  from '../database'

useEffect(() => {
  function getUsers() {
      try {
          const useCollection = await database.get('users')
          const users = await userCollection.find()
          console.log(users)
      } catch (error) {
          throw new Error(error)
      }
  }
  getUsers()
}, [])


-------------------------------DOING USER SIGN OUT---------------------------------

To sign out with the user, import the UserModel, set a state to use the data, find
the user inside the selected collection and use the method destroyPermanently. E-
xample:

1) In your context file create and export in the context interface the signOut 
function. Example:


interface AuthContextProps {
  signOut: () => Promise<void>
}

import {database}  from '../database'
import { User as ModelUser} from '../database/models/user'

const [data, setData] = useState({} as DataProps)

function signOut() {
    try {
        const useCollection = await database<ModelUser>.get('users')
        await database.action(async() => {
            const userSelected = await userCollection.find(data.id)
            await userSelected.destroyPermanently()
        })
    } catch (error) {
        throw new Error(error)
    }
}

------------------------

2) In your application, import and use the signOut function

import {signOut} from useAuth()

export function  App (){


  function handleSignOut() {
    try{
      await signOut()
    }catch (error) {
      trhow new Error(error)
    }
  }

  return(
    <>
      <Button
        onPress={handleSignOut}
      /> 
    </>
  )
}

-------------------------UPDATING DATA ON A COLLECTION------------------------------

1) Write the function in the context file. Example:

interface AuthContextProps {
  updateUser: (user: userDataProps) => Promise<void>
}

function updateUser(){
    try {
        const userCollection = database.get<ModelUser>('users')
        await database.action(() => {
            const userSelected = await userCollection.find(user.id)
            await userSelected.update((userData) => {
                userData.name = user.name,
                userData.driver_license = user.driver_license
                setUser(userData)
            })
        })
    } catch (error) {
        throw new Error(error.message)
    }
}

------------------------

2) In your application, import and use the signOut function

import {updateUser} from useAuth()

export function  App (){

  const [name, setName] = useState('')
  const [avatar, setAvatar] = useState('')

  function handleUpdateUser() {
    try{
      await signOut({
        id: user.id,
        name,
        avatar,
        token: user.token
      })
    }catch (error) {
      trhow new Error(error)
    }
  }

  return(
    <>
      <Button
        onPress={handleSignOut}
      /> 
    </>
  )
}

-------------------------------SYNCHRONIZING DATA-----------------------------------

1) In your application, import the databse, the synchronize from watermelondb and
the NetInfo from @react-native-community/netinfo.

import { synchronize } from '@nozbe/watermelondb/sync'
import { databse } from '../database'
import NetInfo from '@react-native-community/netinfo';


------------------------

2) Write a function to pull data from you external database and push data from the wa-
termelondb to your external database. Example

async function offlineSynchronize(){
    await synchronize({
        database,
        pullChanges: async ({lastPulledAt}) => {
            const response = await api
            .get(`/cars/sync/pull?lastPulledVersion=${lastPulledAt} || 0`)
            const {changes, timeStamp: latestVersion} = response.data
            return {changes, timeStamp: latestVersion}
        },
        pushChanges: async ({changes}) => {
            const user = changes.user
            await api.post('/users/sync')
        }
    })
}

------------------------

3) Listen a hook to call your synchronize function depending on the internet 
connection. Example:

useEffect(() => {
    if(netInfo.isConnected){
        offlineSynchronize()
    }
}, [netInfo.isConnected])




==============================GENERAL TIPS================================

To update the database after to do changes in your models or schemas, change
the version number inside appSchema in the index.ts file inside the Schema
folder.