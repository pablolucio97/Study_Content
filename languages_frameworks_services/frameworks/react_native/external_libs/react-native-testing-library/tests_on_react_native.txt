===============WORKING WITH TESTS ON REACT NATIVE WITH EXPO===================

-----------------------TYPES OF TESTS AND CONCEPTS----------------------------

Unity tests: Are tests that tests only a single function, class, or component 
separated from the application. If this function or component is integrated or 
depends of actions bonded with features of the application, it receives the 
name of Mock.

----------------------

Test Driven Development (TDD): Is the practice of write test before to create 
your application.

----------------------

Integration tests: This type of test will to test the integration of a compo-
nent with another or another functionality.

----------------------

E2E (end to end) tests: Are tests that tests each point of the flow of an ac-
tion. In this strategy is simulated the application usage like an user.

----------------------

Tests of Interation: Are tests when an user action is expected and should to 
procced anything after it. Generally are involved with events like onPress,
onLongPress, PanGestureHandler and so on.

-------------------------------CONFIGURATION---------------------------------

1) Install all dependencies below as development dependencies:

jest-expo 
jest@26.5.0
jest-styled-components
jest-fetch-mock
ts-jest

@testing-library/jest-native
@testing-library/react-hooks
@testing-library/react-native
react-test-renderer 

@types/jest 


---------------------

2) In the root of the application creates new jest.config.js file exporting 
a module with the Jest configuration. This module configuration has the neces-
sary presets, setupFiles path configuration, and coverage settings. Example:

module.exports = {
    preset: "jest-expo",
    testPathIgnorePatterns: [
        '/node_modules',
        '/android',
        '/ios'
    ],
    setupFilesAfterEnv: [
        "@testing-library/jest-native/extend-expect",
        "jest-styled-components"
    ],
    setupFiles: ["./setupFile.js"],
    collectCoverage: true,
    collectCoverageFrom: [
        "src/**/*.tsx",
        "!src/**/*.test.tsx"
    ],
    coverageReporters:[
        'lcov'
    ]
}

---------------------

3) Configure the scripts to run your tests in your package.json file and add the
prop "resolutions" after the dependencies list. Example:

"test": "jest",
"test:w": "yarn test --watchAll"

"resolutions": {
    "@jest/create-cache-key-function": "^27.0.1"
}

---------------------

4) Update your bael.config.js file with the configs:

module.exports = function(api) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo', '@babel/preset-env'],
    plugins: ['inline-dotenv']
  };
};

---------------------

5) Insinde the src folder, create a folder named __tests__ and inside this, a
new folder named screens and inside it your test file with the extention fi-
le.test.tsx.

---------------------

6) Write your test importing the React, your screen or component that will be
tested and the render of '@testing-library/react-native'. Example:

import React from 'react'
import { render } from '@testing-library/react-native'
import { Profile } from '../../screens/Profile'

describe('Profile', () => {
    it('should showns correctly user input name placeholder', () => {
        const { getByPlaceholderText } = render(<Profile />)
        const inputName = getByPlaceholderText('Nome')
        expect(inputName.props.placeholder).toBeTruthy()
    })

    it('should check if user value is in the input', () => {
        const { getByTestId } = render(<Profile />)
        const inputName = getByTestId('test-name')
        expect(inputName.props.value).toEqual('Pablo')
    })

    it('should contains text node Profile', () => {
        const { getByTestId } = render(<Profile />)
        const title = getByTestId('test-title')
        expect(title.props.children).toContain('Profile')
    })
})

------------------------------GENERAL TIPS-----------------------------------

You need not start an application to test it. Using the render from @tes-
ting-library/react-native is simulated without starting an app.;

-----------------------------------------------------------------------------

Tests doesn't must to depend of external contexts, it should simulate your 
owns contexts and components, for this, users mocks.

-----------------------------------------------------------------------------

Use mockReturnValueOnce to not share the mock of a test with another test.

-----------------------------------------------------------------------------

If you will test funtions that comunicates with Async Storage, create in the 
root of your application a new file named setupFile.js with the config:

-----------------------------------------------------------------------------

import mockAsyncStorage from '@react-native-async-storage/async-
storage/jest/async-storage-mock';

jest.mock('@react-native-async-storage/async-storage', 
() => mockAsyncStorage);
