
====================STYLED COMPONENTS TEST EXAMPLE======================

1) Install jest-styled-components -D 

-------------

2) Inside your component folder, create a file named component.test.tsx

-------------

3) Define the props inside your component file (index.tsx) and in 
the style file to match props correctly. Example:

index.tsx:

import React from 'react'
import { Container } from './styles'
import { TextInputProps } from 'react-native'

interface Props extends TextInputProps {
    active?: boolean
}

export function Input({
    active = false,
    ...rest
}: Props) {
    return (
        <Container
            active={active}
            {...rest}
        />
    )
}

-------------

styles.ts:

import styled, { css } from "styled-components/native";
import { TextInput } from "react-native";

interface Props {
  active?: boolean;
}

export const Container = styled(TextInput)<Props>`
  width: 100%;
  padding: 4px;
  background-color: ${({ theme }) => theme.colors.shape};
  color: ${({ theme }) => theme.colors.text_dark};
  border-radius: 4px;
  margin-bottom: 12px;
  ${({ active }) =>
    active &&
    css`
      border-color: ${({ theme }) => theme.colors.atention};
      border-width: 2px;
      border-style: solid;
    `}
`;


----------------------

4) In your test file, import your theme and ThemeProvider, create 
a Provider function returning children inside the ThemeProvider 
and passing it as wrapper options inside an object as a second pa-
rameter of the render method. Example:

import React from 'react';
import { Input } from './'
import { render } from '@testing-library/react-native'
import { ThemeProvider } from 'styled-components/native'
import theme from '../../../global/styles/theme'

const Providers: React.FC = ({ children }) => {
    return (
        <ThemeProvider theme={theme}>
            {children}
        </ThemeProvider>
    )
}

describe('Input component', () => {
    it('should contains borderColor when active', () => {
        const { getByTestId } = render(
            <Input
                testID='input-email'
                placeholder='E-mail'
                keyboardType='email-address'
                autoCorrect={false}
                active
            />,
            {
                wrapper: Providers
            }
        )

        const inputComponent = getByTestId('input-email')
        expect(inputComponent.props.style[0].borderColor)
        .toEqual(theme.colors.atention)

    })
}) 