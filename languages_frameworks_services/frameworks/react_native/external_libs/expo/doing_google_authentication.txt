=========================DOING GOOGLE AUTHENTICATION============================


1)In your app.json file, create a new key named "scheme" with the value within 
the name of your app. Example:

{
  "expo": {
    "name": "gofinances",
    "slug": "gofinances",
    "scheme": "gofinances",
    "version": "1.0.0",
    "assetBundlePatterns": [
      "**/*"
    ]
  },
  "name": "gofinances"
}

------------------

2) Access https://docs.expo.dev/guides/authentication/#google e click in 
Create Google App. In the Google Cloud PLatform create a new project gi-
ving a name and clicking in Create.

------------------

3) Clik in OAuth consent screen, select the External in the field User Ty-
pe and click in create. A new form will be opened, fill it with your app 
name, your email, your logo, and the developer email, click in save and 
continue. In the next screen, click in Add or remove scope and select the 
resources that will be used in your application and click in update. Click 
in save and continue. In OAuth consent screen click in publish app. 

------------------

4) Go to Credentials and click in create credentials, click in OAuth client 
ID. A new window will be opened, select the Aplication web as appliation 
type, provide your application name, in Javscript Origins authorizeds, 
click in add URL and type https://auth.expo.io, Authorized redirect URIs, 
click in add URL and type https://auth.expo.io/@your-username/your-project-slug
(log in expo.io e goes to members section to get your user name and get your a-
pp slug in your app.json file) and click in create.

------------------

5) Create a new file .env.local in your app and copy your GoogleID and GoogleSe-
cret.

------------------

6) Install the expo install expo-auth-session expo-random to handle and help
with  the authentication proccess.

_________________

7) Create a context to provide your authentication info. The context should pro-
vide the userInfo from authentication and a function to signIn. In this context
you should create an async function waiting for AuthSession.startAsync() method 
passing the authUrl as param and returning the userInfo if the type of response 
is equal to success. Example:

import { createContext, ReactNode, useState } from 'react'
import * as GoogleSession from 'expo-auth-session'

interface UserProps {
    id: string;
    name: string;
    email: string;
    photo?: string;
}

interface AuthContextProps {
    userInfo: UserProps
    signInWithGoogle(): Promise<void>
}

interface ChildrenProps {
    children: ReactNode
}

interface AuthResponseProps {
    params: {
        access_token: string
    },
    type: string;
}

export const AuthContext = createContext({} as AuthContextProps)

export function AuthProvider({ children }: ChildrenProps) {

    const [user, setUser] = useState<UserProps>({} as UserProps)

    async function signInWithGoogle() {
        try {
            const { CLIENT_ID } = process.env
            const { EXPO_REDIRECT_URL } = process.env;
            const RESPONSE_TYPE = 'token';
            const SCOPE = encodeURI('profile email');
            const authUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${CLIENT_ID}&redirect_uri=${EXPO_REDIRECT_URL}&response_type=${RESPONSE_TYPE}&scope=${SCOPE}`

            const { type, params } = await GoogleSession.startAsync({ authUrl }) as AuthResponseProps

            if (type === 'success') {
                const response = await fetch(`https://www.googleapis.com/oauth2/v1/userinfo?alt=json&access_token=${params.access_token}`)
                const userInfo = await response.json()
                console.log(userInfo)
                setUser({
                    id: userInfo.id,
                    email: userInfo.email,
                    name: userInfo.given_name,
                    photo: userInfo.picture
                })
            }

        } catch (error) {
            throw new Error(String(error))
        }
    }

    return (
        <AuthContext.Provider value={{
            userInfo: user,
            signInWithGoogle
        }}>
            {children}
        </AuthContext.Provider>
    )
}


---------------

8) Create the useAuth hook to easely consume your auth data. Example:

import {useContext} from 'react'
import {AuthContext} from '../contexts/AuthContext'

export function useAuth(){
    return useContext(AuthContext)
}

---------------

9) Consume in your app. Example:

import  React from 'react'
import { RFValue } from 'react-native-responsive-fontsize'
import { Alert } from 'react-native'

import { Container } from './styles'
import GoogleSvg from '../../assets/google.svg'

import {SignInSocialButton} from '../../components/SignInSocialButton'
import {useAuth} from '../../hooks/auth'
import { GOOGLE_AUTH_ERROR } from '../../utils/constants'


export function SignIn() {

    const {signInWithGoogle} = useAuth()

    async function handleSignInWithGoogle(){
        try {
           await signInWithGoogle()
        } catch (error) {
            console.log(error)
            Alert.alert(GOOGLE_AUTH_ERROR)
        }
    }
    
  
    return (
        <Container>
                <SignInSocialButton 
                    activeOpacity={.8}
                    title='Entrar com Google'
                    svg={GoogleSvg}
                    onPress={handleSignInWithGoogle}
                    />
        </Container>
    )
}












