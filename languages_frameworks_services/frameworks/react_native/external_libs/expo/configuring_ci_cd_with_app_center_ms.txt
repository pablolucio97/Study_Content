=====================CONFIGURING CI CD WITH APP CENTER MS======================

---------------------------THE CONTINUOS CI/CD FLOW ---------------------------

1) The developer do some change in the code of the application hosted on 
GitHub.

2) A change is identified in the code, then a new build is automatically 
created.

3) The new build is sent to do GooglePlay and AppleStore that will avai-
lable it to end-users.

------------------CONFIGURING CI WITH APP CENTER MS WITH EXPO-----------------

1) Log in https://appcenter.ms/ and create a new organization to store 
your apps.

-------------------------

2) Click in "Add App", provide your app name identifying the platform, 
the app icon, select the OS, select the release type as Production, and  
the platform as React Native, and click in "Add new app". Repeat this 
process for both platforms.

-------------------------

3) Click in the App that you have been created, click in "Build", select
the GitHub, select your repository, select the branch and click in "Con-
figure build", a new modal will be opened.

-------------------------

4) Fill the build configurations with package.json in the field "Project",
"Build Variant" as release, select the node version with the most stable,
"Build frequency" set as "Build this branch on every push, enable the o-
ptions "Build Android App Bundle", "Automatically increment version code", 
and let "Build number format" set as "Build ID" 

-------------------------

5) Enable "Sign builds" and mark the option "My Graddle settings are en-
tirely set to handle singing automatically". Go to file android/app/build.
graddle and comment the line "signingConfig signingConfigs.debug" and com-
mit the changes to App Center generate the build automatically.

If you are working with a bare workflow project, you should to upload your
keystore file containing your keystore password, key alias and key password.
This file should be in android/app/production-android.keystore

-------------------------

6) Enable "Advanced" and copy your badge status URL to use in your ReadMe, and
click in "Save and build".

----------------------CONFIGURING ON GOOGLE CLOUD PLATFORM------------------------

1) Go to your GooglePlay console, click in "Settings" and in "API access", se-
lect create "Create new project" and click in "Link a new". Await for GooglePlay
while it is creating a new project on Google Cloud Platform.

-------------------------

2) Go to your Google Cloud Platform and select the new project created on Go-
glePlay. In the GCP, clik in "IAM & Admin", click in "Service Accounts" and 
click in "Create Service Account". Provide a name and a description for your 
app, and click in "Create and continue". Select the Project/Owner as Role and
click in "Continue" and click in "Finish".

-------------------------

3) Again in "Service Accounts" panel, click in the three points of your project, 
and click in "Manage keys", "Add key", "Create new key", select the JSON format 
and click in "Create", and save this file on your app in the folder resources.

-------------------------

4) Go to your GooglePlay console again and in the API Access page, click in 
"Update Service Account", in "Conced access", mark the option "All permissions", 
and click in "Invite user", "Send invite".

-------------------------

5) In the App Center, click in your app, click in "Distribute", "Stores", se-
lect "Google Play" and do the upload of your key JSON file, click in "Connect",
provide your package name (format com.yourappname) that is on Google Play and 
click in "Assign".

-------------------------

6) In the App Center again, click in "Build", click in "Configurations" (your 
app configurations), enable the option "Distribute builds", select "store", se-
lect the "Production", provide your release notes and click in "Save".
