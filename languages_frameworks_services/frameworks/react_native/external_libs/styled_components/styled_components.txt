=====DEFINING THEMES WITH STYLED COMPONENTS IN REACT NATIVE====

1) Create your theme inside themes/theme.ts. Example:ERROR:
export default {
    colors:{
        primary: '#5636D3',

        secondary:'#FF872C',
        secondary_light: 'rgba(255, 135, 44, .3)',

        sucesss:'#12A454',
        sucess_light:'rgba(18, 164, 85, .5)',

        atention: '#E83F5B',
        atention_light: 'rgba(232, 63, 91, .5)',

        shape: '#FFFFFF',
        title: '#363F5F',
        text: '#969CB2',
        background: '#F0F2F5'
    }
}

--------------------------------------------------------------

2) Inside the even folder (themes) create the styled.d.ts file 
declaration exporting an interface extending the DefaultTheme 
with your theme typing. Example:

import 'styled-components'
import theme from './theme'

declare module 'styled-components' {
    type ThemeType = typeof theme
    export interface DefaultTheme extends ThemeType {
        
    }
}

--------------------------------------------------------------

3) Wrap your app with the Styled Components theme provider.
Example:

import React from 'react';
import { ThemeProvider } from 'styled-components/native';
import { Dashboard } from './src/screens/Dashbaord';
import theme from './src/global/styles/theme'

export default function App() {
  return (
    <ThemeProvider theme={theme}>
        <Dashboard />
    </ThemeProvider>
  );
}

--------------------------------------------------------------

4) Acess your theme destructuring theme from props. Example:


import styled from 'styled-components/native'

export const Container = styled.View`
    flex: 1;
    justify-content: center;
    align-items: center;
    background-color: ${({theme}) => theme.colors.background};
    `

export const Title = styled.Text`
    font-size: 24px;
    font-weight: bold;
    color: ${({theme}) => theme.colors.title}
`

Obs: If you need to extends the native properties of a component 
and you're using Styled Components, you must declare you 
component into parenteses, otherwise typescript will 
complain about mismacthing styles typing. example:

const Button = styled(TouchableOpacity)``

========ACESSING ELEMENTS PROPS DIRECTLY IN STYLED COMPONENTS=======

Example:

export const HighlightCards = styled.ScrollView.attrs({
  horizontal: true,
  showsHorizontalScrollIndicator: false,
  contentContainerStyle: { paddingHorizontal: 24 },
})``;

===============RETURNING NATIVE ELEMENTS WITH CUSTOM TYPES===============

You can use all props of native elements and combine them with your     
properties and return them as a Styled Component element. Use the attrs 
method to extract the props from the index.tsx file to styled.ts file.
Example:

import {FlatList} from 'react-native'

interface User{
    name:string;
    age: number;
}


interface DataListProps {
    id: string;
    user: User[]
}

export const TransactionsList = styled(
  FlatList as new () => FlatList<DataListProps>
).attrs({
  showsVerticalScrollIndicator: false,
  contentContainerStyle: {
    paddingBottom: getBottomSpace()
  },
})``;

======USING ICONS WITH STYLED COMPONENTS AND @EXPO/VECTOR-ICONS======

1) Inside of your Styled Components file, import the Icons collection 
from @expo/vector-icons:

import { Feather } from "@expo/vector-icons";

---------------------------------------------------------------------

2) Create and export your Icon component passing the icon collection 
name inside the styled method:

export const PowerIcon = styled(Feather)`
    color: ${({ theme }) => theme.colors.secondary};
    font-size: ${RFValue(24)}px;
`
---------------------------------------------------------------------

3) Import and use your Icon component in your app:

<PowerIcon name='power' />