===========DOING UNITY TESTS ON NODEJS APPLICATIONS WITH VITEST============

1) Run npx yarn add vitest vite-tsconfig-paths -D to install the vitest 
and the vite-tsconfig-paths to vitest can read relative paths 
importation configs.

-------------

2) At your application root path, create a vite.config.ts file importing 
defineConfig from 'vitest/config', and tsconfigpaths from 
'vite-tsconfig-paths' and exporting the vite configuration function.
Example:


import {defineConfig} from 'vitest/config'
import tsconfigpaths from 'vite-tsconfig-paths'

export default defineConfig({
    plugins: [tsconfigpaths()]
})

-------------

3) On your package.json file, create the test script. Example:

"test" : "vitest"

-------------

4) Inside your repositories folder, create a new folder named as 
in-memory-repository with a in-memory-my-entity-repository. This 
file must export a mocked class containing all your real repository 
methods. Example:

import { Prisma, User } from "@prisma/client"
import { UsersRepository } from "../interfaces/prisma-users-repository"

export class InMemoryUsersRepository implements UsersRepository {

    public items: User[] = []

    async create(data: Prisma.UserCreateInput) {
        const user = {
            id: 'user-1',
            name: data.name,
            email: data.email,
            password_hash: data.password_hash,
            created_at: new Date(),
            checkin_id: '',
            checkins: []
        }

        this.items.push(user)

        return user
    }
    async findByEmail(email: string) {
        const user = this.items.find((item) => item.email === email)
        if (!user) {
            return null
        }
        return user
    }

}

-------------

5) Inside the your useCase folder create your test file 
(ex: regsterUser.spec.ts) and write your test. Example:

import { describe, it, expect } from 'vitest'
import { RegisterUseCase } from './registerUser'
import { compare } from 'bcryptjs'
import { InMemoryUsersRepository } from 
'@/repositories/in-memory/in-memory-users-repository'

describe('Register Use Case', () => {
    it('should hash user password correctly on registration', 
        async () => {
        const usersRepository = new InMemoryUsersRepository()
        const registerUseCase = new RegisterUseCase(usersRepository)

        const { newUser } = await registerUseCase.execute({
            email: 'johndoe2@gmail.com',
            name: 'johndoe',
            password: 'abc123'
        })

        const isPassCorrectlyHashed = await compare(
            'abc123',
            newUser.password_hash
        )
        expect(isPassCorrectlyHashed).toBe(true)
    })
})

==========================GENERAL TIPS===============================

Generally each route has a business rule, your tests must cover each 
business rules and not functional requirements.

---------------------------------------------------------------------

Unity tests doesn't has connection with database during the test, to 
perform an unity test you must create an in memory repository that 
contains all your real repository methods mocking your database format 
structure to be used in your tests.
