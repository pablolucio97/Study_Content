
----------------------USING CLOUD STORAGE WITH REACT NATIVE--------------------

1) In the Firebase Console, select your project and click,  "Storage" and in
"Rules".

------------------------

2) Edit your rules initially like below and then click in "Publish":

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write;
    }
  }
}

------------------------

3) Install yarn add @react-native-firebase/app if you ready does not it, and 
run yarn add @react-native-firebase/storage to install the Storage.

------------------------

4) On your project storage page, create a new folder to store your files. In
your project, you will need for the install and implements the ExpoImagePi-
cker to select your images.

------------------------

Uploading files:

  const [image, setImage] = useState('');

  async function handleUpload() {
    try {
      const fileName = new Date().getTime()
      const reference = storage().ref(`/images/${fileName}.png`);
      reference.putFile(image)
        .then(() => console.log('Upload complete'));
    } catch (error) {
      console.log(error)
    }
  
------------------------

Uploading files with progress:

  const [image, setImage] = useState('');
  const [transferredBytes, setTransferredBytes] = useState('');
  const [progress, setProgress] = useState('0');

  async function handleUpload() {
    try {
      const fileName = new Date().getTime()
      const reference = storage().ref(`/images/${fileName}.png`);

      const uploadTask = reference.putFile(image)

      uploadTask.on('state_changed', snapShot => {
        const percent = ((snapShot.bytesTransferred / snapShot.totalBytes) * 100)
          .toFixed(0)
        setTransferredBytes(`${snapShot.bytesTransferred} transferido de ${snapShot.totalBytes}`)
        setProgress(percent)
      })

      uploadTask.then(() => {
        console.log('Upload completed')
      })
    } catch (error) {
      console.log(error)
    }
  }

------------------------

Listing files from storage

  const [photos, setPhotos] = useState<FileProps[]>([])

  useEffect(() => {
  storage()
    .ref('/images')
    .list()
    .then(result => {
      const files: FileProps[] = []
      result.items.forEach(file => {
        files.push({
          name: file.name,
          path: file.fullPath
        })
      })
      setPhotos(files)
    })
}, [])

------------------------

Getting file props

const [currentPhotoView, setCurrentPhotoView] = useState('')
const [currentPhotoInfo, setCurrentPhotoInfo] = useState('')

async function handleShowImage(path: string) {
  const photo = await storage()
    .ref(path)
    .getDownloadURL()
    setCurrentPhotoView(photo)

    const info = await storage() 
    .ref(path)
    .getMetadata()
    setCurrentPhotoInfo(`Uploaded at ${info.timeCreated}`)
}

------------------------

Deleting a file

async function deleteImage(path: string) {
  await storage()
    .ref(path)
    .delete()
    .then(() => console.log('Deleted image successfully'))
}


REFS: https://firebase.google.com/docs/storage/web/upload-files