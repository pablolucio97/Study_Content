===============USING FIREBASE AND CLOUDFIRESTORE WITH REACT NATIVE================


------------------------CREATING A NEW FIREBASE PROJECT---------------------------

1.1) Create a new project in the Firebase console

--------------------

1.2) Run yarn add @react-native-firebase/app to install the React Native Firebase 
lib in your React Native project.

--------------------

1.3) On your Firebase console, in the of your project, click on "Android", provide
a name com.yourname to your application (get it in the MainActivity.java file),
provide you app alias. Provide your certicate going to your project, navigating 
to android folder and typing the command ./gradlew signingReport, copy the SHA1 
code of the "debugAndroidTest" variant, paste in the field "Debug signing certi-
ficate SHA-1 (optional)" and click in "Register App".

--------------------

1.4) Download your google-services.json file and put it in android/app folder, and
click in "Next" in the Firebase console.

--------------------

1.5) Add the line classpath("com.google.gms:google-services:4.3.10") inside an-
droid/build.gradlew inside the object buildscript>dependencies.

--------------------

1.6) In the android/app/build.gradlew add the lines:

apply plugin: "com.google.gms.google-services" after/below  the line 
apply plugin: "com.android.application"

----

implementation platform("com.google.firebase:firebase-bom:29.2.1") and the line
implementation "com.google.firebase:firebase-analytics" atfer/below
implementation "com.facebook.react:react-native:+" 

--------------------

1.7) On the Firebase Console, click in "Next" and in "Continue", restart your app 
running "yarn android" (Firebase is a native confoguration and doesn't work with 
Expo Go) and test if your application works fine.


-------------------CONFIGURING A NEW CLOUD FIRESTORE DATABASE--------------------

2.1) Access your Firebase Console application page, click in " FireStore Databa-
se" , click in "Create Database", select "Start in test mode" and click in 
"Next". Select the cefault "nam5 (us-cental)" and click in "Enable" and wait.

--------------------

2.2) After your database is created, click in "Start collection", provide your 
collection name, click in "Auto id" to generate an ID automatically to your new
document and goes filling your document keys and values and click in "Save" to 
record a new document in the current collection.

--------------------

2.3) In your application, run yarn add @react-native-firebase/firestore to ins-
tall the Cloud FireStore, if your'e in IOS, run cd ios/ && pod install to handle
native configurations.

--------------------HANDLING DOCUMENTS AND COLLECTIONS BY CODING----------------

3.1) Run @react-native-firebase/firestore to install the FireStore in your app.

--------------------

3.2) In your app, import the firestore from '@react-native-firebase/firestore' 
and run the document operations, examples:

Insert:
 
  async function handleAddProduct(){

    const customId = String(Date.now())

    try {
      firestore().collection('products')
      .doc(customId)
      .set({
        description,
        quantity,
        done: false,
        createdAt: firestore.FieldValue.serverTimestamp()
      }).then(() => {
        Alert.alert('Product has been added successfully')
      })
    } catch (error) {
      console.log(error)
    }
  }

------------------

Geting all documents only time:

interface ProductProps {
  id: string;
  description: string;
  quantity: number;
  done: boolean;
}

useEffect(() => {
try {
    firestore()
    .collection('products')
    .get()
    .then(response => {
        const data = response.docs.map(doc => {
        return {
            id: doc.id,
            ...doc.data()
        }
        }) as ProductProps[]
        setProducts(data)
    })
} catch (error) {
    console.log(error)
}
}, [])

------------------

Geting a single document at once:

  useEffect(() => {
    try {
      firestore()
      .collection('products')
      .doc('1648812096812')
      .get()
      .then(response => console.log(response.data()))
    } catch (error) {
      console.log(error)
    }
  }, [])

------------------

Getting all documents in real time:

useEffect(() => {
    const subscribe = firestore()
    .collection('products')
    .onSnapshot(querySnapshot => {
        const data = querySnapshot.docs.map((doc) => {
            return {
            id: doc.id,
            ...doc.data()
            }
        }) as ProductProps[];

        setProducts(data)
        })
    return () => subscribe();
}, [])

------------------

Filtering documents

  useEffect(() => {
    const subscribe = firestore()
    .collection('products')
    .where("quantity", ">=", 2)
    .onSnapshot(querySnapshot => {
      const data = querySnapshot.docs.map((doc) => {
         return {
           id: doc.id,
           ...doc.data()
         }
       }) as ProductProps[];

       setProducts(data)
     })
     return () => subscribe();
  }, [])

------------------

  Limiting documents query (useful for pagination)

  useEffect(() => {
    const subscribe = firestore()
    .collection('products')
    .limit(5)
    .onSnapshot(querySnapshot => {
      const data = querySnapshot.docs.map((doc) => {
         return {
           id: doc.id,
           ...doc.data()
         }
       }) as ProductProps[];

       setProducts(data)
     })
     return () => subscribe();
  }, [])

------------------

Ordering querys

  useEffect(() => {
    const subscribe = firestore()
    .collection('products')
    .orderBy('description', 'desc')
    .onSnapshot(querySnapshot => {
      const data = querySnapshot.docs.map((doc) => {
         return {
           id: doc.id,
           ...doc.data()
         }
       }) as ProductProps[];

       setProducts(data)
     })
     return () => subscribe();
  }, [])

Ordering querys by specific values

------------------

  useEffect(() => {
    const subscribe = firestore()
    .collection('products')
    .orderBy('quanitty')
    .startAt(2)
    .endAt(4)
    .onSnapshot(querySnapshot => {
      const data = querySnapshot.docs.map((doc) => {
         return {
           id: doc.id,
           ...doc.data()
         }
       }) as ProductProps[];

       setProducts(data)
     })
     return () => subscribe();
  }, [])

------------------

Updating a document 

function handleDoneToggle(){
  firestore()
  .collection('products')
  .doc(data.id)
  .update({
    done: !data.done,
  })
}

------------------

Deleting a document 

function handleDeleteProduct(){
  firestore()
  .collection('products')
  .doc(data.id)
  .delete()
}

------------------

Refs: https://firebase.google.com/docs/firestore