1) Log in your MercadoPago account and create a new application.

----------------------

2) Collect your all credentials relationed with your new application 
and put them in a .env file. Example

MERCADO_PAGO_CLIENT_ID=your client_id
MERCADO_PAGO_CLIENT_SECRET=your_client_secret
MERCADO_PAGO_TEST_PUBLIC_KEY=your_test_public_key
MERCADO_PAGO_TEST_ACCESS_TOKEN=your_test_access_token
MERCADO_PAGO_PROD_PUBLIC_KEY=your_prod_public_key
MERCADO_PAGO_PROD_ACCESS_TOKEN=your_prod_access_token

----------------------

3) On your API routes, create a new file exporting a function to
provide a POST request to generate your qrcode. It should return
an object containing your qrcodebase64img and the qrcodeurl.

Example:

import { NextApiRequest, NextApiResponse } from "next";
import MercadoPago from "mercadopago";

interface PaymentDataProps {
  transaction_amount: number;
  description: string;
  payment_method_id: "pix";
  payer: {
    email: string;
    first_name: string;
    last_name: string;
    identification: {
      type: string;
      number: string;
    };
    address: {
      zip_code: string;
      street_name: string;
      street_number: string;
      neighborhood: string;
      city: string;
      federal_unit: string;
    };
  };
}

export default async function (
  req: NextApiRequest,
  res: NextApiResponse
): Promise<void> {
  if (req.method === "POST") {
    MercadoPago.configurations.setAccessToken(
      process.env.MERCADO_PAGO_TEST_ACCESS_TOKEN
    );
    try {
      const { transaction_amount, description, payer }: PaymentDataProps =
        req.body;

      let paymentResponse = {
        qrCode: "",
        paymentLink: "",
      };

      await MercadoPago.payment
        .create({
          transaction_amount,
          description,
          payment_method_id: "pix",
          payer,
          installments: 0,
        })
        .then(
          (res) => (
            (paymentResponse.qrCode =
              res.body.point_of_interaction.transaction_data.qr_code_base64),
            (paymentResponse.paymentLink =
              res.body.point_of_interaction.transaction_data.qr_code)
          )
        );

      return res.status(201).send(paymentResponse);
    } catch (error) {
      console.log(error);
    }
  } else {
    res.send("METHOD NOT ALLOWED");
  }
}

----------------------

4) In your application, do a post in the endpoint of your api route 
passing your data to generate the qrcode. Example:

import api from '../services/api'

async function handlepayWithPix() {

setLoading(true)
const timer = setTimeout(() => {
    setLoading(false)
    handleOpenPixModal()
}, 2000)

const paymentData = {
    transaction_amount: 5.50,
    description: 'Plano Master',
    payer: {
        email: 'test@test.com',
        first_name: 'Test',
        last_name: 'User',
        identification: {
            type: 'CPF',
            number: '19119119100'
        },
        address: {
            zip_code: '06233200',
            street_name: 'Av. das Nações Unidas',
            street_number: '3003',
            neighborhood: 'Bonfim',
            city: 'Osasco',
            federal_unit: 'SP'
        }
    }
}

await api.post('/payments-pix', paymentData)
    .then(res => updatePayment(res.data.qrCode, res.data.paymentLink))

return () => clearTimeout(timer)

}

async function updatePayment(qrCode: string, paymentLink: string) {
    setQrCode(qrCode)
    setPaymentLink(paymentLink)
}





