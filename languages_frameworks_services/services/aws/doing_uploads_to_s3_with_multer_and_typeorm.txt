-------------------------------DOING UPLOADS TO AWS S3 BUCKET--------------------------------

1) After logged on AWS console and with an IAM user already created, search for S3 and click
on "bucket".

-------------------------

2) Click on "create bucket", provide a bucket name, select ab aws region, unmark "Block all 
public access" and mark the option "I acknowledge that the current settings might result..."
if your application will be public and create on "Create bucket".

-------------------------

3) In your project, run yarn add aws-sdk to install the AWS SDK (install the multer if you do
not have did it already), install the mime and your types running yarn add mime @types/mime@
2.0.3 and the dotenv running yarn add dotenv.

-------------------------

4) Crete the environmant variables from your aws console to your project the vars are 
AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY and AWS_BUCKET.

## AWS CREDENTIALS - MUST BE LIKE THAT BECAUSE AWS READ THESE PREFIXES
AWS_ACCESS_KEY_ID=your_aws_access_key
AWS_SECRET_ACCESS_KEY=your_aws_access_secret

## MUST BE SAME NAME YOU'VE CREATED ON CONSOLE
AWS_BUCKET=your_aws_s3_bucket_name

-------------------------

5) On your code create the StorageProvider inside shared/container/providers containing the
interface.

export interface IStorageProvider{
    save(file:string) : Promise<string>;
    delete(file:string) : Promise<string>;
}

-------------------------

6) Inside @config folders create a new file named as "upload" containing your multer. Example:

import multer from 'multer';
import { resolve } from 'path'
import {randomBytes} from 'crypto'

const tmpFolder = resolve(__dirname, '..', '..', 'tmp')

export default{
    tmpFolder,
    storage: multer.diskStorage({
        destination: tmpFolder,
        filename: (req, file, cb) => {
            const fileHash = randomBytes(16).toString('hex');
            const fileName = `${fileHash}-${file.originalname}`
            return cb(null, fileName)
        }
    })
}

-------------------------

7) Inside shared/container/providers create a new folder named as "implementations" and in-
side this a new file named as LocalStorageProvider.ts containing the local upload confi-
guration. Example:

import { IStorageProvider } from "../IStorageProvider";
import fs from 'fs'
import { resolve } from 'path'
import upload from '@config/upload'

class LocalStorageProvider implements IStorageProvider {
    async save(file: string, folder: string): Promise<string> {
        await fs.promises.rename(resolve(upload.tmpFolder, file),
            resolve(`${upload.tmpFolder}/${folder}`, file))
        return file
    }

    async delete(file: string, folder: string): Promise<string> {

        const fileName = resolve(`${upload.tmpFolder}/${folder}`, file)

        try {
            await fs.promises.stat(fileName)
        } catch (error) {
            return
        }
        await fs.promises.unlink(fileName)
    }

}

export { LocalStorageProvider }

-------------------------

8) Inside shared/container/providers/index.ts register your provider. Example:

import { container } from 'tsyringe'
import { LocalStorageProvider } from './StorageProvider/implementations/LocalStorageProvider'
import { IStorageProvider } from './StorageProvider/IStorageProvider'


container.registerInstance<IStorageProvider>(
    "StorageProvider",
    new LocalStorageProvider()
)


-------------------------


9) In your code add the StorageProvider you've created to the useClass that will deal 
with file uploads. Example:

import { IUsersRepository } from "@modules/accounts/repositories/IUserRepository";
import { IStorageProvider } from "@shared/container/providers/StorageProvider/IStorage-
Provider";
import { inject } from "tsyringe";

interface IRequest {
    user_id: string
    avatar_file: string;
}

class UpdateUserAvatarUseCase {
    constructor(
        @inject('UsersRepository')
        private usersRepository: IUsersRepository,
        @inject('StorageProvider')
        private storageProvider: IStorageProvider
    ) { }
    async execute({ user_id, avatar_file }: IRequest): Promise<void> {

        const user = await this.usersRepository.findById(user_id)

        await this.storageProvider.save(avatar_file, 'avatar')

        if(user.avatar){
            await this.storageProvider.delete(user.avatar, 'avatar')
        }

        user.avatar = avatar_file

        await this.usersRepository.create(user)
    }
}

export { UpdateUserAvatarUseCase };

-------------------------

10) Create your S3StorageProvider  class containing the Bucket configuration useing fs
to read your file and mime for define file content type. Example:

import { IStorageProvider } from "../IStorageProvider";
import { S3 } from 'aws-sdk'
import { resolve } from 'path'
import fs from 'fs'
import upload from "@config/upload";
import mime from 'mime'

class S3StorageProvider implements IStorageProvider {

    private client: S3

    constructor() {
        this.client = new S3({
            region: process.env.AWS_BUCKET_REGION
        })
    }

    async save(file: string, folder: string): Promise<string> {

        //reads file content
        const originalName = resolve(upload.tmpFolder, file)
        // add the file to S3 bucket
        const fileContent = await fs.promises.readFile(originalName)
        // allow to get the content type of a file
        const ContentType = mime.getType(originalName);

        await this.client.putObject({
            Bucket: `${process.env.AWS_BUCKET}/${folder}`,
            Key: file,
            ACL: 'public-read',
            Body: fileContent,
            //content type is required for avoiding an automatic download and 
            //allow to see the file
            ContentType,
        }).promise()

        //removes the content from a folder
        await fs.promises.unlink(originalName)
        return file
    }

    async delete(file: string, folder: string): Promise<void> {
        await this.client.deleteObject({
            Bucket: `${process.env.AWS_BUCKET}/${folder}`,
            Key: file,
        }).promise()
    }

}

export { S3StorageProvider }

-------------------------

11) Import the dotenv/config inside your app. Example:

import "reflect-metadata";
import 'dotenv/config';
import express, { json, NextFunction } from 'express';
import 'express-async-errors'
...


-------------------------


12) Do the Insomnia requisition.