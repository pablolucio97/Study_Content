---------------SENDING EMAILS IN PRODUCTION WITH SES AND NODEMAILER------------------

The advange of using AWS Simple Email Service is that this service because all emails
are sent in a single request avoiding your emails be considered like spam by the ser-
vice email. You will need to have a domain to use the AWS SES.

1) Have a ristered domain (like a domain from registro.br). Create an account on Zoho 
(you can use your Google account), searh for email and Get Started with Email and so 
link your Gmail account.

----------------

2) In the AWS console search for 'IAM' and so search for "SES" and enable all SES per-
mitions.

----------------

3) In the AWS console search for 'SES', change the region for 'sa-east-1 (São Paulo)',
search for 'Create identity' and so create a new valid domain identity and a new valid
email identity (Amazon will check for the veracity of the domain and the email, this 
process can take until 48h).

----------------

4) Download the legacy TXT scv files onefor email and another for domain.

----------------

5) Where you have bought the domain (ex: RegistroBr), do the login, search for "DNS",
go to the option. Paste the TXT name and TXT value in the match fields, select the TXT 
type and click on "Add"

----------------

6) Inside shared/container/providers/MailProvider create a new file named as 'SESMail-
Provider containing the implmentation of the MailProvider using AWS SES and passing 
the real email from AWS SES. Example:

import { injectable } from 'tsyringe';
import { IMailProvider } from '../IMailProvider';
import nodemailer, { Transporter } from 'nodemailer';
import handlebars from 'handlebars';
import fs from 'fs'
import aws from 'aws-sdk'

@injectable()
class SESMailProvider implements IMailProvider {
    private client: Transporter;
    constructor() {
      this.client = nodemailer.createTransport({
        SES: new aws.SES({
            apiVersion: '2010-12-01',
            region: process.env.AWS_REGION
        })
      })
    }

    async sendMail(
        to: string,
        subject: string,
        variables: any,
        templatePath: string
    ): Promise<void> {

        //reads the temaplteEmail content and convert to string
        const templateFileContent = fs.readFileSync(templatePath, 'utf8') 
        //compiles the converted string from templateEmail
        const templateParse = handlebars.compile(templateFileContent)
        //pass the variables from argument into the handlebars template
        const templateHTML  = templateParse(variables)

         await this.client.sendMail({
            to,
            from: 'Rentx <pablojmde@gmail.com>', //same from aws ses email
            subject,
            html: templateHTML
        })
    }
}

export { SESMailProvider }

----------------

7) Register the SESMailProvider using the tsyringe container. Example:

import { container } from 'tsyringe'
import { SESMailProvider } from './MailProvider/implementations/SESMailProvider'


container.registerInstance<IMailProvider>(
    "SESMailProvider",
    new SESMailProvider()
)

----------------

8) Cofigure your email template inside modules/views/emails/email.hbs. Example:


<!DOCTYPE html>
<html>
  <head>
    <style>
      .container {
        width: 800px;
        font-family: Arial, Helvetica, sans-serif;
      }
      span {
        margin: 10px 0;
        display: block;
      }
    </style>

  </head>
  <body>
    <div class="container">
  <img src="https://i.imgur.com/oUAKMC5.png"/>
  <span>Oi, {{name}}</span>

  <br/>

  <span>Você solicitou alteração de senha.</span>
  <span>Para realizar a troca, clique no link 
    <a href={{link}}>{{link}}</a>
  </span>

  <span>Caso não tenha sido você quem solicitou a alteração da senha, 
    basta ignorar este e-mail.</span>

  <strong>Obrigado!</strong>

  <h3>Equipe | <strong>Rentx</strong></h3>
</div>
  </body>
</html>


----------------

9) Authenticate in your application and test the email sending.

