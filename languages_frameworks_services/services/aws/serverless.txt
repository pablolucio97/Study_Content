=============================SERVERLESS================================

Concept: Serverless is an arquiteture oriented to events where the de-
veloper can stay focused only on in the code development without worry 
about infra and server management. The serverless has a server respon-
sible for run functions, do auto scaling and so and also allows costs 
reduction because you paid for what you use only when the server is 
called.

The use of serverless is recommended for actions that willn't be used 
ferquentlly.

--------------

Type of Serverless:
- BaaS: Backend as service where there are functionalities for authen-
tication, tables CRUD and more. Example: Firebase.

-FaaS: Function as servies. Are cloud providers that supply functions 
to run in cloud. Example: AWS Lambda, Google cloud function and more.


------------CREATING A SERVERLESS PROJECT WITH SERVERLESS FRAMEWORK,
 AWS DYNAMODB, AND LAMBDA-------------------------------------------

1) Run npm install -g serverless to install the serverless framework
in your machine.

References: https://www.serverless.com/framework/docs/getting-started

--------------

2) Run the command serverless create --template aws-nodejs-typescript 
--path your_project_name, navigate to your project and run yarn ins-
tall to install the project dependencies.

--------------

3) Removde the "lib" folder and all content into "functions" folder,
let the "functions" folder empty. Removes also the tsconfigpaths fi-
le in the root of the project, and remove the keys "extends" and 
"ts-node" in your tsconfig file.

--------------

4) Inside the "functions" folder, create a new file to write your 
function, inside this write your function that must be an arrow 
function with APIGatewayProxyHandler type return passing the status 
code and the body (body always inside JSON.stringify). In this e-
xample, we're importing document for acess the DynamoDB and the 
adding and reading data inside  our document. Example:

import { APIGatewayProxyHandler } from "aws-lambda"
import { document } from '../utils/dynamodbClient'

interface ICreatedCertificate {
    id: string
    name: string
    grade: string
}

export const handler: APIGatewayProxyHandler = async (event) => {

    const { id, name, grade } = JSON.parse(event.body) as ICreatedCertificate

    document.putItem({ // does a post or exchange the value if already exists
        TableName: 'users_certificates',
        Item: {
            "id": {"S": id},
            "name" : {"S": name},
            "grade":  {"S": grade},
            "created_at": {"S": new Date().toTimeString()}
        }
    }
        , function (err, data) {
            if (err) {
                console.log(err);
            } else {
                console.log(data);
            }
        }
    ).promise()

    const response = await document.query({
        TableName: 'users_certificates',
        KeyConditionExpression: "id = :id",
        ExpressionAttributeValues: {
            "id": {"S": id}
        }
    }, function(err, data) {
        if (err) {
          console.log("Error", err);
        } else {
          console.log("Success", data.Items);
        }
      }).promise()

    return {
        statusCode: 201,
        body: JSON.stringify(response.Items[0]) 
        // get always the first item of array because returns an array
    }
}

--------------

5) In the serverless.ts file, add your function inside the "func-
tions" key passing it as an object containing the handler and the
events. Example:

.....

  functions: { 
    generateCertificate: {
      handler: 'src/functions/generateCertificate.handler', //function path
      events: [
        {
          http: {
            path: 'generateCertificate',
            method: 'post',
            cors: true,
          }
        }
      ]
    }
   },

.....

--------------

6) To test your function locally, install the serverless-offline 
and  the esbuild in your project running yarn add serverless-off-
line esbuild -D. In the serverless.ts file, add the serverless-
offline as a plugin inside the "plugins" key. Run serverless off-
line and click in the URL generated to see your serverless run-
nig locally.

--------------

7) Inside serverless.ts, after the "custom" key, add a new key 
named as "resources" containing your DynamoDb table configura-
tions. Example:

resources: {
    Resources: {
      dbCertificatesUsers: { // name of your resource
        Type: "AWS::DynamoDB::Table", // DynamoDB table
        Properties: {
          TableName: "users_certificates",
          ProvisionedThroughput: { // operations/second allowed
            ReadCapacityUnits: 5,
            WriteCapacityUnits: 5
          },
          AttributeDefinitions: [ //only ID because it's nosql
            {
              AttributeName: "id",
              AttributeType: "S", // string
            }
          ],
          KeySchema: [
            {
              AttributeName: "id",
              KeyType: "HASH",
            }
          ]
        }
      }
    }
  }

--------------

8) Run yarn add serverless-dynamodb-local -D to test your dy-
namo db table locally. Inside the src folder, create a new 
"utils" folder with a new "dynamoDbClient.ts" file containing 
a condition for run the dynamodb locally or in production. Ex:

import { DynamoDB } from 'aws-sdk';

const options = {
    region: 'localhost',
    endpoint: 'http://localhost:8000', //default dynamodb port
}

const isOffline = () => {
    return process.env.IS_OFFLINE 
    // var env created automatically by serverless-offline
}

export const document = isOffline ?
    new DynamoDB(options) : new DynamoDB()

--------------

9) Add the plugin 'serveless-dynamodb-local' to the plugins key 
inside serverless.ts file and run serverless plugin install -n 
serverless dynamodb-local to install it.

--------------

10) Inside the serverless.ts file, inside the "custom key", add 
the "dyanamodb" key containing the the dynamodb configuration. 
Ex:

dynamodb:{
  stages: ['dev', 'local'],
  start: {
    port: 8000 ,// default dynamodb port,
    inMemory: true,
    migrate: true,
  }
}

--------------

11) Run serverless dynamodb start to test your serverless local-
ly thorugh Insomnia.

If you get problems, try to donwload and install Java JDK 17.

--------------

12) On AWS console, search for "IAM" and provide and add permission 
"Administrator Access" for your user.

-------------

13) On your project terminal run serverless config credentials 
--provider aws 
--key=your_access_key_id 
--secret=your_access_secret_id 

Obs: Pass the flag -o to overwrite existing credentials. To check 
if credentials are ok, run "cd~/.aws" to see the credentials.

-------------

14) In your serverless.ts file add the "lambdaHashingVersion" 
and "iamRoleStatements" props inside the provider object. Example:

   lambdaHashingVersion: '20201221',
    iamRoleStatements: [
      {
      Effect: "Allow",
      Action: ["dynamodb:*"],
      Resource: ["*"]
      }
    ]

-------------

15) In your package.json add the script "deploy" : "serverless 
deploy --verbose" and run yarn deploy

-------------

16) Run yarn add handlebars @types/handlebars -D to install the 
handlebars to create your  hbs template. And write your template.
Ex:

<html>
  <head>
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:
	wght@700&family=Roboto:wght@900&display=swap"
      rel="stylesheet"
    />

                <style id="page_style">
                    @page {
                       size: 1500px 920px;
                        margin: 0px;
                    }
                </style>
    <style>
   
      *,
      root,
      html,
      body {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        -webkit-print-color-adjust: exact;
      }
      .content {
        width: 1500px;
        height: 920px;
        background: #000;
        margin-top: -226px;
      }

      .label {
        margin-top: 176px;
        color: #04d361;
        margin-left: 100px;
        font-size: 60px;
        font-weight: bold;
        font-family: "Roboto Condensed", sans-serif;
      }

      .name {
        font-size: 28px;
        font-family: "Roboto", sans-serif;
        color: #fff;
        margin-left: 100px;
        margin-top: 30px;
      }

      .medal {
        padding: 104px;
      }

      .medal img {
        width: 193px;
      }

      .title {
        color: #fff;
        height: 100px;
        margin-left: 100px;
        margin-top: 226px;
        font-size: 50px;
        font-family: "Roboto", sans-serif;
      }

      .complete_text {
        color: #fff;
        font-family: "Roboto Light", sans-serif;
        font-size: 20px;
        margin-left: 100px;
        margin-top: 150px;
        max-width: 500px;
        text-align: left;
        line-height: 25px;
      }

      .date {
        color: #04d361;
        margin-left: 44px;
        font-size: 23px;
        font-family: "Roboto", sans-serif;
      }

      .uuid {
        color: #fff;
        padding-left: 0px;
        font-size: 19px;
        font-family: "Roboto", sans-serif;
        text-align: center;
        margin-top: 10px;
      }

      .right {
        float: right;
        position: absolute;
        top: 114px;
        margin-left: 1000px;
      }
    </style>
  </head>
  <body>
    <div class="certificate">
      <div class="content">
        <div class="left">
          <div class="title">
            <br />
            <span>Ignite - Node.Js</span>
          </div>
          <div class="label">
            <label class="">Certificado</label>
          </div>

          <div class="name">
            <label for=""> {{name}}</label>
          </div>

          <div class="complete_text">
            <span
              >Completou com sucesso a trilha de Node.JS no Ignite, 
              tendo  conhecimento em API, Banco de Dados, AWS, 
              Serverless, com
              aproveitamento {{grade}}
            </span>
          </div>
        </div>
        <div class="right">
          <div class="medal">
            <img
              src="data:image/png;base64,{{medal}}"
              alt=""
            />
          </div>
          <div class="date">
            <strong>Data de emissão:</strong> {{date}}
            <br />
          </div>
          <div class="uuid">
            <span> {{id}} </span>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>

-------------

17) In your function file, define a function to compile your hbs
template calling it passing your data containing your hbs template
path. Example:

interface ITemplate {
    id: string
    name: string
    grade: string
    medal: string;
    date: string
}

const compileTemplate = async (data: ITemplate) => {
    // navigates untill the destiny from your repository root
    const filePath = join(process.cwd(), 'src', 'templates', 'certificate.hbs')
    const html = readFileSync(filePath, 'utf8')
    return compile(html)(data)
}

  const medalPath = join(process.cwd(), 'src', 'templates', 'selo.png.')
    const medal = readFileSync(medalPath, 'base64')

    const data: ITemplate = {
        id,
        name,
        grade,
        date: dayjs().format('DD/MM/YYYY'),
        medal
    }

    const content = await compileTemplate(data)

-------------

18) Run yarn add puppeteer -D and run yanr add puppeteer-core chrome-
aws-lambda to install the puppeteer for open a browse, open a page and
save it as a pdf.

-------------

19) Import chromium from 'chrome-aws-lambda' the in your function file,
await starting the chromium.puppeteer, await pages opening new page, 
covert this page to pdf, set the pdf content as your hbs file content
and so close the browser. Example:

  const content = await compileTemplate(data)

  const browser = await chromium.puppeteer.launch({
        args: chromium.args,
        defaultViewport: chromium.defaultViewport,
        executablePath: await chromium.executablePath,
    })

    const page = await browser.newPage()
    const pdf = await page.pdf({
        format: 'a4',
        landscape: true,
        printBackground: true, //applies same css background
        preferCSSPageSize: true, //applies the style from css hbs
        path: process.env.IS_OFFLINE ? "./certiicate.pdf" : null
    })
    page.setContent(content)

    await browser.close()

-------------

20) In the serverless.ts file, add the "external" key passing 
the chrome-aws-lambda and so run yarn dev. Example:
external: ["chrome-aws-lambda"]

-------------

21) In the AWS console searh for S3, click on 'Create bucket', 
dismarck "Block Public Access ..." and click on 'Create bucket'

-------------

22) Inside your function.ts file, instance the S3 and use the 
method putObject to put an object inside the bucket. Example:

  const s3 = new S3()

await s3.putObject({
  //same name from aws s3
  Bucket: 'certificates-ignite-pablo-silva',
  Key: `${id}.pdf`,
  ACL: 'public-read',
  Body: pdf,
  ContentType: 'application/pdf'
}).promise()

-------------


23) In your serverless.ts file add permissions to s3 inside the 
iamRoleStatements prop. Example:

{
  Effect: "Allow",
  Action: ["s3:*"],
  Resource: ["*"]
}

-------------

24) In your serverless.ts file define the key "package" for below 
and then run yarn deploy. Example:
package: { individually: false, include: ["./src/templates/**"] }

OBS: The endpoint for running serverless functions locally probabilly 
is http://localhost:your_port/dev/name_function and to run em produc-
tion is https://your_aws_serverless_url/dev/name_function





