=====GENERATING CKECKOUT SESSION WITH STRIPE PAYMENT SYSTEM AND FAUNADB======

The checkout system consist in redirect the user to the payment page, the u-
ser fulfill your info and do the payment and then return to your applica-
tion.

1)Log with you account in stripe.com, goes to product, add product, configu-
re your product (your payment system) and save.

------------------------

2)Go to dashboard, developers, API keys, reveal and copy yout secret key and 
past it in a local.env variable.

------------------------

3) Run yarn add stripe to install the stripe and create a new folder named
services with a file stripe.ts.

------------------------

4) In the sripe fle import the Stripe and the name and version of your app
of the package.json and create and export a new instance of configuration 
of the Stripe sdk. Example:

import Stripe from "stripe";
import { name, version } from "../../package.json";

export const stripe = new Stripe(process.env.STRIPE_API_KEY, {
  apiVersion: "2020-08-27",
  appInfo: {
    name,
    version
  },
});

------------------------

5) Create a new file inside pages/api folder to ensure that the stripe key 
will be used only inside your application/back-end. Inside this file return 
a template async function verifing if the request type is POST (unique allo-
wed method) and creating a new customer inside the stripe customers list if 
the user not exists in the FaunaDB (check trought a query in the FaunaDb) and 
a new checkoutSession on stripe passing the customer being the new created 
stripeCustomer.id, payment options and the urls of success and cancel as env 
variables. Example:

import { stripe } from "../../services/stripe";
import { NextApiResponse, NextApiRequest } from "next";
import { getSession } from "next-auth/client";
import { query as q } from "faunadb";
import { fauna } from "../../services/fauna";

type User = {
  ref: {
    id: string;
  };
  data: {
    stripe_customer_id: string;
  };
};

export default async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === "POST") {
    const session = await getSession({ req });

    const user = await fauna.query<User>(
      q.Get(q.Match(q.Index("get_user_by_email"), q.Casefold(session.user.email)))
    );
    
    let customerId = user.data.stripe_customer_id;
    
    if (!customerId) {
      const stripeCustomer = await stripe.customers.create({
        email: session.user.email,})

        await fauna.query(
          q.Update(q.Ref(q.Collection("users"), user.ref.id), 
          {
            data: {
              stripe_customer_id: stripeCustomer.id,
            }
          })
          );

      customerId= stripeCustomer.id
    }

    const stripeCheckoutSession = await stripe.checkout.sessions.create({
      customer: customerId,
      payment_method_types: ["card"],
      billing_address_collection: "required",
      line_items: [{ price: "price_1JbiwWIezH33hFSXEL8nbJiI", quantity: 1 }],
      mode: "subscription",
      allow_promotion_codes: true,
      success_url: process.env.STRIPE_SUCCESS_URL,
      cancel_url: process.env.STRIPE_CANCEL_URL,
    });

    return res.status(200).json({ sessionId: stripeCheckoutSession.id });
  } else {
    res.setHeader("Allow", "POST");
    res.status(405).end("Method not allowed");
  }
};

------------------------

6)Install the axios for allow requests from the client runnin yarn add axios.
Create a file named api.ts inside the services folder with baseUrl content. Ex:

import axios from "axios";

export const api = axios.create({
  baseURL: "http://localhost:3000/api",
});

------------------------

7) Install the stripejs for allow handle the strip trought the client running
yarn add @stripe/stripe-js. Create a new file named stripe-js inside the servi-
ces folder exporting an async function that loads and return the public key of
stripe that can be found in your Stripe dasboard/developers/api-keys, use this 
key as env variable, example:

import { loadStripe } from "@stripe/stripe-js";


export async function getStripeJs(){
    const stripeJs = await loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY)
    return stripeJs;
}

------------------------

8) Inside of the file that will trigger the stripe service, create a function
to trigger the stripe payment doing a post request acessing the route with 
contains the checkoutSession logic using the getStripeJs from stripe-js if the 
user is logged in the application. Needs an authentication process before. Ex:

import { signIn, useSession } from 'next-auth/client'
import { api } from '../../services/api'
import { getStripeJs } from '../../services/stripe-js'
import styles from './styles.module.scss'

export function SubscribeButton() {

    const [session] = useSession()

    async function handleSubscribe() {
        if (!session) {
            signIn('github')
            return
        }

        try {
            const response = await api.post('/subscribe')
            const { sessionId } = response.data
            const stripe = await getStripeJs()
            await stripe.redirectToCheckout({ sessionId })
        } catch (error) {
        }
    }
    return (
        <button
            type="button"
            className={styles.subscribeButton}
            onClick={handleSubscribe}
        >
            <span>Subscribe now</span>
        </button>
    )
}