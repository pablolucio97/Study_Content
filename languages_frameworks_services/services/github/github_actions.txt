================================GITHUB ACTIONS==================================

GitHub actions is a framework for run custom workflows for software development 
process reducing the CI complexeties.

Continuos Integration is the practive of currently checking the code repository 
and valuating that code at every time code is merged or checked in, some tasks 
will running for check for 
your code and deploy it. Example with gradle: We may want to 
check and run gradle tasks :

./gradlew lint: checks bugs and potential improvements for correctness, 
security, performance,

./gradlew test: executes all of the unit tests in the project. This command will 
detect all unit tests in the project, compile them, and then execute them.

./gradlew assemble: assembles all the archives in the project
for building.

----------------------------DEFINING WORKFLOWS----------------------------------

Workflows are created as yaml files that must to inform when the code must run, 
what is the development environment looks like and what tasks should be carried 
out by the workflow.

1) In your project root, create a new folder named as .github/workflows. 
The directory "github/workflows" is a special directory recognized by GitHub.

------------

2) Inside this folder, create your workflow file with the yml extension. 
Ex: .github/workflows/deploy.yml. 

-----

2.1) Populate this file providing a name for your workflow (this name will be 
displayed in the workflows list in the actions tab under your repository).

-----

2.2) Say when the code must run (workflows can run in response to commits, 
pushes, schedully and more).

-----

2.3) Defines the jobs (actions) the workflow must execute.

Ex:

name: Android Build

on: pull_request

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1

      - name: Set Up JDK
        uses: Set Up JDK
        with: 
          java-version: 1.8

      - name: Run Tests
        run: ./gradlew test

      - name: Build Project
        run: ./gradlew assemble

------------

3) Commit and push the projects alterations containing the 
workflow file. GitHub actions will start working (you can 
see it and follow the action status clicking on the "Ac-
tions" tab inside your repository). 

---------------------------------CIs EXAMPLES----------------------------------

name: Run Unit Tests

on: [push]

jobs:
  run-unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - run: yarn

      - run: yarn test:unit


  --------------------


  name: Run E2E Tests

on: [pull_request]

jobs:
  run-e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: bitnami/postgresql
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: docker
          POSTGRESQL_PASSWORD: docker
          POSTGRESQL_DATABASE: ignite-gym-db

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - run: yarn

      - run: yarn test:e2e
        env:
          JWT_SECRET: testing
          DATABASE_URL: "postgresql://docker:docker@localhost:5432/ignite-gym-db?schema=public"


-------------------------------GENERAL TIPS-----------------------------------

Every workflow must have at least one job.

GitHub supports you use your own runners or GitHub hosted runners provided by 
GitHub.

If your are using yarn, your all ci setup must use yarn commands, if you're 
using npm, all ci setup must use npm commands.




