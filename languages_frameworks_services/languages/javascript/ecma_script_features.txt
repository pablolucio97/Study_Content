
-------------------------ARROW FUNCTIONS----------------------------

Arrow functions allow uses properties of classes using the variable 
this is outside the current scope.

The keys in an arrow function mean the body of the function and 
the parentheses mean the return of multiple lines and objects.

When an arrow function takes an only parameter, the parentheses, re-
turn and keys don't need. Example:

const myArray = [1,2,3,4,5,6]

arrayResult = myArray.map(item => item * 2)
.filter(item => item < 5)

console.log(arrayResult)

--------------------------DESTRUCTOR-------------------------------

Use the desustructurezation to split data from objects and arrays. 
Example:

const myAdress = {
    street: 'Street One',
    number: 57,
    uf_city: {
        uf: 'Texas',
        city: 'Cansas'
    }
}

const {street, number, uf_city: {uf, city}} = myAdress

console.log(street)
console.log(number)
console.log(uf)
console.log(city)

------------------------REST OPERATOR-----------------------------

The rest operator is used to get the rest of the data. Example:

const myArray = [1,2,3,4,5,6]
[a,b, ...c] = myArray
console.log(c)

-----------------------SPREAD OPERATOR----------------------------

The spread operator is used to copy and merge equals structures.
Example:

const usingSpread = [...myArray]
console.log(usingSpread)

------------------------------------------------------------------

Merging two arrays:

Example:

[...vector1, ...vector2]

---------------------------PROMISES-------------------------------

Promises are used to get data or do function waiting another 
task and should be used with try and catch block. The promises can 
be used of two ways:

Promise syntax:

const myPromise = new Promise ((resolve, reject) => {
	setTimeout(() => {
		resolve('The promise has resolved')
	} , 2000)
})

myPromise.then(result => 
	console.log(result)
)

-------------------------------------------------------------------

Async/await syntax:

const myPromise2 = async () => {
	try{
	  const content = await setTimeout(() =>  {
	   console.log('It is my content')}, 1000)
		return content
	}catch(error){
	   console.log('Error: ' + error)
   }
}

myPromise2()		


---------------------------GENERAL TIPS----------------------------

The variable this refer to current scope which is inserted.

Spread operators are useds after equals symbol and rest operators, 
before.

If an object has a even name to property and value, can be wrote 
only one. It is the short syntax.

When returning a a arrow function, use () to return html content
or {} to return javascript code.

Use the operator && to apply obligatolly a action case the first 
condition is true (ternary shortcut).

You should to use {} for destructuring objects and [] for destruc-
turing arrays and strings.

You should to use the return inside the {} block when using arrow
functions.

Use the operator ?? (Nullish coalescing operator) to return the 
right-hand site operand when its left-side operand is null or un-
defined. Example: 

const foo = null ?? 'default string';
console.log(foo);
// expected output: "default string"

!! is not an operator. It is the double-use of !. Its useful to 
convert an Object to true or  "null" or "undefined" or 0 to false,
it ever will return true or false instead of the primary object.

