=============================SOLID CONCEPTS====================================

The SOLID is five concepts wrote by Robert Martin that are used to turn
your code mo readable and arranged. The SOLID principles should be used 
when your application trends to grow up.

S (SRP) Single Responsibility: Each method or function should be a sin-
gle responsibility.

0 (OCP) Open Closed Principle:

L (LSP) Liskov Segregation Principle: An interface should be declared, and the
class in code should implements the types from this interface to maintain the 
code isolated and allow easy database exchanging.

I (ISP) Interface Segregation Principle:

D (DIP) Dependency Inversion Principle: The code that implements high level
code doesn't should depends of the code implements low level code. High level 
code are code are near the server and low level code are code are near the 
user.


-----------------APPLYING SOLID PRINCIPLES ON NODEJS PROJECTS-----------------

Applying SOLID in our application means segregate our code for adapte
easily on future changes. Our routes should be free for only call the 
the method of the controller responsible for handle the request and not 
handle it and not handle the business rules.

To apply some SOLID concepts on NodeJS projects, we're using a folder 
named "useCases" that contains all methods that will run in our appli-
cation where each method will be a caseUse.ts file (responsible for 
handle our business rules), a caseUseController.ts file (responsible 
for handle the request) and an index file (responsible for import the
caseUse and the caseUseController, use the caseUseController passing 
the caseUse as param and exporting the caseUseController to consume in
the application routes).


------------CLASSES DEFINITIONS AND USAGE FOLLOWING SOLID PRINCIPLES------------

Entities/Models: Are classes represents the data in your application. 
The type of displayed data. Example:

import { v4 as uuidV4 } from 'uuid'

class Category {
    id?: string
    name: string
    description: string
    created_at: Date;

    constructor() {
        if (!this.id) {
            this.id = uuidV4()
        }
    }
}

export { Category }

-----------

Repositories: Are classes handling the data from entities. Here occurs the
pure way of handle the data (create, list, updated and  delete) without a 
verification. Example:

import { Category } from "../../models/Category";
import { ICategoriesRepository, ICreateCategoryDTO } from "../ICategoriesRepository";


class CategoriesRepository implements ICategoriesRepository {
    private categories: Category[];

    private static INSTANCE: CategoriesRepository

    public constructor() {
        this.categories = []
    }

    public static getInstance(): CategoriesRepository {
        if (!CategoriesRepository.INSTANCE) {
            CategoriesRepository.INSTANCE = new CategoriesRepository();
        }
        return CategoriesRepository.INSTANCE
    }



    create({ name, description }: ICreateCategoryDTO): void {
        const category = new Category()

        Object.assign(category, {
            name,
            description,
            created_at: new Date()
        })

        this.categories.push(category)

    }

    list(): Category[] {
        return this.categories
    }

    findByName(name: string): Category {
        const category = this.categories
        .find(category => category.name === name)
        return category
    }

}

export { CategoriesRepository };

-----------

Services/useCases: Classes that are responsible to access the repositories 
data to execute the process watching the business rules. Example:

import { ICategoriesRepository } from "../../repositories/ICategoriesRepository"

interface RequestDataProps{
    name: string
    description: string
}

class CreateCategoryUseCase {

    constructor(private categoriesRepository : ICategoriesRepository){}

    execute({name, description} : RequestDataProps) : void {
      
        const categoryAlreadyExists = this.categoriesRepository.
        findByName(name)

        if (categoryAlreadyExists) {
            throw new Error('Category already exists.')
        }

        this.categoriesRepository.create({ name, description })
    }
}

export { CreateCategoryUseCase };


-----------

Controllers: Classes designed just for receives what comes from the request,
send these data to the useCase and return the response from useCase to the 
route. Example:

import { Request, Response } from "express";
import { CreateCategoryUseCase } from "./CreateCategoryUseCase";

class CreateCategoryController {

    constructor(private createCategoryUseCase: CreateCategoryUseCase) {}

    handle(req: Request, res: Response) {
        const { name, description } = req.body

        this.createCategoryUseCase.execute({ name, description })

        return res.status(201).send()
    }
}

export { CreateCategoryController }

---------------


SRP usage: Define a class service to do each method logic and valition 
before to call it on routes. The routes has only to call your class 
service and not do the logic validation. Example:

import { ICategoriesRepository } from "../repositories/ICategoriesRepository"

interface RequestDataProps{
    name: string
    description: string
}

class CreateCategoryService {

    constructor(private categoriesRepository : ICategoriesRepository){}

    execute({name, description} : RequestDataProps) : void {

      
        const categoryAlreadyExists = this.categoriesRepository.
        findByName(name)

        if (categoryAlreadyExists) {
            throw new Error('Category already exists.')
        }

        this.categoriesRepository.create({ name, description })
    }
}

export { CreateCategoryService };


------------

OCP usage:

------------

LSP usage: The LSP allows exchange the database of your application more 
easily because all code is based on a type that doesn't change and should 
be implmented in future classes. It's done segregating interfaces, buil-
ding classes implemented by these interfaces and using these classes on 
your code.

1) Create the interface that can be used with any database type and ex-
port it.

import { Category } from '../models/Category'

interface ICategoriesRepository {
    findByName(name: string): Category;
    list(): Category[];
    create(name: string, description: string): void;

}

export { ICategoriesRepository }

---------------

2) Create the repository that will implements your interface (use VS Co-
de quick fix to implements all methods from your interface in your new 
class) and be subtype of your interface. Example:

import { Category } from "../models/Category";
import { ICategoriesRepository } from "./ICategoriesRepository";

class PostgressCatgeories implements ICategoriesRepository {
    findByName(name: string): Category {
        console.log(name)
        return null
    }
    list(): Category[] {
        return null
    }
    create(name: string, description: string): void {
        console.log(name, description)
    }

}

export { PostgressCatgeories }

---------------

3) Define the type of the class you're using on your service as your
segregated interface too. Example:

import { ICategoriesRepository } from "../repositories/ICategoriesRepository"

interface RequestDataProps{
    name: string
    description: string
}

class CreateCategoryService {

    constructor(private categoriesRepository : ICategoriesRepository){}

    execute({name, description} : RequestDataProps) : void {

      
    const categoryAlreadyExists = this.categoriesRepository.findByName(name)

        if (categoryAlreadyExists) {
            throw new Error('Category already exists.')
        }

        this.categoriesRepository.create({ name, description })
    }
}

export { CreateCategoryService };

---------------

4) Finally, on your routes, instance and use your class. Example:

import { Router } from 'express'
import { PostgressCatgeories } from '../repositories/PostgresCatgegoriesRepository'
import { CreateCategoryService } from '../services/CreateCategoryService'

const categoriesRoutes = Router()
const categoriesRepository = new PostgressCatgeories()

categoriesRoutes.post('/', (req, res) => {
    const { name, description } = req.body

   const createCategoryService = new CreateCategoryService(categoriesRepository)

   createCategoryService.execute({name, description})
  
    return res.status(201).send()
})


export { categoriesRoutes }


------------

ISP usage:

------------

DIP usage:


Class


----------------------USE CASE PATTERN PROCESS OF CREATION----------------------

1) Create the Model: Class containing model properties and the method to gene-
rate id (uuid).

------------

2) Create the Repository: An file containing an interface for the repository 
and another to the dataDTO (the data itself). Another file with a class that
implements the repository interface with all methods intancing the repository,
instancing the array of the data with all methods for your future useCases.

------------

3) Create the useCases for each method: Create a class with private construc-
tor with the repository type and an execute method that access the construc-
tor and realize the method watching business rules according to the use case.

------------

4) Crate the controller. Create a class with private constructor with the use-
Case type and the Request Response interface returning a response for the fi-
nal user.

------------

5) Create an index file importing the repository, the useCase and the con-
trolller. Instance the repository through getInstance() method, instance the
new useCase passing the repository as param and instance the new controller 
passing the useCase as param and export the controller.

------------

6) Crate your route returning each controller.handle(req, res) method in each 
correspondent request and export it for the server or another routes index
file.

