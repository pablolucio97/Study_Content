=============================DOCKER COURSE=================================

-------------------------------CONCEPTS------------------------------------

Docker is a toll that helps creating containers solving conflicts that what
runs locally doesn't runs remotely. Docker also shares resources from the 
host machine to our local machine. Without Docker we'd need to configure, 
for example, a virtual machine for each SO type. Using Dokcer, Docker will 
handle all SO for us just by running the Docker.

Containers: Are isolated envinronments running on your machine.

-----------

Images: Are instructions to create a container. These images are 
variables and can be customized.

-----------

Docker Compose: Is like a container manager that defines which services 
should run.

-----------CREATING A IMAGE AND RUNNING IT IN A DOCKER CONTAINER-----------

1) Crate a .dockerignore file in the root of your project to ignore fol-
ders and files to not put in your container. Example:

node_modules
.git
.vscode

------------


2) In your root project folder, create a new Dockerfile will contains all 
instructions settings of our image to run our application inside the Do-
cker. Example:

FROM node

WORKDIR /usr/app

COPY package.json ./

RUN npm install

COPY . .

EXPOSE 3333

CMD ["npm", "run", "dev"]

------------

3) To create the docker image according our Dockerfile, run the command 
"docker build -t yourimagename .".

------------

4) To run our created image, run docker run -p 3333:3333 yourimagename 


-----------CREATING A IMAGE AND RUNNING IT IN A DOCKER CONTAINER-----------

1) In the root of application, create a new file named docker-compose-yml,
the content of this file must be all indented.

------------

2) Inside this file, define the version of docker and the services should 
run. Example: 

version: "3.7"

services:
    app:
        build: .
        container_name: rentalxapi
        ports:
            - 3333:333
        volumes:
            - .:/usr/app

------------

3) Run docker-compose up


--------------------DOCKER AND DOCKER-COMPOSE COMMANDS-----------------------


ctrc + c : closes the server

docker-compose up -d: Allows docker-compose image running without the server.

docker-compose stop: Stops all docker-compose images

docker-compose down: Deletes all docker-compose images

docker-compose start: Starts all docker-compose images

docker ps: List all images running

docker ps -a: List all images running or not

docker rm containerid: Removes the container (needs be stopped)

docker start containerid: Starts the container

docker stop containerid: Stops the container

docker logs yourcontainername -f: Logs all activies of your yourcontainername

docker exec -it yourcontainername /bin/bash: Access the virtual machine where 
your container is running (the image should be running).


-------------------------------GENERAL TIPS----------------------------------

The container/virtual machine created by Docker has a different IP from our
local machine IP.

Use the same port in your project and in the docker container.



