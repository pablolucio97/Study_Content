

------------------GENERATING JSONWEBTOKEN WITH TYPEORM USECASES-----------------

1) Run yarn addjsonwebtoken and yarn add @types/jsonwebtoken -D to install the 
jsonwebtoken.

--------------------

2) Create a folder named authenticateUser inside modules/your_module/useCase and 
inside this a new file named as AuthenticateUserUseCase.ts and another Authenti-
cateUserController.ts. In side the AuthenticateUserUseCase.ts file, create and 
export a new class that verifies if the user exists, if password is correct (use 
the compare() mehtod from bcryptjs passing the existing user and the user from 
the request to check it) and so generate the jasonwebtoken passing an empty ob-
ject as first arugment, an security encripted phrase generated on the site 
https://www.md5hashgenerator.com/ and an object of configuration as third ar-
gument. Ex:

import { inject } from "tsyringe";
import { compare } from 'bcryptjs'
import { sign } from 'jsonwebtoken'
import { IUsersRepository } from "../../repositories/implementations/IUserRepo";

interface IRequest {
    email: string;
    password: string;
}

interface IResponse {
    user: {
        name: string;
        email: string;
    };
    token: string;
}

class AuthenticateUserUseCase {

    constructor(
        @inject('UsersRepository')
        private usersRepository: IUsersRepository
    ) { }

    async execute({ email, password }: IRequest): Promise<IResponse> {
        const user = await this.usersRepository.findByEmail(email)
        const passwordMatch = await compare(password, user.password)

        if (!passwordMatch || !user) {
            throw new Error('Email or password incorrect')
        }

        const token = sign({}, '6ebbc2816367bcf0f8c10a5f5542b960', {
            subject: user.id,
            expiresIn: '1d'
        })

        return { user, token }
    }
}

export { AuthenticateUserUseCase }

--------------------

3) In side the AuthenticateUserController.ts export a class containing an async 
handle method that receices password and email from req.body, and execute your 
useCase passing password and email and returning a promise returning your token 
in json format. You must to have the container from 'tsyringe' already confi-
gured to UsersRepository. Example:


import { Request, Response } from 'express'
import { container } from 'tsyringe'
import { AuthenticateUserUseCase } 
    from '../authenticateUser/AuthenticateUserUseCase'


class AuthenticateUserController {

async handle(req: Request, res: Response): Promise<Response> {
    const { password, email } = req.body
    const authenticateUserUseCase = container.resolve(AuthenticateUserUseCase)
    const token = await authenticateUserUseCase.execute({ password, email })
    return res.json(token)
}

}

export { AuthenticateUserController }

--------------------

4) Define a route for authentication creating a new authentication.routes.ts 
passing your controller inside a post method. Example:

import { Router } from 'express'
import { AuthenticateUserController } from 
'../modules/accounts/useCases/authenticateUser/AuthenticateUserController'

const authenticateRoutes = Router()

const authenticateUserController = new AuthenticateUserController()

authenticateRoutes.post('/sessions', authenticateUserController.handle)

export { authenticateRoutes }

--------------------

5) Import the authenticateRoutes inside your index route file and use it.
Example:

import { Router } from 'express'
import { specificationsRoutes } from './specifications.routes'
import { usersRouter } from './users.routes'

const routes = Router()

routes.use('/users', usersRouter)
routes.use(authenticateRoutes)

export { routes }

-------------------------------GENERAL TIPS-----------------------------------

When working with refresht token, you can opt for expect for the token or 
refreshToken, generally the refreshToken, is most used. To do that, alter 
the ensureAuthenticate middlware to receive the refreshToken and not the 
token.