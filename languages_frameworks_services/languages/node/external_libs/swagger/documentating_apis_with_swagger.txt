=====================DOCUMENTATING APIS WITH SWAGGER=====================

1) Run yarn add swagger-ui-express and add @types/swagger-ui-express -D
to install the swagger on your project.

-------------

2) Inside the src folder, create a new swagger.json file containing your 
project api documentation Check if your tsconfig has enabled for resolve 
jsonModules. Example:

{
    "openapi" : "3.0.0",
    "info" : {
        "title" : "RentalX Documentation",
        "description" : "RentalX project Api",
        "version" : "1.0.0",
        "contact" : {
            "email" : "suportepablosilvadev.gmail.com"
        }
    }
}

-------------

3) In your server.js file, import the swagger and the swaggerJSON file 
and call the swagger through app.use passing the route as first param,
the swagger.serve and then the swagger.setup passing your swaggerJSON.
Example:


import express, { json } from 'express';
import swagger from 'swagger-ui-express'
import { routes } from './routes';

import swaggerJSON from '../src/swagger.json'

const app = express();

app.use(json())

app.use('/api-docs', swagger.serve, swagger.setup(swaggerJSON));

app.use(routes)

app.listen('3333', () => {
    console.log('listening on 3333');
})

-------------

4) Run the server and access your localhost/api-docs to see the swa-
gger providing the documentation.

An example of documentation with a GET and POST method:

{
    "openapi": "3.0.0",
    "info": {
        "title": "Ignite NodeJS Challenge Documentation",
        "description": "Ignite NodeJS Challenge project Api",
        "version": "1.0.0",
        "contact": {
            "email": "suportepablosilvadev.gmail.com"
        }
    },
    "paths": {
        "/users": {
            "post": {
                "tags": [
                    "Users"
                ],
                "summary": "Create user",
                "description": "Create a new user",
                "requestBody": {
                    "content": {
                        "aplplication/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "email": {
                                        "type": "string"
                                    }
                                },
                                "examples": {
                                    "name": "Pablo",
                                    "email": "suportepablosilvadev.gmail.com"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "User already exists"
                    }
                }
            },
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List users",
                "description": "List all users",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "List user by id",
                "description": "List an unique user by id passed in the route params",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "header",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad request"
                    }
                }
            }
        },
        "/users/{user_id}/admin": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Turn an user admin",
                "description": "You need an user_id to have access to this route",
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "required": true,
                        "style": "simple",
                        "explode": false,
                        "schema": {
                            "type": "string",
                            "format": "uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "body": {
                "required": [
                    "email",
                    "name"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "example": {
                    "name": "Maria Fernanda",
                    "email": "email@email.com"
                }
            }
        }
    }
}
