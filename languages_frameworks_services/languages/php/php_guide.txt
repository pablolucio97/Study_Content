<?php

//====================PHP BASIC - MAIN CODES AND FUNCTIONS======================
//==================================SUMARY======================================

//1)DECLARING VARIABLES
//2)DYNAMIC VARIABLES
//3)DATA TYPES
//4)QUOTATION TYPES AND CONCATENATION
//5)VARIABLES ESCOPE - USING $GLOBALS VARIABLES
//6)DECLARING CONSTANT VARIABLES
//7)DECLARING AND MANIPULATING ARRAYS
//8)FUNCTIONS OF ARRAYS
//9)IF, ELSEIF AND ELSE
//10)TRYING CONDITIONS BY TERNARY OPERATOR
//11)SWITCH AND CASE
//12)WHILE AND DO WHILE
//13)FOR AND FOREACH
//14)STRING FUNCTIONS
//15)NUMBER FUNCTIONS
//16)PERSONAL FUNCTIONS
//17)SUPERGLOBALS
//18)THE SUPERGLOBAL GET
//19)THE SUPERGLOBAL POST
//20)VALIDATING FILTERS FOR FORMS AND DISPLAYING ERRORS
//21)FILTERS SANITIZE
//22)DOING UPLOADS
//23)DOING MULTIPLE UPLOADS
//24)TYPES OF CRIPTOGRAFY AND SAFETY PASSWORDS WHIT PASSWORD HASH
//25)WORKING WHIT DATES
//26)FUNCTIONS WHIT DATES AND TIME
//27)WORKING WHIT COOKIES
//28)MANNERING ARCHIVES
//29)WORKING WHIT REGULAR EXPRESSION - REGEX


//==================================DECLARING VARIABLES======================================
//MY DATAS:
$name = "Pablo";
$age = 24;
$height = 1.75;

echo "My name is $name, I have $age old age and my heigth is $height.<br>";

// EXCHANGING MY DATAS:

$name = "Camila";
$age = 24;
$height = 1.65;

echo "My name is $name, I have $age old age and my height is $height.";
echo "<hr>";

//==================================DYNAMIC VARIABLES======================================

$drink = "juice";
$$drink = "pinapple";

echo $juice;

//==================================DATA TYPES======================================

    // DATA TYPES;
    //STRINGS
    $name = "Pablo";
    var_dump($name);
    
    echo "<hr>";

    //INT
    $age = 24;
    var_dump($age);
    
    echo "<hr>";

    //FLOAT
    $height = 1.75;
    var_dump($height);

    echo "<hr>";

    //BOOLEAN
    $admin = true;
    var_dump($admin);

    $employer = false;
    var_dump($employer);

    echo "<hr>";

    //ARRAYS

    $cars = array("Corolla","Cruze","Accord", 12, 20.6, true);
    var_dump($cars);

    echo "<hr>";

    //OBJECTS

    class Client{
        public $name;
        public function nameAttributing($name){
            $this->$name = $name;
        }
    }

    $client = new Client();
    $client -> nameAttributing("Pablo");
    var_dump($client);
    
    echo "<hr>";

    //SPECIAL DATAS

    //null

    $city = null;
    var_dump($city);

//==================================QUOTATION TYPES AND CONCATENATION======================================

    $name = "Pablo";
 //SIMPLE QUAOTATIONS
    echo 'My name is $name.';
    echo "<hr>";

//DOUBLE QUOTATIONS
    echo "My name is $name.";
    echo "<hr>";

//CONCATENATION
    echo "My name is \"$name.\"";


//==================================VARIABLES ESCOPE - USING $GLOBALS VARIABLES======================================
$name = "Pablo";
$a = 8;
$b = 18;
$c = 10;

//USING A GLOBAL VARIABLE INSIDE A FUNCTION

function displayName(){
    global $name;
    echo $name;
}

displayName();
echo "<hr>";

// USING A VARIABLE OF A FUNCTION, IS NEED DECLARE THE VARIABLE HAS GLOBAL

function nameTest(){
    global $nametest;
    $nametest = "Pablo Lucio";
    echo $nametest;
}

nameTest();

echo"<hr>";

// USING GLOBAL ARRAY LIKE VARIABLES

function summing(){
    echo $GLOBALS['a'] + $GLOBALS['b'] + $GLOBALS['c'];
}

summing();

//==================================DECLARING CONSTANT VARIABLES======================================

// DECLARING CONSTANTS, OBS, THE CONSTANT NAMES ALWAYS BE WRITEN IN UPPERCASE

define("NAME","Pablo");
define("AGE", 24);
define("HEIGTH", 1.75);
define("MARRIED", true);

echo  AGE;
echo "<hr>";


// DECLARING CONSTANTS LIKE ARRAYS;
define("TEAMS", ["Barcelona", "REAL", "MANCHESTER"]);

echo TEAMS[2];

//==================================DECLARING AND MANIPULATING ARRAYS========================================

// DECLARING ARRAYS

$brandcars = ["BMW", "CHEVROLET", "FORD", "PORSHE"];
echo $brandcars[3];

echo"<hr>";

$brandcars = ["BMW", "CHEVROLET", "FORD", "PORSHE"];
print_r($brandcars);

echo"<hr>";

// ADDING ITENS ON ARRAYS

$brandcars = ["BMW", "CHEVROLET", "FORD", "PORSHE"];
$brandcars[] = "FERRARI";
$brandcars[7] = "TESLA";
print_r($brandcars);
echo"<hr>";

//COUNTING THE NUMBER OF ELEMENTS OF AN ARRAY - count

$totalbrandcars = count($brandcars);
echo $totalbrandcars;
echo "<hr>";

// LOOP TO RUN ARRAYS - foreach

$cars = ["Fusion","Cruze","Corolla"];

foreach ($cars as $values) {
    echo $values. "<br>";
}

echo "<hr>";

// ASSOCIATIVE ARRAYS - USEFUL TO SEARCH A VALUE IN THE EXTENSION OF THE ALL ARRAY BY ONLY AN IDENFICATOR
$fruits = ["bite" => "lemon", "red" => "apple", "sweet" => "cherry"];
foreach ($fruits as $identify => $value){
    echo $identify.":".$value."<br>";
}

//==================================FUNCTIONS OF ARRAYS========================================

// is_array- VERIFY IF A VARAIBLE IS AN ARRAY.

$names = ["Pablo", "Camila", "José", "Maria"];
echo is_array($names);
echo "<hr>";

//in_array - VERIFY IF A VALUE THERE IS IN AN ARRAY.

echo in_array("Pablo", $names);
echo "<hr>";

// array_keys - RETURN A NEW ARRAY WHIT THE KEYS PASSED HAS PARAMETERS.

$keys = array_keys($names);
print_r($keys);
echo "<hr>";

//array_values - RETURN  NEW ARRAY WHIT THE VALUES PASSED WHIT PARAMETERS.

$values = array_values($names);
print_r ($values);
echo "<hr>";

//array_merge - JOIN THE CONTENT OF TWO ARRAYS.

$names = ["Pablo", "Camila", "José", "Maria"];
$overnames = ["SANTANA" , "ALMEIDA", "SILVA", "PESSOA"];
$nameandovername = array_merge($names, $overnames);
print_r ($nameandovername);
echo "<hr>";

//array_pop - DELETE THE LAST POSITION ON THE ARRAY.

array_pop($names);
print_r($names);
echo "<hr>";

//array_shift - DELETE THE FIRST POSITION ON THE ARRAY.

array_shift($names);
print_r($names);
echo "<hr>";

//==================================IF, ELSE, ELSEIF AND TERNARY OPERATOR========================================

//IF, ELSE, AND ELSEIF

$number = 12;

if($number == 10):
    echo "Is equal to 10.";
elseif ($number <=10):
    echo "Is lower than 10.";
else:
    echo "Is higther than 10.";
endif;

echo "<hr>";

//==================================TRYING CONDITIONS BY TERNARY OPERATTOR========================================

//TRYING CONDITIONS BY TERNARY OPERATTOR - OPTION TO IF, ELSE AND ELSEIF

$average = 8.9;

echo ($average >= 7.0) ? "Aproved" : "Reproved";

echo "<hr>";

//==================================SWITCH AND CASE========================================

// SWITCH AND CASE

$color = "red";

switch($color):
    case "green":
    echo "Your prefered color is green.";
    break;

    case "red":
    echo "Your prefered color is red.";
    break;

    case "blue":
    echo "Your prefered color is blue.";
    break;

    default:
    echo "Your prefered color don't is blue, neight red or green.";
endswitch;

//==================================WHILE AND DO WHILE========================================

//WHILE

$counter = 1;

while($counter <=10):
    echo "Counter is: $counter. <br>";
    $counter++;
endwhile;

echo "<hr>";


//DO WHILE

$counter1 = 1;
do {
    echo "Counter is $counter1. <br>";
    $counter1++;
} while($counter1 <=10);


//==================================FOR AND FOREACH========================================

//FOR - USEFUL WHEN YET KNOW THE NUMBER OF REPETIONS NEEDED

for ($counter = 5; $counter >= 1; $counter--):
    echo "The counter is $counter.". " 10 x $counter =  ".($counter * 10). "<br>";
endfor;

    echo "<hr>";

//FOREACH - USEFUL TO SHOW EACH INDICE OF THE ARRAY SINGLELY

$colors = ["orange", "red", "yellow"];

foreach ($colors as $indice => $values):
    echo "$indice"." $values <br>";
endforeach;

//==================================STRING FUNCTIONS========================================

// strtotupper - CONVERT THE STRING TO UPPERCASE

$name1 = "Pablo";
$newname1 = strtoupper($name1);
echo "$newname1";
echo "<hr>";


// strtotupper - CONVERT THE STRING TO LOWERCASE

$name2 = "Pablo";
$newname2 = strtolower($name2);
echo "$newname2";
echo "<hr>";

// substr - RETURN A PART OF THE STRING

$phrase = "Hello World!";
$phrasereturn = substr($phrase, 2, 5);
echo "$phrasereturn";
echo "<hr>";

// str_pad - COMPLETE A STRING WITH A NUMBER OF CHARACTERES

$object = "keybord";
$newobject1 = str_pad($object, 16, "wireless_");
$newobject2 = str_pad($object, 16, "wireless_", STR_PAD_LEFT);
echo "$newobject1";
echo "<br>";
echo "$newobject2";
echo "<hr>";

// str_repeat - RPEAT A STRING

$fruit = "cherry";
$newfruit = str_repeat($fruit, 3);
echo "$newfruit";
echo "<hr>";

// strlen - RETURN THE LENGTH OF A STRING

$color = "gray";
$colorlength = strlen($color);
echo "$colorlength";
echo "<hr>";

// str_repleace - REPLEACE A STRING BY OTHER STRING

$word = "bill";
$wordreplace = str_replace("bill", "bull", $word);
echo "$wordreplace";
echo "<hr>";

// strpos - RETURN THE POSITION OF A STRING IN A VARIABLE

$text = "I am a simple man in seek of knowledge!";  
$textseek = strpos($text, "simple");
echo "$textseek";
echo "<hr>";

//==================================NUMBER FUNCTIONS========================================

//number_format - FORMAT A NUMBER

$n1 = 1234.56;
$n1price = number_format($n1, 2, ",", ".");
echo "The price of the product is R$"."$n1price<hr>";
echo "<hr>";

// round - ROUND A NUMBER BY ACCORDING MATHEMATTIC RULES;

echo round(3.25);
echo "<hr>";

// ceil - ROUND A NUMBER TO UP;

echo ceil(3.25);
echo "<hr>";

// floor - ROUND A NUMBER TO UP;

echo floor(3.75);
echo "<hr>";

//rand - ROAMING NUMBERS BY AN DEFINED INTERVAL;

$n5 = 1;
$n6 = 50;
echo rand($n5, $n6);
echo "<hr>";

//==================================PERSONAL FUNCTIONS========================================

//HOW TO CREATE PERSONAL FUNCTIONS - IN EACH SITUATION, A NEW FUNCTION CAN BE NEEDED

// example 01 - displayng a name

function displayname($name){
    echo "Dsiplaying the name $name";
}

displayname("Pablo");
echo "<hr>";

// example 02 - calculating a media

function calculateMedia($alun, $note1, $note2, $note3, $note4){
    $media = ($note1 + $note2 + $note3 + $note4) / 4;
    if ($media >= 7):
        echo "Congratulations, $alun, you are aproved! Your media is $media.";
    else:
        echo "The media is $media, $alun, you are reproved!";
    endif;
}

calculateMedia("Pablo", 5, 8.7, 6.10, 9);
echo "<hr>";

//==================================SUPER GLOBALS========================================

// SUPERGLOBALS

// GLOBALS - ARE USED TO USE A EXTERN VARIABLE TO A F

$x = 5;
$y = 10;

function sum(){
    echo $GLOBALS["x"] + $GLOBALS["y"];
}

sum();
echo "<hr>";


// SERVER - GIVE INFORMATIONS ABOUT URL SCRIPT, LOCAL URL, SERVER URL AND OTHERS

echo $_SERVER["PHP_SELF"];
echo "<hr>";
echo $_SERVER["SERVER_NAME"];
echo "<hr>";
echo $_SERVER["SCRIPT_FILENAME"];
echo "<hr>";
echo $_SERVER["DOCUMENT_ROOT"];
echo "<hr>";
echo $_SERVER["SERVER_PORT"];
echo "<hr>";
echo $_SERVER["REMOTE_ADDR"];
echo "<hr>";

//==================================THE SUPERGLOBALS GET========================================

//USING THE SUPERGLOBAL GET IN TAG OR HTML FILE
//THE SUPERGLOBAL GET SHOULD BE EMPLOYED IN THE FORM HTML, WHIT ATTRIBUTE METHOD

<html>
<body>
<form action="dates2.php" method="GET">
Name: <input type="text" name="name2">
Email: <input type="email" name="email2">
<input type="submit" name="sent" value="Sent">
</form>
<a href="dates2.php?age=25&overname=Walker">Sent data:</a>
</body>
</html>

//USING SUPERGLOBAL GET IN PHP ARCHIVE,

$name2= $_GET["name2"];
$email2 = $_GET["email2"];

echo "Your name is $name2 and your e-mail is $email2.";

echo "<hr>";

// USES ONLY ONE COMMAND BY TIME USING $_GET, THEREFORE THE PHP RECONGNIZE ONLY ONE VARIABLE $_GET BY TIME IN A FILE

echo $_GET["age"]."<br>". $_GET["overname"];

//==================================THE SUPERGLOBALS POST========================================

//USING THE SUPERGLOBAL POST IN TAG OR HTML FILE
//THE SUPERGLOBAL POST SHOULD BE EMPLYED IN THE FORM HTML, WHIT ATTRIBUTE METHOD

<html>
<body>
<form action="dates.php" method="POST">
Name: <input type="text" name="name">
Email: <input type="email" name="email">
<input type="submit" name="sent" value="Sent">
</form>
</body>
</html>

//USING SUPERGLOBAL POST IN PHP ARCHIVE,

$name = $_POST["name"];
$email = $_POST["email"];

echo "Your name is $name and your e-mail is $email.";

//==================================VALIDATING FILTERS FOR FORMS AND DISPLAYING ERRORS========================================

//USING VALIDATE FIRLTERS AND SHOWING MESSAGE ERORS IF AN ERROR AS OCURRED

//VERIFING IF A BUTTON "sentform" OF THE FORM HAS PRESSED
if (isset($_POST["sentform"])):

 //CREATING AN ARRAY TO DISPLAY ERRORS CASE AN ERROR AS OCURRED
        $errors = [];

        //USING VALIDATE FIRLTERS BY ACCORDING THE DATA TYPE (INT, FLOAT, EMAIL, IP, URL)

         if(!$age = filter_input(INPUT_POST, "age", FILTER_VALIDATE_INT)): 
            $errors[] = "Age need be an int value.";
         endif;

        if (!$email = filter_input(INPUT_POST, "email", FILTER_VALIDATE_EMAIL)):
            $errors[] = "Incorret format e-mail.";
        endif;

        if(!$weigth = filter_input(INPUT_POST, "weigth", FILTER_VALIDATE_FLOAT)):
            $errors[] = "Weight need be a float value.";
        endif;

        if (!$ip = filter_input(INPUT_POST, "ip", FILTER_VALIDATE_IP)):
            $errors[] = "IP format incorret.";
        endif;
        
        if (!$url = filter_input(INPUT_POST, "url", FILTER_VALIDATE_URL));
            $errors[] = "URL format incorret.";
        endif;

    // SHOWING MESSAGE ERRORS
        if (!empty($errors)):
            foreach($errors as $error):
                echo "<li> $error </li>";
            endforeach;
    
    endif;

//HTML FORM

    <body>
        <form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="POST">
            Age: <input type="text" name="age"><br>
            E-mail: <input type="text" name="email"><br>
            Weigth: <input type="text" name="weigth"><br>
            IP: <input type="text" name="ip"><br>
            URL: <input type="text" name="url"><br>
            <button type="submit" name="sentform">Sent</button>
        </form>

    </body>
</html>

//==================================USING FILTERS SANITIZE========================================

if(isset($_POST["sentform"])):

    //ERRORS ARRAY
    $errors =[];

   //SANITIZE - FILTER THE INPUT REMOVING CHARACTERS THATS ARE NOT OF THE SAME INPUT TYPE

    //FILTER_SANITTIZE_SPECIAL_CHARS
    //      PHP FUNCTION   TYPE       VAR     FILTER TYPE
    $name = filter_input(INPUT_POST, "name", FILTER_SANITIZE_SPECIAL_CHARS);
    echo "$name";

    //FILTER_SANITIZE_NUMBER_INT
    $age = filter_input(INPUT_POST, "age", FILTER_SANITIZE_NUMBER_INT);
    echo "$age";
    //USING filter_var
    if(filter_var($age, FILTER_VALIDATE_INT)):
        $errors[] ="Age need be a int.";
    endif;

    //FILTER_SANTITIZE_NUMBER_FLOAT
    $heigth = filter_input(INPUT_POST, "heigth", FILTER_SANITIZE_NUMBER_FLOAT);
    echo "$heigth";
    //USING filter_var
    if(filter_var($heigth, FILTER_VALIDATE_FLOAT)):
        $errors[] = "Height need be a float."

    //FILTER_SANITIZE_EMAIL
    $email = filter_input(INPUT_POST, "email", FILTER_SANITIZE_EMAIL);
    echo "$email";
    //USING filter_var
    if(filter_var($email, FILTER_VALIDATE_EMAIL)):
        $errors[] = "Incorrect e-mail format."

    //FILTER_SANITIZE_URL
    $url = filter_input(INPUT_POST, "url", FILTER_SANITIZE_URL);
    echo "$url";

        //DISPLAYING MESSAGES 

        if(!empty($name)):
            foreach($errors as $error):
                echo "<li> $error </li>";
            endforeach;
        endif;
    endif;

    //HTML FORM

    <body>
        <form action="<?php echo $_SERVER["PHP_SELF"]; ?>" method="POST">
            Name: <input type="text" name="name"><br>
            Age: <input type="text" name="age"><br>
            Heigth: <input type="text" name="heigth"><br>
            E-mail: <input type="text" name="email"><br>
            URL: <input type="text" name="url"><br>
            <button type="submit" name="sentform">Sent</button>
        </form>

    </body>
</html>

//==================================DOING SINGLE UPLOADS========================================

//TO DO A UPLOAD IS NEED CREATE A FOLDER TO UPLOAD THE FILES. CREATE A FOLDER NAMED "Archives"

if(isset($_POST["sentform"])):
    $allowedformats = ["png","jpg","jpeg","gif"];
    $extension = pathinfo($_FILES["archive"]["name"], PATHINFO_EXTENSION);

    if(in_array($extension, $allowedformats)):
        $folder = "archives";
        $temp = $_FILES["archive"]["tmp_name"];
        $newName = uniqid().".$extension";

        if(move_uploaded_file($temp, $folder.$newName)):
           $message = "Upload sucessfull!";
        else:
            $message = "Error. Upload no done.";
        endif;
    else:
        $message = "Invalid format.";
    endif;

    echo $message;

endif;


<form action="<?php echo $_SERVER["PHP_SELF"];?>" method="POST" enctype="multipart/form-data">
    <input type="file" name="archive">
    <button name="sentform" >Sent archive</button>
</form>
</body>
</html>

//==================================DOING MULTIPLE UPLOADS========================================

//TO DO A UPLOAD IS NEED CREATE A FOLDER TO UPLOAD THE FILES. CREATE A FOLDER NAMED "Archives"

if(isset($_POST["sentform"])):
    $allowedformats = ["png","jpg","jpeg","gif"];
    $batchArchives = count($_FILES["archive"]["name"]);
    $count = 0;

    while($count < $batchArchives):

    $extension = pathinfo($_FILES["archive"]["name"][$count], PATHINFO_EXTENSION);
        if(in_array($extension, $allowedformats)):
            $folder = "archives";
            $temp = $_FILES["archive"]["tmp_name"]["$count"];
            $newName = uniqid().".$extension";

            if(move_uploaded_file($temp, $folder.$newName)):
            echo "Uploaded the file $newName to folder $folder.<br>";
            else:
                echo "Error to try sent the file $temp.";
            endif;
        else:
            echo "Extension not avaliable.";
        endif;
    $count ++ ;        
    endwhile;

endif;

//HTML FORM

<form action="<?php echo $_SERVER["PHP_SELF"];?>" method="POST" enctype="multipart/form-data">
    <input type="file" name="archive[]" multiple>
    <button name="sentform" >Sent archive</button>
</form>
</body>
</html>

//==================================WORKING WHIT SESSIONS========================================

//USE THIS CODE BELLOW IN home.php

session_start();

echo $_SESSION["color"]."<br>".$_SESSION["car"]."<br>".session_id();

//USE THIS CODE BELLOW IN index.php

session_start();

$_SESSION["color"] = "green";
$_SESSION["car"] = "mustang";

echo $_SESSION["color"]."<br>".$_SESSION["car"]."<br>".session_id();

//to clean a session use the function session_unset
//to  destroy a session use the function session_destroy


//=======================TYPES OF CRIPTOGRAFY AND SAFETY PASSWORDS WHIT PASSWORD HASH===============================

//CRIPTOGRAFY IS THE PROCESS OF STRENGHT THE SECURITY OF A DATA, IT IS APPLIED MAINLY IN PASSWORDS

//MD5

$password = "test123";
echo "Your password is: ".$password."<br>";
$newpassword = md5($password);
echo "Your MD5 criptografed password is: ".$newpassword."<br>";
echo "<hr>";

//BASE 64 ENCODE

$newpassword2 = base64_encode($password);
echo "Your base_64 criptografed password is: ".$newpassword2."<br>";
$uncriptografy = base64_decode($newpassword2);
echo "Your initial password is: ".$uncriptografy."<br>";
echo "<hr>";    

//SHA1

$newpassword3 = sha1($password);
echo "Your sha1 criptografed password is: ".$newpassword3."<br>";

//PASSWORD HASH - SAFETY PASSWORDS
$password = "test123";
$safetyPassword = password_hash($password, PASSWORD_DEFAULT);
echo "Your safety password is: ".$safetyPassword."<br>";
echo "<hr>";


//===============================WORKING WHIT DATES=======================================

//WORKING WHIT DATES
//IS NEED SET THE ACTUAL HOUR BEFORE WORK WHIT DATES, TO DO THIS USE THE CODE BELLOW:
date_default_timezone_set("America/Sao_Paulo");

//TO DISPLAY THE ACTUAL HOUR IN FORMAT 24 HOURS: echo date("H");
//TO DISPLAY THE ACTUAL HOUR IN FORMAT 12 HOURS: echo date("h A");
//TO DISPLAY THE ACTUAL MINUTES: echo date("i");
//TO DISPLAY THE ACTUAL SECONDS: echo date("s");
//TO DISPLAY THE DAY: echo date("d");
//TO DISPLAY THE WEEKDAY: echo date("D"); 
//TO DISPLAY COMPLETE NAME OF THE WEEKDAY: echo date("l");
//TO DISPLAY THE MONTEHR NUMBER: echo date("m");
//TO DISPLAY THE MONTHER NAME: echo date("M");
//TO DISPLAY THE YEAR, 02 DIGITS: echo date("y");
//TO DISPLAY THE YEAR, 04 DIGITS: echo date("Y");
//TO DISPLAY THE COMPLETE DATE: echo date("d/m/Y");
//TO DISPLAY THE COMPLETE DATE WHIT HOURS: echo date("d/m/Y h/i/s);

echo date("h");
echo "<hr>";

echo date("H A");
echo "<hr>";

echo date("i");
echo "<hr>";

echo date("s");
echo "<hr>";

echo date("d");
echo "<hr>";

echo date("D");
echo "<hr>";

echo date("m");
echo "<hr>";

echo date("M");
echo "<hr>";

echo date("Y");
echo "<hr>";

echo date("d/m/Y");
echo "<hr>";
echo date("d/m/Y H:i:s");
echo "<hr>";

//time()
//THE FUNCTION time() RETURN THE AMOUNT OF SECONDS PASSED SINCE 1970
echo time();
echo "<hr>";

//mktime()
//THE FUNCION mktime IS USEFUL TO WORK WHIT PAST AND FUTURE DATES
$paymentDate = mktime(15, 30, 55, 02, 15, 2023);
echo date('d/m/Y', $paymentDate);
echo "<hr>";

//strtotime()
//CONVERT A STRING TO TIME FORMAT - USEFUL TO WOKR WHIT DATABASE
$dateDb = '2019-04-10 13:30:00';
$dateConvert = strtotime($dateDb);
echo date('d/m/Y h:i A', $dateConvert);


//===============================WORKING WHIT COOKIES=======================================

//CREATING COOKIES
setcookie('product01', 'adidas ball', time()+3600);
setcookie('product02', 'adidas shoes', time()+3600);
echo $_COOKIE["product02"];
echo "<hr>";

//DESTROYING COOKIES
//TO DESTROY A COOKIE JUST GIVE A NEGATIVE VALUE IN PARAMETER TIME, THE BROWSER WILL DISPLAY AN ERROR
setcookie('product01', 'adidas ball', time()-3600);
echo $_COOKIE['product01'];


//===============================MANNERING ARCHIVES=======================================

//fopen - OPEN AN ARCHIVE OR URL
//fwrite - WRITE A CONTENT IN THE ARCHIVE
//fclose - CLOSE THE CONTENT
//feof - APPOINT TO END OF ARCHIVE
//filesize - SHOW/GET THE SIZE OF THE ARCHIVE
//fgets - GET A LINE OF AN ARCHIVE

//WRITING A CONTENT IN AN ARCHIVE
$archive = 'archive.txt';
$content = "Test content \r\n";
$fileSize = filesize($archive);
$archiveOpen = fopen($archive, "r");
fwrite($archiveOpen, $content);

//SHOWING THE CONTENT OF A FILE IN THE BROWSER
/*
$archiveOpen = fopen($archive, "a");
while(!feof($archiveOpen)):
    $line = fgets($archiveOpen, $fileSize);
    echo $line."<br>";
endwhile;
fclose($archiveOpen);
*/

/* MODES OF ARCHIVE OPENNED
'r' OPEN THE ARCHIVE ONLY TO READ MODE, THE POINTER SET IN THE BEGGIN OF FILE

'r+'OPEN THE FILE TO READ AND WRITE, THE POINTER SET IN THE BEGGIN OF FILE

‘w’ OPEN THE FILE WRITE, THE POINTER ISSET IN THE BEGGIN OF FILE AND DECREASES THE LENGHT OF FILE.
IF THE ARCHIVE DON'T EXIST, TRY CREATE IT. 

'w+'OPEN THE FILE WRITE AND WRITE, THE POINTER ISSET IN THE BEGGIN OF FILE AND DECREASES THE LENGHT OF FILE.
IF THE ARCHIVE DON'T EXIST, TRY CREATE IT. 

'a' OPEN THE FILE ONLY TO WRITE, SET THE POINTER IN THE END OF FILE. IF TEH ARCHIVE DON'T EXIST, CRY CREATE IT.

‘a+’  OPEN THE FILE TO WRITE AND READ, SET THE POINTER IN THE END OF FILE. IF TEH ARCHIVE DON'T EXIST, CRY CREATE IT.

'x' CREATE AND OPEN THE ARCHIVE ONLY TO WRITE, SET THE POINTER IN THE BEGGIN OF FILE.
IF THE ARCHIVE YET EXIST, THE CALL TO fopen() GOES FALL, RETURNING FALSE AND GENERATING AN ERROR OF NIVEL E_WARNING.
IF THE ARCHIVE DON'T EXIST, TRY CREATE IT.

‘x+’ CREATE AND OPEN THE ARCHIVE TO READ AND WRITE, SET THE POINTER IN THE BEGGIN OF FILE.
IF THE ARCHIVE YET EXIST, THE CALL TO fopen() GOES FALL, RETURNING FALSE AND GENERATING AN ERROR OF NIVEL E_WARNING.
IF THE ARCHIVE DON'T EXIST, TRY CREATE IT.*/


//===============================WORKING WHIT REGULAR EXPRESSION - REGEX=======================================

//REGULAR EXPRESSION ARE USEFUL TO CHECK AND VALIDATE STRING FORMAT LIKE PHONE NUMBERS, POSTAL CODE, EMAIL AND ETC
//^: APPOINT TO BEGGIN OF THE EXPRESSION
//$: APPOINT TO END OF THE EXPRESSION /i
//[] a-z: VALID ONLY LOWERCASE LETTER BETWEEN A TO Z
//[] A-Z: VALID ONLY UPPERCASE LETTER BETWEEN A TO Z
//[] A-Za-z: VALID  UPPERCASE AND LOWERCASE LETTER BETWEEN A TO Z
//[] a-z: VALID  LETTER BETWEEN A TO Z
//[] a-z0-9: VALID NUMBER BETWEEN 0 TO 9 AND LOWERCASE LETTERS A TO Z
//[] A-Z0-9: VALID NUMBER BETWEEN 0 TO 9 AND UPPERCASE LETTERS A TO Z
//[] A-Za-z0-9: VALID NUMBER BETWEEN 0 TO 9 AND UPPERCASE AND LOWERCASE LETTERS A TO Z
//[] 0-9: VALID NUMBER BETWEEN 0 TO 9
//{}: NUMBER OF DIGITS OR FIELD VALIDS
//?{}: VALID ONLY 0 OR 1 OCORRENCES
//*{}: VALID 0 OR ALL OCORRENCES
//+{}: VALID 1 OR ALL OCORRENCES

//CHECKING A STRING FORMAT
echo "CHECKING A STRING FORMAT:<br>";
$string = "love";
$defultStringFormat = "/^[a-z]{4}$/";

if(preg_match($defultStringFormat, $string)):
    echo "Valid format";
    echo "<hr>";
    echo $string;
else:
    echo "Invalid format";
    echo $string;
endif;
    echo"<hr>";

//CHEKING A EMAIL FORMAT
echo "CHECKING A EMAIL FORMAT: <br>";
$email = "pablolucio123_@gmail.com";
$defaultEmailFormat = "/^[a-z0-9.\-\_]+@[a-z0-9]+\.(com|br|com.br|net)$/i";

if(preg_match($defaultEmailFormat, $email)):
    echo "Valid format";
    echo "<hr>";
    echo $email;
else:
    echo "Invalid format";
    echo "<hr>";
    echo $email;
endif;

//===============================USEFUL CODES PHP=======================================



//CLEARING INPUTS IN FORMS
$var = mysqli_escape_string($connect, $_POST['field-name']);

----------------------------------------------------------------------------------------------

//VERIFY IF A FIELD IS EMPTY
 if(empty($field-name));

----------------------------------------------------------------------------------------------
//CONNECTING TO DATABASE
require_once "php_action/db_connect_login.php";

//includes
include_once "includes/header.php";

//SESSION START
session_start();

////VERIFICATING IF THE USER ARE LOGED
if(!isset($_SESSION['loged'])):
    header('Location: index.php');
endif;

----------------------------------------------------------------------------------------------


//===============================MYSQL MAIN DATABASE COMMANDS=======================================

//=======================================CREATE====================================================

CREATE DATABASE - CREATE A DATABASE

Example: 

CREATE DATABASE test;

----------------------------------------------------------------------------------------------

CREATE TABLE - CREATE A TABLE

Example: 

CREATE TABLE peoples(
id int NOT NULL AUTO_INCREMENT,
name varchar(32) NOT NULL,
born date,
gender enum ('M','F'),
weight decimal (5,2),
height decimal (3,2),
country varchar (32) DEFAULT 'Brazil',
PRIMARY KEY (id)
) DEFAULT CHARSET = utf8;

----------------------------------------------------------------------------------------------

CREATE TABLE IF ALREADY NO EXISTS - CREATING A TABLE ONLY IF THIS TABLE DOESNT ALREADY EXIST:

Example:

CREATE TABLE IF NOT EXISTS cars (
name: varchar (20), not null,
year: int (4), not null,
label: varchar (20), not null,
hp: int (4)
 sporting: boolean,
) charset = utf8;

//======================================DESCRIBE==================================================

DESCRIBE - DESCRIBE INFORMATIONS ABOUT A TABLE 

Example:

DESCRIBE peoples;

//======================================INSERT====================================================

INSERT INTO - INSERT ONE OR VARIOUS ROWS (REGISTERS) IN A TABLE

INSERTING ONE REGISTER - Example:

INSERT INTO peoples(name, borndate, gender, weight, height, country) values ('Maria', '1992-12-30', 'F',  '58',  '1,67','France');

----------------------------------------------------------------------------------------------
INSERTING VARIOUS REGISTERS - Example:

INSERT INTO peoples(name, borndate, gender, weight, height, country) values 
('Maria', '1992-12-30', 'F',  '58',  '1,67', DEFAULT),
('Sean', '1969-02-15', 'M',  '68',  '1,57', 'France'),
('Pedro', '1989-06-21', 'M',  '88',  '1,57', 'Brasil');

//========================================DROP====================================================

DROP - DELETE A DATABASE

Example:

DROP database users;

//=======================================DELETE====================================================

DELETE - DELETE SOME OR VARIOUS VALUES IN A TABLE.

DELETING A SINGLE VALUE - Example:

DELETE FROM peoples WHERE id='3';

----------------------------------------------------------------------------------------------

DELETING VARIOUS REGISTER WHIT A CONDITION - Example:

DELETE FROM peoples WHERE age >='21';

//=======================================TRUNCATE====================================================

TRUNCATE: DELETE ALL REGISTERS OF A TABLE REMAINING THE TABLE. 

Example: TRUNCATE peoples;

//=========================================USE======================================================

USE - DEFINE THE DATABASE USED

Example: 

USE users;

//========================================ALTER=====================================================

ALTER: ALTER THE STRUCTURE OF A TABLE ADDING ORE REMOVING AT ITSELF COLUMNS OR ROWS. 

Example:

ALTER TABLE peoples
ADD COLUMN profession  varchar(10);
DROP COLUMN overname;

----------------------------------------------------------------------------------------------

ADDING A COLUMN AFTER OTHER COLLUM YET EXISTENT

Example:

ALTER TABLE peoples
ADD COLUMN age int (2) AFTER name;

----------------------------------------------------------------------------------------------

DEFINING A NEW COLUMN ON HOW THE FIRST COLUMN OF A TABLE:

Example:

ALTER TABLE peoples
ADD COLUMN profession varchar (10) FIRST;

----------------------------------------------------------------------------------------------

MODIFYING THE VALUES OF A COLUMN OR ALREADY EXISTS.

Example:

ALTER TABLE peoples
MODIFY COLUMN profession varchar (20) not null;

----------------------------------------------------------------------------------------------

ALTERING THE NAME OF A COLUMN:
Example:
ALTER TABLE peoples
CHANGE COLUMN profession prof varchar (15);

----------------------------------------------------------------------------------------------

ALTERING THE NAME OF THE TABLE:
Example:

ALTER TABLE peoples
RENAME TO employs;

//========================================UPDATE=====================================================


UPDATE: UPDATE SOME VALUE OR VARIOUS VALUES IN THE TABLE IN A SINGLE TIME. 

ALTERING ANY FIELD OF A TABLE:
Example:

UPDATE courses SET name = 'Javascript' WHERE id = '5';

UPDATE users SET username = 'Joana', email = 'joana_hotmail.com' WHERE id = '25';

----------------------------------------------------------------------------------------------

ALTERING FIELS WHIT CONDITION
Example:

UPDATE courses SET duration = '15' WHERE category = 'frontend';

//========================================SHOW=====================================================

SHOW DATABASES: Show all databases available.

SHOW TABLES: Show all tables of the current database.

//=======================================SELECT=====================================================





//===============================MYSQL USEFUL STATEMENTS=======================================

//DOING SQL CONNECTION

 $SQL = "SELECT desired-fiel FROM table-name WHERE condition";
 $result = mysqli_query($connect, $SQL);
 $data = mysqli_fetch_array($result);

----------------------------------------------------------------------------------------------

//SUMMING VALUES OF A COLUMN OF THE DATABASE

$resultSum = mysqli_query($connect, "SELECT sum(columnName) FROM databaseName");
$lines = mysqli_num_rows($resultSum);
while($lines = mysqli_fetch_array($resultSum)){
echo $lines['sum(columnName)'].'<br/>';

----------------------------------------------------------------------------------------------

//===============================MYSQL MAIN COMMANDS SUMMARY=======================================

mysql_affected_rows — Get number of affected rows in previous MySQL operation
mysql_client_encoding — Returns the name of the character set
mysql_close — Close MySQL connection
mysql_connect — Open a connection to a MySQL Server
mysql_create_db — Create a MySQL database
mysql_data_seek — Move internal result pointer
mysql_db_name — Retrieves database name from the call to mysql_list_dbs
mysql_db_query — Selects a database and executes a query on it
mysql_drop_db — Drop (delete) a MySQL database
mysql_errno — Returns the numerical value of the error message from previous MySQL operation
mysql_error — Returns the text of the error message from previous MySQL operation
mysql_escape_string — Escapes a string for use in a mysql_query
mysql_fetch_array — Fetch a result row as an associative array, a numeric array, or both
mysql_fetch_assoc — Fetch a result row as an associative array
mysql_fetch_field — Get column information from a result and return as an object
mysql_fetch_lengths — Get the length of each output in a result
mysql_fetch_object — Fetch a result row as an object
mysql_fetch_row — Get a result row as an enumerated array
mysql_field_flags — Get the flags associated with the specified field in a result
mysql_field_len — Returns the length of the specified field
mysql_field_name — Get the name of the specified field in a result
mysql_field_seek — Set result pointer to a specified field offset
mysql_field_table — Get name of the table the specified field is in
mysql_field_type — Get the type of the specified field in a result
mysql_free_result — Free result memory
mysql_get_client_info — Get MySQL client info
mysql_get_host_info — Get MySQL host info
mysql_get_proto_info — Get MySQL protocol info
mysql_get_server_info — Get MySQL server info
mysql_info — Get information about the most recent query
mysql_insert_id — Get the ID generated in the last query
mysql_list_dbs — List databases available on a MySQL server
mysql_list_fields — List MySQL table fields
mysql_list_processes — List MySQL processes
mysql_list_tables — List tables in a MySQL database
mysql_num_fields — Get number of fields in result
mysql_num_rows — Get number of rows in result
mysql_pconnect — Open a persistent connection to a MySQL server
mysql_ping — Ping a server connection or reconnect if there is no connection
mysql_query — Send a MySQL query
mysql_real_escape_string — Escapes special characters in a string for use in an SQL statement
mysql_result — Get result data
mysql_select_db — Select a MySQL database
mysql_set_charset — Sets the client character set
mysql_stat — Get current system status
mysql_tablename — Get table name of field
mysql_thread_id — Return the current thread ID
mysql_unbuffered_query — Send an SQL query to MySQL without fetching and buffering the result rows