=============================TYPESCRIPT COURSE===============================

---------------------------------CONCEPTS------------------------------------

Types: Types are the default structure that a variable, function or object 
should receive to math with the expected for it.

Interface: Is like a type, but your intern values can't be reassigned.

generics: Are types that passed and works like argument for functions

Dynamic types: Are the types that a variable assing in a specific code line,
Javascript acts with dynamic types.

Statics types: Are the type for a variable when this variable can assume a type
that is specific in your type/interface. Typescript works this way.

Type inference: Happens whe the Typescript automacticlly knows the type of your 
variable.

Type assertions: Happens when you know the type of an element or variable an 
we type it with this type.

-------------------------------MAIN TYPES--------------------------------------

string: Defines a string type.
let phrase: string = 'I am a string'

-------------------------------------------------------------------------------

number: Defines a number type.
let x: number = 10

-------------------------------------------------------------------------------

objects: Defines types for objects.
const person : {
    name: string;
    age: number;
    overname: string;
}

-------------------------------------------------------------------------------

array: Defines types for arrays (can be array of data).
let numbers: number[] = [1,2,3]
let words: string[] = ['word1', 'word2']

-------------------------------------------------------------------------------

any: Can receives any data (either string, or number, or boolean or other )
let a: any = 'anything'

-------------------------------------------------------------------------------

boolean: Defines a boolean type.
let a: boolean = true

-------------------------------------------------------------------------------

union: The union types turn possible that a variable or function receives two
different types trought the or operator and the final result depends of a check.

function addOrConcat(a: number | string, b number | string){
    if(typeOf a === 'number' && typeOf b === 'number') return a + b
    return `{a}{b}`
}

addOrConcat(3,4) // 7
addOrConcat('3','4') // 34

-------------------------------------------------------------------------------

enum: Is a not ordened structure used to store values.
enum Colors{
    red,
    green,
    blue
}

-------------------------------------------------------------------------------

void: Is a function without a return specified.
() =>

-------------------------------------------------------------------------------

tuple: Is an array with specific types and default length.
const customerData: [number, string] = [1, 'Pablo']

-------------------------------------------------------------------------------

null: Should be used when the value is empty or a function don't has a return.

-------------------------------------------------------------------------------

undefined: Only is used by the own Typescript to iform that a spcefic value do-
esn't can be accessed that generally occors when the typescript can not found
the method, value, var or path desired.

--------------------------------------------------------------------------------

unknow: Is a more secure option for the type any. It requeires a check using if
for preced with operations over the type.

let x: unknow;
let x = 100;
let x = 'Pablo';
let x = 30;
const y = 50;
if(typeof x === 'number') console.log(x + y);
// 80

--------------------------------------------------------------------------------

never: Is used when a function never return anything. Is used in errors.
export function printError() : never {
    throw new Error('An error has occureed')
}

--------------------------------------------------------------------------------

literal type: Is the absolute value of the variable. It means the if a const re-
ceivas a value, this value can't be overwrited bacause of your literal type.
const a = 100 // here a doesn't be 120, a is 100 that too is a subtype of number.

--------------------------------------------------------------------------------

alias: Is a name that a type receive.
type Age = {age: number} // here the alias is Age

-------------------------------USING GENERICS------------------------------------

Example 1:

function identity <T>(value: T) : T {
    return value;
}


function identity2 <T>(value: T) : T {
    return value;
}

console.log(identity<Number>(1)) // 1
console.log(identity<String>('1')) // '1'


----------------------------------------

Example 2:

function showPersons <T,U> (name: T, age: U) : T{
     console.log(age)
     console.log(name)
     return name
}

showPersons<string, number>('Pablo', 24)

--------------------------------USING TUPLES-------------------------------------

Defining a tuple:

const customerData: [string, number, ...string[]] = ['Pablo', 26, 'Married', 'M']

Overwihiting a tuple:

customerData[0] = 'Camila'
customerData[1] = 25
customerData[3] = 'F'

console.log(customerData)
// ['Camila', 25, 'Married', 'F']

---------------------------------USING ENUMS--------------------------------------

enum CarLabels {
    Chevrolet = "Chevrolet",
    Toyota = "Toyota",
    Honda = "Honda"
}

function showaLabel(label: CarLabels){
    return label
}

console.log(showaLabel(CarLabels.Honda))

---------------------------USING FUNCTIONS AS TYPES-----------------------------

Declaring the type: 

type MapString = (item: string) => string


Typing a function with my type: 

function mapString(initialArray: string[], callbackfn: MapString){
    const newArray : string[] = [];
    
    for(let i = 0; i < initialArray.length; i ++ ){
        const item = initialArray[i]
        newArray.push(callbackfn(item))
    }
    
    return newArray;
}

const abc = ['a', 'b', 'c']
const abcMap = mapString(abc, (item) => item.toUpperCase() )

console.log(abcMap) // ['A', 'B', 'C']

-------------------------CREATING AND USING INTERFACES--------------------------

Interface are objects with definitions. Examples

//CREATING INTERFACES

interface IUsers{
  name: string,
  email: string
}

interface IMessages{
  subject: string[],
  body: string,
  attachment?: string[], //array of strings, use number[] to array of numbers,
  options: {
 	id: string;
	name: sting 
     }[] //array of objects with id and name props

}

//USING INTERFACES
funciton sendMail(to: IUsers, message: IMessages){
  console.log(`Email with subject ${message.subject} was sented for ${to.name}.`)
}

---------------------------INHERITING INTERFACES------------------------------


interface Users1{
  name: string,
  age: number
}

interface Users2{
  users: Users1
}

const User : React.FC<Users2> = (props) => {
  return (
  <strong>Name: {props.name}</strong>
  <strong>Age: {props.age}</strong>
  )
}



-------------------------INTERSECTIONING TWO PROPS----------------------------

To intersect two or more props use the union type operator creating a new type
for summing this types. Example:

export type TextProps = {
  text: string;
};

export type TestStyleProps = {
  color?: string;
};

type IntersectionProps = TextProps & TestStyleProps

const Text = ({ text, color }: IntersectionProps) => {
    return (
        <h1 color={color}>{text}</h1>
    )
}

export { Text }


-------------------------CREATING TYPES FOR FUNCTIONS-------------------------

type FunctionType = {
    onDoAnyThing: (anyArg: GlobalObject) => void;
}

-------------------------TYPING FUNCTIONAL COMPONENTS-------------------------

type AppProps = { 
    title: string
 };

const App = ({ message }: AppProps) => <div>{message}</div>;

App('Hello from Typescript')

-----------------------------------------------------------------------------

Using the component:

import React from 'react';

import Header from './components/Header/index'

function App() {

  return (
    <div>
      <Header title='Ecolect' index={2}/>
    </div>
  );
}

export default App;


---------------------------TYPING HTML ELEMENTS----------------------------

For typing HTML elements you need import the type and type the element with 
the HTMLElement. Ex: 

import React, {SelectHTMLAttributes} from 'react'

interface SelectProps extends SelectHTMLAttributes<HTMLSelectElement> {
    label: string;
    name: string;
    options: Array<{
      value: string;
      label: string;
    }>;
}

const Select: React.FC<SelectProps> = ({ label, name, options, ...rest }) => {
    return (
        <div className="select-block">
    <label htmlFor={name}>{label}</label>
    <select value=''  id={name} {...rest}>
        <option value='' disabled  hidden>Selecione uma opÃ§Ã£o</option>
        {options.map((option) => (
        <option key={option.value} value={option.value}>{option.label}</option>
        ))}
 </select> 

------------------------------------------------------------------------------

USING IN COMPONENT

<Select
name="week_day"
label="Dia da semana"

options={[
{ value: "0", label: "Domingo" },
{ value: "1", label: "Segunda-feira" },
{ value: "2", label: "TerÃ§a-feira" },
{ value: "3", label: "Quarta-feira" },
{ value: "4", label: "Quinta-feira" },
{ value: "5", label: "Sexta-feira" },
{ value: "6", label: "SÃ¡bado" },
]}
/>


export default Select

------------------------------TYPING EVENTS-----------------------------------

import React, { ChangeEvent or FormEvent ????????? } from 'react'

const newSubmit = (e: ChangeEvent) => {
	e.preventDefault()
}

<form onSubmit="newSubmit">				
</form>

---------------------------USING TYPE ASSERTIONS------------------------------

Type assertion is the action of type an element with an specific type. It is 
useful when you know that the element really exists and your know your type.

Example1:

const body = document.queryElement('body') as HMTLBodyElement
body.style.background = 'cyan'

Example2:

const body = <HMTLInputElement> document.queryElement('input')
console.log(body.value)


------------------------USING PICK, OMIT AND PARTIAL-----------------------------

Pick and Omit are useful for inherit props from other type and use or not use
each prop how you desire. In this case the reference type will be the type 
TransactionProps. Examples:

type TransactionProps = {
    id: number;
    title: string;
    amount: number;
    category: string;
    type: string;
    createdAt: string;
}


Pick: Used for create a new type using only desired props of other type. Eg:

type TransactionInputProps = Pick<TransactionProps, 'title' | 'amount'>

---------------------------

Omit: Used for create a new type omiting some props of other type. Eg:

type TransactionInputProps = Omit<TransactionProps, 'id' | 'createdAt'>

---------------------------

Partial: Use Partial for use possible props of a type. Example:

type User = {
  name: string;
  email: string;
  created_at: string;
};

user: Model.extend<Partial<User>>({})

---------------------EXTENDING NATIVE PROPS FROM ELEMENTS------------------------

To extends props from native elements or third elements you need to use and in-
terface and extend it with the importantion of the native element. The all props
of the native element is passed to your component througt the prop ...rest. 
Example:

import { ReactElement} from 'react'
import Link, { LinkProps } from 'next/link'
import { useRouter } from 'next/router'

interface ActiveLinkProps  extends LinkProps {
    children: ReactElement;
    route: string;
}

export default function ActiveLink({route, children, ...rest} : ActiveLinkProps) {

    
    const { asPath } = useRouter()

    const currentRoute = asPath === rest.href? route : ''

    console.log(currentRoute)

    return (
        <Link {...rest}>
            {cloneElement(children, {currentRoute: route})}
        </Link>
    )
}

_________________________

Another example:


interface ButtonProps extends TouchableOpacityProps {
    label: string
}

export function Button({ label, ...rest } : ButtonProps {
    return (
        <TouchableOpacity
            style={styles.button}
            activeOpacity={.72}
            {...rest}
        >
           <Text style={styles.textButton}>{label}</Text>
       </TouchableOpacity>
    )
}


-------------------------------GENERAL TIPS-----------------------------------

At definning types for functions, objects, components and more, this types be-
came obligatoly when creating this functions, objects and etc.

----------------------------------

Use interface when working with third API's and types when internal React com-
ponents. Interfaces are a type of types that can be exported and useful to 
avoid write types every time.

----------------------------------

When using types in another file instead of the original file of the lib import,
you need to import the type for this parammeter. (Pass the mouse hover the para-
mmeter type in the original file to see your import to secondary file) Example:

Import {Request, Response} from 'express'

export default {
  async index(req: Request, res: Response)
	return res.json()
}

------------------------------------------------------------------------------

If an item of the interface is optional, your renderization method can con-
tains options. Example: 

interface Users1{
  name: string,
  age: number,
  email?: string
}

<strong>Age: {users.email || 'Don has e-mail'}</strong>

Whenever create a new state to array or object, you need type it with an in-
terface.

----------------------------------

Whenever using an external api of data in object format, the string value of 
the interface created should be the even of the external api.

----------------------------------

Type is more used in functional programming and interface in oriented to obje-
cts programming and when you're using types, you can retribuite the value of
a type, it is more dynamic.

----------------------------------

You can to une two or more enum types using a new union type.

----------------------------------

Type async functions as promises, example: firebaseSignin: () => Promise<void>

----------------------------------

Is recomend configure the target of Typescript package.json file as 'es5' be-
cause this is the version of Javascript that the majority of browser supports.

----------------------------------

Index Signature is...

----------------------------------

The extends keyword only be used with interfaces and not with types.

----------------------------------

Pass a prop as ElementType in components that refer to another component.
 Ex:
interface NavLinkProps{
    icon: ElementType;
}
<Icon as={icon} fontSize='20' />

----------------------------------

The prop children pass to components can be a ReactNode or another data type.
Ex: 
interface NavLinkProps extends ChakraLinkProps{
    children: string;
}
<Text ml='4' fontWeigth='medium'>{children}</Text>

----------------------------------

You can use own typing from hooks of third libraries if it exists in your
contexts. Click in the hook holding 'Ctrl' and use the type that the hook is 
exporting.

----------------------------------

Use the hack as unknown as YourInterface to guarantee that a value has the
specific typing even if TypeScript appoints an error. Example

const user = newUser() as unknown as UserProps

