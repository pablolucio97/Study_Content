============================CSS3 COURSE===============================

-----------------------GENERAL CONSIDERATIONS-------------------------

The browser always gives priority to inline and internal styles 
than external files.

The width and height of an element is calculed summing your width or 
height + padding + border.

Think in all elements like boxes where the sequence are: content, 
padding, border, margin.

The display propertie has default values differents by according 
the element. Example: span: display inline, div: display: block.

All elements in css work like box-model where the propertie box-
sizing defines the maximum limits for the box-border calculating the 
content and padding.The propertie box-sizing together the propertie 
overflow and defines the limits of the box and your behavior.

The css don't sum margin between elements and not aplies margin au-
to in vertical axios.

-----------------------------UNITIES---------------------------------

Fixed values:

cm           	centimeters
mm           	millimeters
in           	inches (1in = 96px = 2.54cm)
px           	pixels (1px = 1/96th of 1in)
pt           	points (1pt = 1/72 of 1in)
pc           	picas (1pc = 12 pt)

---------------------------------------------------------------------

Relative values:

em            Relative to the font-size of the element		
rem           Relative to font-size of the root element	
vw            Relative to 1% of the width of the viewport*	
vh            Relative to 1% of the height of the viewport*	
vmin          Relative to 1% of viewport's* smaller dimension	
vmax          Relative to 1% of viewport's* larger dimension	
%             Relative to the parent element

--------------------------CSS SELECTORS-------------------------------

Examples:

div p: Selects all <p> elements inside <div> elements
div > p: Selects all <p> elements where the parent is a <div> element
div + p: Selects all <p> elements that is next after <div> elements
p ~ u: Selects every <ul> element that are preceded by a <p> element

-------------------------MAIN PROPERTIES------------------------------

-----------------------------Display----------------------------------

Defines the display behavior of an element. Main values:

inline: Display the elements inline.
block: Display the elements in block, column stack.
flex: Allow flexible elements config.

flex-direction: Direction of the elements inside the container.
flex-wrap: Defines if the element should leap to next line.
flex-flow: Shorthand property for setting direction and wrap props.
justify-content: Justify elements in the main axios of the container.
align-items: Justify elements in the adjacent axios of the container.

grid: Allow build grid layout system.

--Properties of the container:

display: defines the display to grid.

grid-template-columns: defines the quantity and proportionality of the
columns. Example: 
grid-template-columns: 3f3 1fr; (means 2 columns where the first has 3x 
the width of the second)

grid-tmplate-rows: defines the quantity and proportionality of the rows. 
Exmaple:
grid-template-rows: 20vh 70vh 10 10vh; (always 100vh in total. means the 
height of each row, 3 rows in the total).

grid-gap: Is the gap between elements in the grid system.

--Properties of the elements inside the container:

grid-column: Defines in wich column the element should start and fisnish. 
Exmaple:
grid-column: 1/3; (the element start in the first coolumn and end in the 
third)

grid-row: Defines in wich row the element should start and fisnish.
grid-row? 2/5; (the element start in the second column and end in the 
5th column)

none: Turn off the element visibility.

contents: Turn off the element container and stacks the childrens.

----------------------------Vsibility----------------------------------

Changes the visibility mode of an element. Main values:

hidden: Hide the element.
inherit: Ihnerit parent visibility props.
visible: Displays the element (default).

----------------------------Position-----------------------------------

Defines a positioning method to render an element.

static: Element is rederized by accord the html flow.
absolute: The element takes absolute position considering your parent 
container. Is setting with absolute values (top, right, bottom, left)
fixed: The element is fixed taking the browser like parent container, 
user can scroll and the element do not will to move.
relative: The element is positioned relative to .......


----------------------------Box-Sizing---------------------------------

Defines how the css shoulds to calculate the element dimmensions (width 
and height, if includding padding and margin or not.)

border-box: Do not considers padding and border in the calc dimensions.
content-box: Considers padding and border in the calc dimensions.

----------------------------Overflow-----------------------------------

Defines what should happen if the content overflows an element box.

hidden: Clip the content that has overflow.
visible: Show the entire content.
scroll: Create a scroll to see the all content inside the box element.
auto: Create automaticaly a scroll to see the all content inside the 
box element if this overflows the box.
overflow-x: Defines the overflow behavior on the x axios.
overflow-y: Defines the overflow behavior on the y axios.

-----------------------------Z-index-----------------------------------

Specifies the stack order of render an element (back or front of ano-
her element). Only works on positioned elements (position: absolute, 
position: relative, position: fixed, or position: sticky).

number: Acepts negative values.
auto: Sets the order by according the parent render flow (default).

-----------------------------Float-------------------------------------

Define the float behavior of an element relative to your parent.

left: The element floats to the left.
right: The element floats to the right.
none: Disables the float.
inherit: Inherits the parent floats value.

-----------------------------Spaces------------------------------------

margin: The external gaps. Space between elements.
padding: Internal spaces. Space embedded on the element dimmensions.

---------------------------Background----------------------------------

Defines props for background element.

background: Defines props directly for the element background.
background-color: Sets the color of the background (rgba, hex or rgb)
background-img: Sets an image or an gradient for background.
background-repeat: Defines if the background repeats.
background-poisition: Adjust the background position.
background-attachment: Adjus the position of background-attachment.

-----------------------------Border------------------------------------

Defines border props.

border: Defines props directly for borders.
border-width: Width of the border.
border-color: Color of the border.
border-radius: Radial corners for borders.
border-style: Style for the border.

-----------------------------Outline-----------------------------------

Defines outline props.

outline: Defines props directly for outline.
outline-style: Style for the outline.
outline-color: Color of the outline.
outline-width: Width of the outline.
outline-offset: Gap between the outline and the element.

------------------------------Text-------------------------------------

Style props for text.

tex-align: Text alignment.
text-decoration: Decoration for text (underline, overline, line-trough)
text-transform: Transform the text (lowercase, uppercase, capitalize)
text-indent: Spaces for paragraph begins.
text-direction: Direction fo the text (ltr, rtl).
text-shadow: Shadow effects for text.
word-spacing: Space between words.
letter-spacing: Space between letters.

------------------------------Font-------------------------------------

Styles props for fonts.

font-family: Family style for font.
font-weight: Font stick (bold, 100...900).
font-style: Style text (italic, bold, oblique, normal).
font-size: Size for font.

------------------------------Line-------------------------------------

line-height: Space height between lines text.

------------------------------List-------------------------------------

list-style: Style for list (square, decimal, disc, circle, none, lower-
alpa, upper-alpha, lower-roman, upper-roman).

----------------------------TRANSITIONS--------------------------------

Transitions are short animations used in elements.

transition: Are the props that will transit durring the animation, this
props can receive various transitions with time each.
transition-delay: Is the dealy to wait a transition starts.

Example:

div {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s, transform 3s;
}

div:hover {
  width: 300px;
  transform: rotateX(90deg) translateX(5px);
}

---------------------------2D TRANSFORMS-------------------------------

translate: Translate the elment in the x and y axios.
rotate: Rotates the element considering negative or positive degrees.
skew: Rotates in angle the element using negative or positive degrees.
skewX: Skews the element in x axios.
skewY: Skews the element in y axios.
scale: Scales the element in x and y axios.
scaleX: Scales the element in x axios.
scaleY: Scales the element in y axios.
matrix: Combines all the 2D transform methods into one. The paremmeters
are: matrix(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())

---------------------------3D TRANSFORMS-------------------------------

rotateX: Rotates the element in X axios using negative or positive degs.
rotateY: Rotates the element in Y axios using negative or positive degs.
rotateZ: Rotates the element in Z axios using negative or positive degs.
translateX: Moves an element in X axios using negative or positive degs.
translateY: Moves an element in Y axios using negative or positive degs.
translateZ: Moves an element in Z axios using negative or positive degs.
scaleX: Scales the element in X axios using negative or positive degs.
scaleY: Scales the element in Y axios using negative or positive degs.
scaleZ: Scales the element in Z axios using negative or positive degs.


-----------------------------SELECTORS---------------------------------

.class: Select all elements with the passed class.
.class1.class2: Select all elements with the both together passed class.
*: select all elements if the document.
#id: Select all elements with the passed id.
p: Select all p elements
p.class1: Select all p elements with class 'class1';
div p: Select all p elements inside a div.
div, p: select all p and div elements.
div > p: Select all p elements inside a div. 
div + p: Select all p elements that are absolutely preceded with a div.
p ~ ul: Select every ul element that are preceded by a p element.
[title~='Hello']: Select all title elements with contains the word 'Hello'
a[href^="en"]: Select all a elements with the href value starts with "en".
a[href$=".pdf"]: Select all a elements the href value ends with ".pdf".
a[href*="test"]: Select all a elements the href value contains "test".
a:active: Selects the active a element.
p::after: Insert something after the content of each p element.
p::before: Insert something after the content of each p element.
input:checked: Select all checked inputs
p:empty: Select all p that has no children.
enabled:disabled: Select all enabled inputs.
p:first-child: Select all p element that is the first child of parent.
p::first-letter: Select all first letter of each p element.
input:focus:  Select the input whici has focus.
button:hover: Select buttons on mouse hover.
p:last-child: Select all p element that is the last child of the parent.
a:link: Select all unvisited links.
:not(p): Selects every elements that is not a p element.
p:nth-child(3): Selects the third p element of a parent.
p:only-child: Select only all p elements that are childs.
:root: Selects the document's root element.
::selection: Selects the portion of element that is selected by a user.
:target: Selects the current active element.
:visited: Selects all visited links.


---------------------------ANIMATIONS----------------------------------

A set of transitions and effects applied an element. Main values:

animation-name: Name of the animation thats will be used in @kefraymes
animation-duration: Duration of the animation.
animation-iteration-count: Numbers of times to run the animation
animation-delay: Time to wait before animation start.

Example:

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-iteration-count: 3;
  animation-delay: 2s;
}

@keyframes example {
  0%   {background-color:red; left:0px; top:0px;}
  25%  {background-color:yellow; left:200px; top:0px;}
  50%  {background-color:blue; left:200px; top:200px;}
  75%  {background-color:green; left:0px; top:200px;}
  100% {background-color:red; left:0px; top:0px;}
}

--------------------------PSEUDO-CLASSES------------------------------

Pseudo classses are new classes that are applied on the elment when an
html event occours.

:a: Unvisited link.
:visited: Visited link.
:hover: Mouve over element.
:active: Element is selected.
:checked: A checkbox is checked.
:focus: An element has received focus.
:target: The tab index indicates the element.

--------------------------PSEUDO-ELEMENTS------------------------------

::before: Inserts some content before the specified element.
::after: Inserts some content after the specified element.
::first-letter: Styles all ther first letter of paragraphs of the html.
::first-line: Styles all ther first line of paragraphs of the html.
::selection: Styles a content when selected by the user.

-----------------------------DOING RESET-------------------------------

Always doing the reset of your application with general elements props 
definition, vars for use colors and font-size for responsible html:


*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

:root{
    --white: #fff;
    --background: #f2f3f5;
    --gray-line: #dcdde0;
    --text: #666666;
    --text-highlight: #b3b9ff;
    --title: #2e384d;
    --red: #e83f5b;
    --green: #4cd62b;
    --blue: #5965e0;
    --blue-dark: #4953b8;
    --blue-twitter: #2aa9e0;
}

@media(max-width: 1080px){
    html{
        font-size: 93.75%;
    }
}


@media(max-width: 720px){
    html{
        font-size: 87.5%;
    }
}

--------------------------GENERAL TIPS---------------------------------

Config the base of your application in the files globals.css and 
goes modifying another files by accord the necessities.

Always use the measure fonts with the unity "rem" and spaces (padding 
or margin) with "em" to allow faster responsivity.

Use colors in with hexadecimal values.

Use CSS grid layout when the structure of your pages has more than 10 
columns.

Avoid to use the text-align prop to align text, always prefers to use
flexbox.

If you nullify or disable an outline from an element, puts another sty-
le when the element is active to generate better experience for the u-
ser indicating that the element has received focus.

Always set the :root of the document with the variables of colors 
of your project and the font size to allow fast layout font change.

Always sets the height of your html and body and the prop font of 
the body, input and form elements.

Use the css selectors to animate/do transitions in another elements 
trought another element.

You should to guarantee that the animations can run in low-end machi-
nes, no animations are better that bad animations.

The default value of the font-size is of 16px (1rem).